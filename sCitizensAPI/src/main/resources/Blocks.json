[
  {
    "method": "getViewers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getViewers()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "method": "values",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType#values()",
    "class": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType",
    "return": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType[]"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDespawnEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDespawnEvent",
    "return": "boolean"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "speed",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#speed()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "float"
  },
  {
    "static": true,
    "field": "EMPTY_CONFIG",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.BlockBreaker#EMPTY_CONFIG",
    "class": "net.citizensnpcs.api.npc.BlockBreaker",
    "return": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration"
  },
  {
    "descr": "Reloads the data store from source (such as a file on disk).",
    "param-names": ["NPCDataStore"],
    "param-types": ["net.citizensnpcs.api.npc.NPCDataStore"],
    "method": "reloadFromSource",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCDataStore#reloadFromSource()",
    "class": "net.citizensnpcs.api.npc.NPCDataStore"
  },
  {
    "param-names": ["Npc"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SimpleSpeechController#SimpleSpeechController(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.ai.speech.SimpleSpeechController"
  },
  {
    "descr": "Creates a new anonymous NPCRegistry that is \"Citizens-backed\" i.e. will reload and unload at the\\nsame time that Citizens reloads and unloads.",
    "param-names": ["Store"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.npc.NPCDataStore"],
    "method": "createCitizensBackedNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#createCitizensBackedNPCRegistry(net.citizensnpcs.api.npc.NPCDataStore)",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "descr": "Gets the Trait class with the given name, or null if not found.",
    "param-names": [
      "TraitFactory",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.TraitFactory",
      "java.lang.String"
    ],
    "method": "getTraitClass",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitFactory#getTraitClass(java.lang.String)",
    "class": "net.citizensnpcs.api.trait.TraitFactory",
    "return": "java.lang.Class"
  },
  {
    "param-names": [
      "Sender",
      "Msg"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.command.CommandSender",
      "java.lang.Object[]"
    ],
    "method": "send",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#send(org.bukkit.command.CommandSender,java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "descr": "Gets the unique id of this NPC. This is guaranteed to be unique for all NPCs.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "getUniqueId",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getUniqueId()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.util.UUID"
  },
  {
    "static": true,
    "method": "values",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#values()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "net.citizensnpcs.api.ai.event.CancelReason[]"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDisableEvent"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationBeginEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationBeginEvent",
    "return": "boolean"
  },
  {
    "method": "getPreviousTarget",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent#getPreviousTarget()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "The material to display (defaults to AIR). For extra customisation see InventoryMenuSlot.",
    "param-names": ["MenuSlot"],
    "param-types": ["net.citizensnpcs.api.gui.MenuSlot"],
    "method": "material",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuSlot#material()",
    "class": "net.citizensnpcs.api.gui.MenuSlot",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Clears the goal controller of all Goals. Will stop the execution of any current goal.",
    "param-names": ["GoalController"],
    "param-types": ["net.citizensnpcs.api.ai.GoalController"],
    "method": "clear",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController#clear()",
    "class": "net.citizensnpcs.api.ai.GoalController"
  },
  {
    "param-names": ["TraitName"],
    "param-types": ["net.citizensnpcs.api.trait.TraitName"],
    "method": "value",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitName#value()",
    "class": "net.citizensnpcs.api.trait.TraitName",
    "return": "java.lang.String"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent"
  },
  {
    "descr": "Creates an object instance from the given DataKey. Should not return null unless no data is present.",
    "param-names": [
      "Persister",
      "Root"
    ],
    "param-types": [
      "net.citizensnpcs.api.persistence.Persister",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "create",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.Persister#create(net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.persistence.Persister",
    "return": "java.lang.Object"
  },
  {
    "method": "getClickedInventory",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getClickedInventory()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType#valueOf(java.lang.String)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType",
    "return": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType"
  },
  {
    "param-names": ["Action"],
    "param-types": ["net.citizensnpcs.api.ai.StuckAction"],
    "method": "setAction",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationStuckEvent#setAction(net.citizensnpcs.api.ai.StuckAction)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationStuckEvent"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByBlockEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "World",
      "X",
      "Y",
      "Z",
      "Yaw",
      "Pitch"
    ],
    "param-types": [
      "java.lang.String",
      "double",
      "double",
      "double",
      "float",
      "float"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.LocationPersister.LazilyLoadedLocation#LazilyLoadedLocation(java.lang.String,double,double,double,float,float)",
    "class": "net.citizensnpcs.api.persistence.LocationPersister.LazilyLoadedLocation"
  },
  {
    "descr": "Called when an NPC is teleported after using an ender pearl.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCEnderTeleportEvent"
  },
  {
    "descr": "Registers a goal which can reprioritise itself dynamically every tick. Implementation note: this may slow down\\nindividual goal controller ticks as the list must be sorted every tick.",
    "param-names": [
      "GoalController",
      "Goal"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.GoalController",
      "net.citizensnpcs.api.ai.PrioritisableGoal"
    ],
    "method": "addPrioritisableGoal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController#addPrioritisableGoal(net.citizensnpcs.api.ai.PrioritisableGoal)",
    "class": "net.citizensnpcs.api.ai.GoalController"
  },
  {
    "descr": "Returns the current EntityTarget of the navigator, if any. May return null.",
    "param-names": ["Navigator"],
    "param-types": ["net.citizensnpcs.api.ai.Navigator"],
    "method": "getEntityTarget",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#getEntityTarget()",
    "class": "net.citizensnpcs.api.ai.Navigator",
    "return": "net.citizensnpcs.api.ai.EntityTarget"
  },
  {
    "descr": "Gets the destination Vector",
    "param-names": ["PathPoint"],
    "param-types": ["net.citizensnpcs.api.astar.pathfinder.PathPoint"],
    "method": "getGoal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.PathPoint#getGoal()",
    "class": "net.citizensnpcs.api.astar.pathfinder.PathPoint",
    "return": "org.bukkit.util.Vector"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.EntityTargetNPCEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.EntityTargetNPCEvent",
    "return": "boolean"
  },
  {
    "descr": "Analyses the class for Fields with the Persist annotation and loads data into them using the\\ngiven DataKey. If a DelegatePersistence annotation is provided the referenced Persister\\nwill be used to create the instance. This annotation can be omitted if the Persister has been registered using\\n#registerPersistDelegate(Class, Class)",
    "param-names": [
      "Instance",
      "Root"
    ],
    "static": true,
    "param-types": [
      "java.lang.Object",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "load",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.PersistenceLoader#<T>load(T,net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.persistence.PersistenceLoader",
    "return": "java.lang.Object"
  },
  {
    "descr": "Runs the AStarState until a plan is found.",
    "param-names": [
      "AStarMachine",
      "State"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarMachine",
      "net.citizensnpcs.api.astar.AStarMachine.AStarState"
    ],
    "method": "run",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarMachine#run(net.citizensnpcs.api.astar.AStarMachine<N,P>.AStarState)",
    "class": "net.citizensnpcs.api.astar.AStarMachine",
    "return": "net.citizensnpcs.api.astar.Plan"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent",
    "return": "boolean"
  },
  {
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "data",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#data()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "net.citizensnpcs.api.npc.MetadataStore"
  },
  {
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationStuckEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationStuckEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["Weight"],
    "param-types": ["double"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.AlignmentBehavior#AlignmentBehavior(double)",
    "class": "net.citizensnpcs.api.ai.flocking.AlignmentBehavior"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.BlockBreaker#BlockBreaker()",
    "class": "net.citizensnpcs.api.npc.BlockBreaker"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRightClickEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRightClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Npcs"],
    "static": true,
    "param-types": ["java.lang.Iterable"],
    "method": "create",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.GroupNPCFlock#create(java.lang.Iterable<net.citizensnpcs.api.npc.NPC>)",
    "class": "net.citizensnpcs.api.ai.flocking.GroupNPCFlock",
    "return": "net.citizensnpcs.api.ai.flocking.GroupNPCFlock"
  },
  {
    "param-names": ["DelegatePersistence"],
    "param-types": ["net.citizensnpcs.api.persistence.DelegatePersistence"],
    "method": "value",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.DelegatePersistence#value()",
    "class": "net.citizensnpcs.api.persistence.DelegatePersistence",
    "return": "java.lang.Class"
  },
  {
    "method": "getDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#getDamage()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent",
    "return": "double"
  },
  {
    "descr": "Gets the NPC with the given unique ID if it exists, otherwise null.",
    "param-names": [
      "NPCRegistry",
      "Uuid"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCRegistry",
      "java.util.UUID"
    ],
    "method": "getByUniqueIdGlobal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#getByUniqueIdGlobal(java.util.UUID)",
    "class": "net.citizensnpcs.api.npc.NPCRegistry",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Gets a trait with the given name.",
    "param-names": [
      "TraitFactory",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.TraitFactory",
      "java.lang.String"
    ],
    "method": "getTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitFactory#<T>getTrait(java.lang.String)",
    "class": "net.citizensnpcs.api.trait.TraitFactory",
    "return": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "descr": "Creates an inventory menu instance starting at the given page that registers events and deregisters events when\\nthe menu is closed.",
    "param-names": ["Instance"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.gui.InventoryMenuPage"],
    "method": "createSelfRegistered",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#createSelfRegistered(net.citizensnpcs.api.gui.InventoryMenuPage)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu",
    "return": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "descr": "Constructs a factory with the given trait class. The trait class must have a no-arguments constructor.",
    "param-names": ["Trait"],
    "static": true,
    "param-types": ["java.lang.Class"],
    "method": "create",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitInfo#create(java.lang.Class<? extends net.citizensnpcs.api.trait.Trait>)",
    "class": "net.citizensnpcs.api.trait.TraitInfo",
    "return": "net.citizensnpcs.api.trait.TraitInfo"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["HPACluster"],
    "param-types": ["net.citizensnpcs.api.hpastar.HPACluster"],
    "method": "hasWalkableNodes",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPACluster#hasWalkableNodes()",
    "class": "net.citizensnpcs.api.hpastar.HPACluster",
    "return": "boolean"
  },
  {
    "descr": "Provides context to a script, such as via Script#setAttribute(String, Object).",
    "param-names": [
      "ContextProvider",
      "Script"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.ContextProvider",
      "net.citizensnpcs.api.scripting.Script"
    ],
    "method": "provide",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ContextProvider#provide(net.citizensnpcs.api.scripting.Script)",
    "class": "net.citizensnpcs.api.scripting.ContextProvider"
  },
  {
    "method": "getCause",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#getCause()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.EulerAnglePersister#EulerAnglePersister()",
    "class": "net.citizensnpcs.api.persistence.EulerAnglePersister"
  },
  {
    "descr": "Called just before the attached NPC is despawned. NPC#getEntity() will be non-null.",
    "param-names": ["Trait"],
    "param-types": ["net.citizensnpcs.api.trait.Trait"],
    "method": "onDespawn",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#onDespawn()",
    "class": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Message"],
    "param-types": ["java.lang.String"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#SpeechContext(java.lang.String)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "descr": "Creates a Precondition that returns either BehaviorStatus#SUCCESS or\\nBehaviorStatus#FAILURE depending on the underlying Condition's return status.",
    "param-names": ["Condition"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.ai.tree.Condition"],
    "method": "runPrecondition",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Precondition#runPrecondition(net.citizensnpcs.api.ai.tree.Condition)",
    "class": "net.citizensnpcs.api.ai.tree.Precondition",
    "return": "net.citizensnpcs.api.ai.tree.Precondition"
  },
  {
    "descr": "Whether the NPC's nameplate should be visible. Boolean.",
    "static": true,
    "field": "NAMEPLATE_VISIBLE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#NAMEPLATE_VISIBLE",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "For compatibility with old Minecraft versions - a two String array {intended material name, fallback material\\nname} e.g. {\"SHIELD\", \"AIR\"}",
    "param-names": ["MenuSlot"],
    "param-types": ["net.citizensnpcs.api.gui.MenuSlot"],
    "method": "compatMaterial",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuSlot#compatMaterial()",
    "class": "net.citizensnpcs.api.gui.MenuSlot",
    "return": "java.lang.String[]"
  },
  {
    "method": "getDamager",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#getDamager()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Adds a trait to this NPC. This will use the TraitFactory defined for this NPC to construct and attach a\\ntrait using #addTrait(Trait).",
    "param-names": [
      "NPC",
      "Trait"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "java.lang.Class"
    ],
    "method": "addTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#addTrait(java.lang.Class<? extends net.citizensnpcs.api.trait.Trait>)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "toString",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#toString()",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "Wrapping",
      "Tick Limit"
    ],
    "static": true,
    "param-types": [
      "net.citizensnpcs.api.ai.tree.Behavior",
      "int"
    ],
    "method": "tickLimiter",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.TimerDecorator#tickLimiter(net.citizensnpcs.api.ai.tree.Behavior,int)",
    "class": "net.citizensnpcs.api.ai.tree.TimerDecorator",
    "return": "net.citizensnpcs.api.ai.tree.TimerDecorator"
  },
  {
    "descr": "Creates the tag.",
    "param-names": [
      "Name",
      "Value"
    ],
    "param-types": [
      "java.lang.String",
      "java.lang.String"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.StringTag#StringTag(java.lang.String,java.lang.String)",
    "class": "net.citizensnpcs.api.jnbt.StringTag"
  },
  {
    "param-names": ["MenuPatterns"],
    "param-types": ["net.citizensnpcs.api.gui.MenuPatterns"],
    "method": "value",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuPatterns#value()",
    "class": "net.citizensnpcs.api.gui.MenuPatterns",
    "return": "net.citizensnpcs.api.gui.MenuPattern[]"
  },
  {
    "descr": "Updates and runs the pathfinding strategy on its current NPC and destination.",
    "param-names": ["PathStrategy"],
    "param-types": ["net.citizensnpcs.api.ai.PathStrategy"],
    "method": "update",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.PathStrategy#update()",
    "class": "net.citizensnpcs.api.ai.PathStrategy",
    "return": "boolean"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.BehaviorStatus#valueOf(java.lang.String)",
    "class": "net.citizensnpcs.api.ai.tree.BehaviorStatus",
    "return": "net.citizensnpcs.api.ai.tree.BehaviorStatus"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAEntrance#HPAEntrance()",
    "class": "net.citizensnpcs.api.hpastar.HPAEntrance"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#valueOf(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "net.citizensnpcs.api.ai.event.CancelReason"
  },
  {
    "param-names": ["File"],
    "param-types": ["java.lang.String"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.NBTStorage#NBTStorage(java.lang.String)",
    "class": "net.citizensnpcs.api.util.NBTStorage"
  },
  {
    "descr": "Sets whether the navigator is paused and shouldn't process the path for now.",
    "param-names": [
      "Navigator",
      "Paused"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.Navigator",
      "boolean"
    ],
    "method": "setPaused",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#setPaused(boolean)",
    "class": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSpawnEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSpawnEvent",
    "return": "boolean"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent",
    "return": "boolean"
  },
  {
    "descr": "The Minecart item data. Byte.",
    "static": true,
    "field": "MINECART_ITEM_DATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#MINECART_ITEM_DATA",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the name of the VocalChord that called this event.",
    "method": "getVocalChordName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent#getVocalChordName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Writes a tag.",
    "param-names": [
      "NBTOutputStream",
      "Tag"
    ],
    "param-types": [
      "net.citizensnpcs.api.jnbt.NBTOutputStream",
      "net.citizensnpcs.api.jnbt.Tag"
    ],
    "method": "writeTag",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTOutputStream#writeTag(net.citizensnpcs.api.jnbt.Tag)",
    "class": "net.citizensnpcs.api.jnbt.NBTOutputStream"
  },
  {
    "descr": "Create an inventory menu instance starting at the given page and with the initial context.",
    "param-names": [
      "Clazz",
      "Context"
    ],
    "static": true,
    "param-types": [
      "java.lang.Class",
      "java.util.Map"
    ],
    "method": "createWithContext",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#createWithContext(java.lang.Class<? extends net.citizensnpcs.api.gui.InventoryMenuPage>,java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu",
    "return": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "param-names": ["FileStorage"],
    "param-types": ["net.citizensnpcs.api.util.FileStorage"],
    "method": "getFile",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.FileStorage#getFile()",
    "class": "net.citizensnpcs.api.util.FileStorage",
    "return": "java.io.File"
  },
  {
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "copy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#copy()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Creates a new instance of a VocalChord",
    "param-names": [
      "SpeechFactory",
      "Clazz"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechFactory",
      "java.lang.Class"
    ],
    "method": "getVocalChord",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechFactory#getVocalChord(java.lang.Class<? extends net.citizensnpcs.api.ai.speech.VocalChord>)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechFactory",
    "return": "net.citizensnpcs.api.ai.speech.VocalChord"
  },
  {
    "descr": "Removes a trait. This prevents a trait from being added to an NPC but does not remove existing traits from the\\nNPCs.",
    "param-names": [
      "TraitFactory",
      "Info"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.TraitFactory",
      "net.citizensnpcs.api.trait.TraitInfo"
    ],
    "method": "deregisterTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitFactory#deregisterTrait(net.citizensnpcs.api.trait.TraitInfo)",
    "class": "net.citizensnpcs.api.trait.TraitFactory"
  },
  {
    "descr": "Gets the name of the Talkable LivingEntity",
    "param-names": ["Talkable"],
    "param-types": ["net.citizensnpcs.api.ai.speech.Talkable"],
    "method": "getName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.Talkable#getName()",
    "class": "net.citizensnpcs.api.ai.speech.Talkable",
    "return": "java.lang.String"
  },
  {
    "method": "getCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#getCancelReason()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent"
  },
  {
    "descr": "Updates the goal.",
    "param-names": [
      "Goal",
      "Selector"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.Goal",
      "net.citizensnpcs.api.ai.GoalSelector"
    ],
    "method": "run",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Goal#run(net.citizensnpcs.api.ai.GoalSelector)",
    "class": "net.citizensnpcs.api.ai.Goal"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDeathEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDeathEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Transition to another page. Adds the previous page to a stack which will be returned to when the current page is\\nclosed.",
    "param-names": [
      "InventoryMenu",
      "Clazz"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu",
      "java.lang.Class"
    ],
    "method": "transition",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#transition(java.lang.Class<? extends net.citizensnpcs.api.gui.InventoryMenuPage>)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCloneEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCloneEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "Npc",
      "Flock",
      "Behaviors"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "net.citizensnpcs.api.ai.flocking.NPCFlock",
      "net.citizensnpcs.api.ai.flocking.FlockBehavior[]"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.Flocker#Flocker(net.citizensnpcs.api.npc.NPC,net.citizensnpcs.api.ai.flocking.NPCFlock,net.citizensnpcs.api.ai.flocking.FlockBehavior...)",
    "class": "net.citizensnpcs.api.ai.flocking.Flocker"
  },
  {
    "descr": "Indicates that the Behavior has succeeded and can be terminated.",
    "static": true,
    "field": "SUCCESS",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.BehaviorStatus#SUCCESS",
    "class": "net.citizensnpcs.api.ai.tree.BehaviorStatus",
    "return": "net.citizensnpcs.api.ai.tree.BehaviorStatus"
  },
  {
    "param-names": [
      "NeighbourGeneratorBlockExaminer",
      "Source",
      "Point"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.NeighbourGeneratorBlockExaminer",
      "net.citizensnpcs.api.astar.pathfinder.BlockSource",
      "net.citizensnpcs.api.astar.pathfinder.PathPoint"
    ],
    "method": "getNeighbours",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.NeighbourGeneratorBlockExaminer#getNeighbours(net.citizensnpcs.api.astar.pathfinder.BlockSource,net.citizensnpcs.api.astar.pathfinder.PathPoint)",
    "class": "net.citizensnpcs.api.astar.pathfinder.NeighbourGeneratorBlockExaminer",
    "return": "java.util.List"
  },
  {
    "param-names": [
      "Talker",
      "Message"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "java.lang.String"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#SpeechContext(net.citizensnpcs.api.npc.NPC,java.lang.String)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "method": "getDamager",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCVehicleDamageEvent#getDamager()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCVehicleDamageEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets the default NPC data store. Should be set during onEnable.",
    "param-names": [
      "CitizensPlugin",
      "Store"
    ],
    "param-types": [
      "net.citizensnpcs.api.CitizensPlugin",
      "net.citizensnpcs.api.npc.NPCDataStore"
    ],
    "method": "setDefaultNPCDataStore",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#setDefaultNPCDataStore(net.citizensnpcs.api.npc.NPCDataStore)",
    "class": "net.citizensnpcs.api.CitizensPlugin"
  },
  {
    "descr": "Creates an AStarState that can be reused across multiple invocations of {#run(AStarState, int).",
    "param-names": [
      "AStarMachine",
      "Goal",
      "Start"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarMachine",
      "net.citizensnpcs.api.astar.AStarGoal",
      "net.citizensnpcs.api.astar.AStarNode"
    ],
    "method": "getStateFor",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarMachine#getStateFor(net.citizensnpcs.api.astar.AStarGoal<N>,N)",
    "class": "net.citizensnpcs.api.astar.AStarMachine",
    "return": "net.citizensnpcs.api.astar.AStarMachine.AStarState"
  },
  {
    "descr": "Whether the NPC is 'flyable' i.e. will fly when pathfinding. Boolean.",
    "static": true,
    "field": "FLYABLE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#FLYABLE",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Create a builder to compile the given source code.",
    "param-names": [
      "ScriptCompiler",
      "Src",
      "Identifier",
      "Extension"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.ScriptCompiler",
      "java.lang.String",
      "java.lang.String",
      "java.lang.String"
    ],
    "method": "compile",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler#compile(java.lang.String,java.lang.String,java.lang.String)",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler",
    "return": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder"
  },
  {
    "param-names": [
      "HPAGraph",
      "X",
      "Z"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPAGraph",
      "int",
      "int"
    ],
    "method": "addClusters",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraph#addClusters(int,int)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraph"
  },
  {
    "descr": "Whether the NPC is leashable. Boolean.",
    "static": true,
    "field": "LEASH_PROTECTED_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#LEASH_PROTECTED_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "Inventory",
      "Slot",
      "Item"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Inventory",
      "int",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Inventory#setItem(int,org.bukkit.inventory.ItemStack)",
    "class": "net.citizensnpcs.api.trait.trait.Inventory"
  },
  {
    "static": true,
    "method": "isUsing1_13API",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.SpigotUtil#isUsing1_13API()",
    "class": "net.citizensnpcs.api.util.SpigotUtil",
    "return": "boolean"
  },
  {
    "param-names": [
      "InventoryMenuPage",
      "Slot",
      "Event"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenuPage",
      "net.citizensnpcs.api.gui.InventoryMenuSlot",
      "org.bukkit.event.inventory.InventoryClickEvent"
    ],
    "method": "onClick",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuPage#onClick(net.citizensnpcs.api.gui.InventoryMenuSlot,org.bukkit.event.inventory.InventoryClickEvent)",
    "class": "net.citizensnpcs.api.gui.InventoryMenuPage"
  },
  {
    "descr": "Gets the unique ID of this NPC. This is not guaranteed to be globally unique across server sessions.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "getId",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getId()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "int"
  },
  {
    "descr": "The specific value type to use when deserialising values from storage. Most useful when using specific number\\ntypes e.g. Long, Byte, Short but storing as Integer.",
    "param-names": ["Persist"],
    "param-types": ["net.citizensnpcs.api.persistence.Persist"],
    "method": "valueType",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.Persist#valueType()",
    "class": "net.citizensnpcs.api.persistence.Persist",
    "return": "java.lang.Class"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCVehicleDamageEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCVehicleDamageEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Vector"],
    "param-types": ["java.util.Collection"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.Path#Path(java.util.Collection<org.bukkit.util.Vector>)",
    "class": "net.citizensnpcs.api.astar.pathfinder.Path"
  },
  {
    "static": true,
    "field": "PLUGIN",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#PLUGIN",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "net.citizensnpcs.api.ai.event.CancelReason"
  },
  {
    "descr": "Represents an event where a Talkable entity speaks by a Talkable bystander.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent"
  },
  {
    "param-names": [
      "Npcs",
      "Radius"
    ],
    "param-types": [
      "java.lang.Iterable",
      "double"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.GroupNPCFlock#GroupNPCFlock(java.lang.Iterable<net.citizensnpcs.api.npc.NPC>,double)",
    "class": "net.citizensnpcs.api.ai.flocking.GroupNPCFlock"
  },
  {
    "descr": "The next sub-menu class to transition to.",
    "param-names": ["MenuTransition"],
    "param-types": ["net.citizensnpcs.api.gui.MenuTransition"],
    "method": "value",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuTransition#value()",
    "class": "net.citizensnpcs.api.gui.MenuTransition",
    "return": "java.lang.Class"
  },
  {
    "descr": "Cancel all running compile tasks.",
    "param-names": ["ScriptCompiler"],
    "param-types": ["net.citizensnpcs.api.scripting.ScriptCompiler"],
    "method": "interrupt",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler#interrupt()",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCVehicleDamageEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCVehicleDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getScriptCompiler",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#getScriptCompiler()",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "net.citizensnpcs.api.scripting.ScriptCompiler"
  },
  {
    "param-names": [
      "DataKey",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String"
    ],
    "method": "getInt",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getInt(java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "int"
  },
  {
    "param-names": ["Damage"],
    "param-types": ["int"],
    "method": "setDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#setDamage(int)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getOriginal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#getOriginal()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLeftClickEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLeftClickEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "getOwningRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getOwningRegistry()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveTraitEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveTraitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Called just before Citizens is reloaded.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensPreReloadEvent"
  },
  {
    "method": "getKey",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent#getKey()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent",
    "return": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "param-names": [
      "Path",
      "Cost"
    ],
    "param-types": [
      "java.util.List",
      "float"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.AStarSolution#AStarSolution(java.util.List<net.citizensnpcs.api.hpastar.ReversableAStarNode>,float)",
    "class": "net.citizensnpcs.api.hpastar.AStarSolution"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns whether the goal is ready to start.",
    "param-names": [
      "Goal",
      "Selector"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.Goal",
      "net.citizensnpcs.api.ai.GoalSelector"
    ],
    "method": "shouldExecute",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Goal#shouldExecute(net.citizensnpcs.api.ai.GoalSelector)",
    "class": "net.citizensnpcs.api.ai.Goal",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByBlockEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Msg"],
    "static": true,
    "param-types": ["java.lang.Object[]"],
    "method": "debug",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#debug(java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "param-names": ["PathStrategy"],
    "param-types": ["net.citizensnpcs.api.ai.PathStrategy"],
    "method": "getCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.PathStrategy#getCancelReason()",
    "class": "net.citizensnpcs.api.ai.PathStrategy",
    "return": "net.citizensnpcs.api.ai.event.CancelReason"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.SimpleAStarStorage#SimpleAStarStorage()",
    "class": "net.citizensnpcs.api.astar.SimpleAStarStorage"
  },
  {
    "descr": "Sets the vector location of this point",
    "param-names": [
      "PathPoint",
      "Vector"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.PathPoint",
      "org.bukkit.util.Vector"
    ],
    "method": "setVector",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.PathPoint#setVector(org.bukkit.util.Vector)",
    "class": "net.citizensnpcs.api.astar.pathfinder.PathPoint"
  },
  {
    "param-names": [
      "BlockSource",
      "Pos"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.BlockSource",
      "org.bukkit.util.Vector"
    ],
    "method": "getMaterialAt",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockSource#getMaterialAt(org.bukkit.util.Vector)",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockSource",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": [
      "Parent",
      "Goal",
      "Location",
      "Source",
      "Examiners"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.VectorNode",
      "net.citizensnpcs.api.astar.pathfinder.VectorGoal",
      "org.bukkit.util.Vector",
      "net.citizensnpcs.api.astar.pathfinder.BlockSource",
      "net.citizensnpcs.api.astar.pathfinder.BlockExaminer[]"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.VectorNode#VectorNode(net.citizensnpcs.api.astar.pathfinder.VectorNode,net.citizensnpcs.api.astar.pathfinder.VectorGoal,org.bukkit.util.Vector,net.citizensnpcs.api.astar.pathfinder.BlockSource,net.citizensnpcs.api.astar.pathfinder.BlockExaminer...)",
    "class": "net.citizensnpcs.api.astar.pathfinder.VectorNode"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSelectEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSelectEvent",
    "return": "boolean"
  },
  {
    "descr": "Whether the NPC is 'flyable' i.e. will fly when pathfinding. Boolean.",
    "static": true,
    "field": "FLYABLE_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#FLYABLE_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "WanderGoal",
      "Delay"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.goals.WanderGoal",
      "int"
    ],
    "method": "setDelay",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.WanderGoal#setDelay(int)",
    "class": "net.citizensnpcs.api.ai.goals.WanderGoal"
  },
  {
    "method": "getSlot",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getSlot()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "int"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.TargetType#valueOf(java.lang.String)",
    "class": "net.citizensnpcs.api.ai.TargetType",
    "return": "net.citizensnpcs.api.ai.TargetType"
  },
  {
    "param-names": ["Translator.TranslationProvider"],
    "param-types": ["net.citizensnpcs.api.util.Translator.TranslationProvider"],
    "method": "createInputStream",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Translator.TranslationProvider#createInputStream()",
    "class": "net.citizensnpcs.api.util.Translator.TranslationProvider",
    "return": "java.io.InputStream"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveTraitEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveTraitEvent",
    "return": "boolean"
  },
  {
    "descr": "Scans the object for fields annotated with Persist and saves them to the given DataKey.",
    "param-names": [
      "Instance",
      "Root"
    ],
    "static": true,
    "param-types": [
      "java.lang.Object",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "save",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.PersistenceLoader#save(java.lang.Object,net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.persistence.PersistenceLoader"
  },
  {
    "param-names": [
      "Persistable",
      "Root"
    ],
    "param-types": [
      "net.citizensnpcs.api.persistence.Persistable",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "load",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.Persistable#load(net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.persistence.Persistable"
  },
  {
    "param-names": [
      "Data Folder",
      "Preferred Locale"
    ],
    "static": true,
    "param-types": [
      "java.io.File",
      "java.util.Locale"
    ],
    "method": "setInstance",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Translator#setInstance(java.io.File,java.util.Locale)",
    "class": "net.citizensnpcs.api.util.Translator"
  },
  {
    "descr": "Replaces the execution of any running Goals with the specified goal.",
    "param-names": [
      "GoalSelector",
      "Goal"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.GoalSelector",
      "net.citizensnpcs.api.ai.Goal"
    ],
    "method": "select",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalSelector#select(net.citizensnpcs.api.ai.Goal)",
    "class": "net.citizensnpcs.api.ai.GoalSelector"
  },
  {
    "descr": "Returns whether this path will be debugged. Path debugging happens by repeatedly setting the next destination\\nblock to a client-sided flower.",
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "debug",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#debug()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "boolean"
  },
  {
    "param-names": ["Weight"],
    "param-types": ["double"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.CohesionBehavior#CohesionBehavior(double)",
    "class": "net.citizensnpcs.api.ai.flocking.CohesionBehavior"
  },
  {
    "descr": "Called when an NPC's SpeechController needs to output some text to a Talkable entity.",
    "param-names": [
      "VocalChord",
      "Context"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.VocalChord",
      "net.citizensnpcs.api.ai.speech.SpeechContext"
    ],
    "method": "talk",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.VocalChord#talk(net.citizensnpcs.api.ai.speech.SpeechContext)",
    "class": "net.citizensnpcs.api.ai.speech.VocalChord"
  },
  {
    "param-names": [
      "Paginator",
      "Header"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.Paginator",
      "java.lang.String"
    ],
    "method": "header",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Paginator#header(java.lang.String)",
    "class": "net.citizensnpcs.api.util.Paginator",
    "return": "net.citizensnpcs.api.util.Paginator"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Stores data at the given key. Data will not persist.",
    "param-names": [
      "MetadataStore",
      "Key",
      "Data"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "java.lang.String",
      "java.lang.Object"
    ],
    "method": "set",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#set(java.lang.String,java.lang.Object)",
    "class": "net.citizensnpcs.api.npc.MetadataStore"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the SpeechContext that will be sent to the VocalChord.",
    "method": "getContext",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent#getContext()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent",
    "return": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "method": "getItemStack",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent#getItemStack()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "method": "getTo",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTeleportEvent#getTo()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTeleportEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Checks whether the given Entity is convertable to an NPC.",
    "param-names": [
      "NPCRegistry",
      "Entity"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCRegistry",
      "org.bukkit.entity.Entity"
    ],
    "method": "isNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#isNPC(org.bukkit.entity.Entity)",
    "class": "net.citizensnpcs.api.npc.NPCRegistry",
    "return": "boolean"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechEvent",
    "return": "java.lang.String"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.ItemStackPersister#ItemStackPersister()",
    "class": "net.citizensnpcs.api.persistence.ItemStackPersister"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Runs the machine until a plan is either found or cannot be generated.",
    "param-names": [
      "AStarMachine",
      "Goal",
      "Start"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarMachine",
      "net.citizensnpcs.api.astar.AStarGoal",
      "net.citizensnpcs.api.astar.AStarNode"
    ],
    "method": "runFully",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarMachine#runFully(net.citizensnpcs.api.astar.AStarGoal<N>,N)",
    "class": "net.citizensnpcs.api.astar.AStarMachine",
    "return": "net.citizensnpcs.api.astar.Plan"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCAddTraitEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCAddTraitEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Adds a NavigatorCallback that will be removed immediately after being called.",
    "param-names": [
      "NavigatorParameters",
      "Callback"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "net.citizensnpcs.api.ai.event.NavigatorCallback"
    ],
    "method": "addSingleUseCallback",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#addSingleUseCallback(net.citizensnpcs.api.ai.event.NavigatorCallback)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "descr": "Indicates that the Behavior has failed unrecoverably.",
    "static": true,
    "field": "FAILURE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.BehaviorStatus#FAILURE",
    "class": "net.citizensnpcs.api.ai.tree.BehaviorStatus",
    "return": "net.citizensnpcs.api.ai.tree.BehaviorStatus"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent"
  },
  {
    "method": "getCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCancelEvent#getCancelReason()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCancelEvent",
    "return": "net.citizensnpcs.api.ai.event.CancelReason"
  },
  {
    "param-names": [
      "Composite",
      "Behavior"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.tree.Composite",
      "net.citizensnpcs.api.ai.tree.Behavior"
    ],
    "method": "removeBehavior",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Composite#removeBehavior(net.citizensnpcs.api.ai.tree.Behavior)",
    "class": "net.citizensnpcs.api.ai.tree.Composite"
  },
  {
    "param-names": [
      "Comparator",
      "Behaviors"
    ],
    "static": true,
    "param-types": [
      "java.util.Comparator",
      "net.citizensnpcs.api.ai.tree.Behavior[]"
    ],
    "method": "prioritySelector",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Selectors#prioritySelector(java.util.Comparator<net.citizensnpcs.api.ai.tree.Behavior>,net.citizensnpcs.api.ai.tree.Behavior...)",
    "class": "net.citizensnpcs.api.ai.tree.Selectors",
    "return": "net.citizensnpcs.api.ai.tree.Selector.Builder"
  },
  {
    "param-names": ["InventoryMenuSlot"],
    "param-types": ["net.citizensnpcs.api.gui.InventoryMenuSlot"],
    "method": "getCurrentItem",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuSlot#getCurrentItem()",
    "class": "net.citizensnpcs.api.gui.InventoryMenuSlot",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_STRING",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_STRING",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "param-names": ["SwimmingExaminer"],
    "param-types": ["net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer"],
    "method": "canSwimInLava",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer#canSwimInLava()",
    "class": "net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Materials"],
    "static": true,
    "param-types": ["org.bukkit.Material[]"],
    "method": "isLiquid",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#isLiquid(org.bukkit.Material...)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "boolean"
  },
  {
    "param-names": ["Entity"],
    "static": true,
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isWaterMob",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer#isWaterMob(org.bukkit.entity.Entity)",
    "class": "net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer",
    "return": "boolean"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.BehaviorGoalAdapter#BehaviorGoalAdapter()",
    "class": "net.citizensnpcs.api.ai.tree.BehaviorGoalAdapter"
  },
  {
    "param-names": [
      "World",
      "X",
      "Z",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "float"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.ChunkBlockSource#ChunkBlockSource(org.bukkit.World,int,int,float)",
    "class": "net.citizensnpcs.api.astar.pathfinder.ChunkBlockSource"
  },
  {
    "static": true,
    "field": "PLUGIN",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#PLUGIN",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "net.citizensnpcs.api.event.DespawnReason"
  },
  {
    "param-names": [
      "Persistable",
      "Root"
    ],
    "param-types": [
      "net.citizensnpcs.api.persistence.Persistable",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "save",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.Persistable#save(net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.persistence.Persistable"
  },
  {
    "param-names": [
      "ScriptCompiler",
      "Code",
      "Extension"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.ScriptCompiler",
      "java.lang.String",
      "java.lang.String"
    ],
    "method": "run",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler#run(java.lang.String,java.lang.String)",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent"
  },
  {
    "descr": "Whitelist the allowed clicktypes for transition (empty = all allowed).",
    "param-names": ["MenuTransition"],
    "param-types": ["net.citizensnpcs.api.gui.MenuTransition"],
    "method": "filter",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuTransition#filter()",
    "class": "net.citizensnpcs.api.gui.MenuTransition",
    "return": "org.bukkit.event.inventory.ClickType[]"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensPreReloadEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensPreReloadEvent",
    "return": "boolean"
  },
  {
    "descr": "For use with patterns.",
    "param-names": ["MenuSlot"],
    "param-types": ["net.citizensnpcs.api.gui.MenuSlot"],
    "method": "pat",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuSlot#pat()",
    "class": "net.citizensnpcs.api.gui.MenuSlot",
    "return": "char"
  },
  {
    "descr": "Whether to prevent NPC being targeted by hostile mobs. Boolean.",
    "static": true,
    "field": "TARGETABLE_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#TARGETABLE_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getResult",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getResult()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.event.Event.Result"
  },
  {
    "param-names": ["Selector"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Selector"],
    "method": "getNextBehavior",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Selector#getNextBehavior()",
    "class": "net.citizensnpcs.api.ai.tree.Selector",
    "return": "net.citizensnpcs.api.ai.tree.Behavior"
  },
  {
    "param-names": [
      "HPAGraph",
      "Start",
      "Goal"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPAGraph",
      "org.bukkit.Location",
      "org.bukkit.Location"
    ],
    "method": "findPath",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraph#findPath(org.bukkit.Location,org.bukkit.Location)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraph",
    "return": "net.citizensnpcs.api.astar.Plan"
  },
  {
    "descr": "Gets the list of manual path vectors",
    "param-names": ["PathPoint"],
    "param-types": ["net.citizensnpcs.api.astar.pathfinder.PathPoint"],
    "method": "getPathVectors",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.PathPoint#getPathVectors()",
    "class": "net.citizensnpcs.api.astar.pathfinder.PathPoint",
    "return": "java.util.List"
  },
  {
    "param-names": ["Plugin"],
    "param-types": ["org.bukkit.plugin.Plugin"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.EventRegistrar.Events#Events(org.bukkit.plugin.Plugin)",
    "class": "net.citizensnpcs.api.scripting.EventRegistrar.Events"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Return the collision Vector being applied to the NPC.",
    "method": "getCollisionVector",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCPushEvent#getCollisionVector()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCPushEvent",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "The final message to be sent to the bystander. Note: This may differ from the message contained in the\\nSpeechContext, as formatting may have occurred.",
    "method": "getMessage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechEvent#getMessage()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Called when Citizens is reloaded.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensReloadEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCPushEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCPushEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the TraitFactory.",
    "param-names": ["CitizensPlugin"],
    "param-types": ["net.citizensnpcs.api.CitizensPlugin"],
    "method": "getTraitFactory",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#getTraitFactory()",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "net.citizensnpcs.api.trait.TraitFactory"
  },
  {
    "method": "getNavigator",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationStuckEvent#getNavigator()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationStuckEvent",
    "return": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "descr": "Called when a trait is removed from the attached NPC.",
    "param-names": ["Trait"],
    "param-types": ["net.citizensnpcs.api.trait.Trait"],
    "method": "onRemove",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#onRemove()",
    "class": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenGateEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenGateEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": [
      "Location",
      "Radius",
      "Yradius"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.Location",
      "int",
      "int"
    ],
    "method": "findValidLocation",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#findValidLocation(org.bukkit.Location,int,int)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveTraitEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveTraitEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setCursor",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#setCursor(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent"
  },
  {
    "param-names": [
      "Goal",
      "Priority"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.Goal",
      "int"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.SimpleGoalEntry#SimpleGoalEntry(net.citizensnpcs.api.ai.Goal,int)",
    "class": "net.citizensnpcs.api.ai.SimpleGoalEntry"
  },
  {
    "param-names": ["SwimmingExaminer"],
    "param-types": ["net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer"],
    "method": "isSwimmingUp",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer#isSwimmingUp()",
    "class": "net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer",
    "return": "boolean"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveTraitEvent"
  },
  {
    "descr": "Gets the class of a type of tag.",
    "param-names": ["Type"],
    "static": true,
    "param-types": ["int"],
    "method": "getTypeClass",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTUtils#getTypeClass(int)",
    "class": "net.citizensnpcs.api.jnbt.NBTUtils",
    "return": "java.lang.Class"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration#BlockBreakerConfiguration()",
    "class": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration"
  },
  {
    "descr": "Runs the machine using the given AStarState's AStarStorage. Can be used to provide a continuation\\nstyle usage of the A* algorithm.",
    "param-names": [
      "AStarMachine",
      "State",
      "Max Iterations"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarMachine",
      "net.citizensnpcs.api.astar.AStarMachine.AStarState",
      "int"
    ],
    "method": "run",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarMachine#run(net.citizensnpcs.api.astar.AStarMachine<N,P>.AStarState,int)",
    "class": "net.citizensnpcs.api.astar.AStarMachine",
    "return": "net.citizensnpcs.api.astar.Plan"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Sets the contents of an NPC's inventory.",
    "param-names": [
      "Inventory",
      "Contents"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Inventory",
      "org.bukkit.inventory.ItemStack[]"
    ],
    "method": "setContents",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Inventory#setContents(org.bukkit.inventory.ItemStack[])",
    "class": "net.citizensnpcs.api.trait.trait.Inventory"
  },
  {
    "descr": "Sets the path vectors that will be used at pathfinding time. For example, setting a list of vectors to path\\nthrough in order to reach this pathpoint.",
    "param-names": [
      "PathPoint",
      "Vectors"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.PathPoint",
      "java.util.List"
    ],
    "method": "setPathVectors",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.PathPoint#setPathVectors(java.util.List<org.bukkit.util.Vector>)",
    "class": "net.citizensnpcs.api.astar.pathfinder.PathPoint"
  },
  {
    "descr": "Called when an NPC is selected by a player.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSelectEvent"
  },
  {
    "param-names": ["Root"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.util.DataKey"],
    "method": "loadItemStack",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.ItemStorage#loadItemStack(net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.util.ItemStorage",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the LivingEntity associated with this Talkable",
    "param-names": ["Talkable"],
    "param-types": ["net.citizensnpcs.api.ai.speech.Talkable"],
    "method": "getEntity",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.Talkable#getEntity()",
    "class": "net.citizensnpcs.api.ai.speech.Talkable",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Removes a trait from this NPC.",
    "param-names": [
      "NPC",
      "Trait"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "java.lang.Class"
    ],
    "method": "removeTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#removeTrait(java.lang.Class<? extends net.citizensnpcs.api.trait.Trait>)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Sets the number of stationary ticks before navigation is cancelled with a CancelReason of STUCK.",
    "param-names": [
      "NavigatorParameters",
      "Ticks"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "int"
    ],
    "method": "stationaryTicks",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#stationaryTicks(int)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "param-names": [
      "Key",
      "Messages"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "java.lang.Object[]"
    ],
    "method": "severeTr",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#severeTr(java.lang.String,java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["MenuContext"],
    "param-types": ["net.citizensnpcs.api.gui.MenuContext"],
    "method": "data",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuContext#data()",
    "class": "net.citizensnpcs.api.gui.MenuContext",
    "return": "java.util.Map"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The character set used by NBT (UTF-8).",
    "static": true,
    "field": "CHARSET",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#CHARSET",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "java.nio.charset.Charset"
  },
  {
    "descr": "Gets a trait from the given class. If the NPC does not currently have the trait, null will be\\nreturned.",
    "param-names": [
      "NPC",
      "Trait"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "java.lang.Class"
    ],
    "method": "getTraitNullable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#<T>getTraitNullable(java.lang.Class<T>)",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "param-names": [
      "Paginator",
      "Console"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.Paginator",
      "boolean"
    ],
    "method": "console",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Paginator#console(boolean)",
    "class": "net.citizensnpcs.api.util.Paginator",
    "return": "net.citizensnpcs.api.util.Paginator"
  },
  {
    "param-names": [
      "Key",
      "Messages"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "java.lang.Object[]"
    ],
    "method": "tr",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#tr(java.lang.String,java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Messaging",
    "return": "java.lang.String"
  },
  {
    "descr": "Adds the provided Goals to the execution list. These goals will be executed along with any previously\\nrunning goals.",
    "param-names": [
      "GoalSelector",
      "Goals"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.GoalSelector",
      "net.citizensnpcs.api.ai.Goal[]"
    ],
    "method": "selectAdditional",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalSelector#selectAdditional(net.citizensnpcs.api.ai.Goal...)",
    "class": "net.citizensnpcs.api.ai.GoalSelector"
  },
  {
    "descr": "Cancels any running navigation towards a target.",
    "param-names": ["Navigator"],
    "param-types": ["net.citizensnpcs.api.ai.Navigator"],
    "method": "cancelNavigation",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#cancelNavigation()",
    "class": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "descr": "Creates sequence that will stop executing if the current Behavior returns BehaviorStatus#FAILURE.",
    "param-names": ["Behaviors"],
    "static": true,
    "param-types": ["java.util.Collection"],
    "method": "createSequence",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Sequence#createSequence(java.util.Collection<net.citizensnpcs.api.ai.tree.Behavior>)",
    "class": "net.citizensnpcs.api.ai.tree.Sequence",
    "return": "net.citizensnpcs.api.ai.tree.Sequence"
  },
  {
    "param-names": [
      "DataKey",
      "Key",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String",
      "double"
    ],
    "method": "getDouble",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getDouble(java.lang.String,double)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "double"
  },
  {
    "param-names": ["Parsed"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "stripColors",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Colorizer#stripColors(java.lang.String)",
    "class": "net.citizensnpcs.api.util.Colorizer",
    "return": "java.lang.String"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensReloadEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensReloadEvent",
    "return": "boolean"
  },
  {
    "descr": "Forcibly stops pathfinding. Note that this method does not necessarily set the cancel reason.",
    "param-names": ["PathStrategy"],
    "param-types": ["net.citizensnpcs.api.ai.PathStrategy"],
    "method": "stop",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.PathStrategy#stop()",
    "class": "net.citizensnpcs.api.ai.PathStrategy"
  },
  {
    "descr": "Indicates that the Behavior should be reset and removed by any parent Composite behavior nodes.",
    "static": true,
    "field": "RESET_AND_REMOVE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.BehaviorStatus#RESET_AND_REMOVE",
    "class": "net.citizensnpcs.api.ai.tree.BehaviorStatus",
    "return": "net.citizensnpcs.api.ai.tree.BehaviorStatus"
  },
  {
    "param-names": [
      "NPCDataStore",
      "Registry"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCDataStore",
      "net.citizensnpcs.api.npc.NPCRegistry"
    ],
    "method": "createUniqueNPCId",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCDataStore#createUniqueNPCId(net.citizensnpcs.api.npc.NPCRegistry)",
    "class": "net.citizensnpcs.api.npc.NPCDataStore",
    "return": "int"
  },
  {
    "method": "getEvent",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#getEvent()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent",
    "return": "org.bukkit.event.entity.EntityDamageEvent"
  },
  {
    "descr": "The Item ID. String.",
    "static": true,
    "field": "ITEM_ID",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#ITEM_ID",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.PersistenceLoader#PersistenceLoader()",
    "class": "net.citizensnpcs.api.persistence.PersistenceLoader"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationStuckEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationStuckEvent",
    "return": "boolean"
  },
  {
    "descr": "Adds the given BlockExaminer.",
    "param-names": [
      "NavigatorParameters",
      "Examiner"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "net.citizensnpcs.api.astar.pathfinder.BlockExaminer"
    ],
    "method": "examiner",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#examiner(net.citizensnpcs.api.astar.pathfinder.BlockExaminer)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "speedModifier",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#speedModifier()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "float"
  },
  {
    "descr": "Creates the tag.",
    "param-names": [
      "Name",
      "Value"
    ],
    "param-types": [
      "java.lang.String",
      "int[]"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.IntArrayTag#IntArrayTag(java.lang.String,int[])",
    "class": "net.citizensnpcs.api.jnbt.IntArrayTag"
  },
  {
    "method": "getResultItemNonNull",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getResultItemNonNull()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "param-names": ["AStarNode"],
    "param-types": ["net.citizensnpcs.api.astar.AStarNode"],
    "method": "buildPlan",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarNode#buildPlan()",
    "class": "net.citizensnpcs.api.astar.AStarNode",
    "return": "net.citizensnpcs.api.astar.Plan"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCVehicleDamageEvent"
  },
  {
    "param-names": [
      "Node",
      "Edge"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPAGraphNode",
      "net.citizensnpcs.api.hpastar.HPAGraphEdge"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraphAStarNode#HPAGraphAStarNode(net.citizensnpcs.api.hpastar.HPAGraphNode,net.citizensnpcs.api.hpastar.HPAGraphEdge)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraphAStarNode"
  },
  {
    "param-names": ["Damage"],
    "param-types": ["double"],
    "method": "setDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#setDamage(double)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLeftClickEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLeftClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets whether the path should be debugged.",
    "param-names": [
      "NavigatorParameters",
      "Debug"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "boolean"
    ],
    "method": "debug",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#debug(boolean)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "static": true,
    "field": "LOCATION",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.TargetType#LOCATION",
    "class": "net.citizensnpcs.api.ai.TargetType",
    "return": "net.citizensnpcs.api.ai.TargetType"
  },
  {
    "descr": "The click types to allow by default. Empty = all allowed",
    "param-names": ["Menu"],
    "param-types": ["net.citizensnpcs.api.gui.Menu"],
    "method": "filter",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.Menu#filter()",
    "class": "net.citizensnpcs.api.gui.Menu",
    "return": "org.bukkit.event.inventory.ClickType[]"
  },
  {
    "static": true,
    "field": "PLAYER_SKIN_USE_LATEST",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#PLAYER_SKIN_USE_LATEST",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "param-names": [
      "ScriptCompiler.CompileTaskBuilder",
      "Cache"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder",
      "boolean"
    ],
    "method": "cache",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder#cache(boolean)",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder",
    "return": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.EntityTargetNPCEvent"
  },
  {
    "descr": "Returns the registered name of a VocalChord class",
    "param-names": [
      "SpeechFactory",
      "Clazz"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechFactory",
      "java.lang.Class"
    ],
    "method": "getVocalChordName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechFactory#getVocalChordName(java.lang.Class<? extends net.citizensnpcs.api.ai.speech.VocalChord>)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechFactory",
    "return": "java.lang.String"
  },
  {
    "param-names": ["GoalController"],
    "param-types": ["net.citizensnpcs.api.ai.GoalController"],
    "method": "isExecutingGoal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController#isExecutingGoal()",
    "class": "net.citizensnpcs.api.ai.GoalController",
    "return": "boolean"
  },
  {
    "descr": "Whether the NPC is collidable with Players or not. Boolean.",
    "static": true,
    "field": "COLLIDABLE_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#COLLIDABLE_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "Owner",
      "Sender"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Owner",
      "org.bukkit.command.CommandSender"
    ],
    "method": "setOwner",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Owner#setOwner(org.bukkit.command.CommandSender)",
    "class": "net.citizensnpcs.api.trait.trait.Owner"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets whether this NPC is protected from damage, movement and other events that players and mobs use to change the\\nentity state of the NPC.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "isProtected",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#isProtected()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "boolean"
  },
  {
    "descr": "Retrieves the NPCRegistry previously created via #createNamedNPCRegistry(String, NPCDataStore)\\nwith the given name, or null if not found.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getNamedNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#getNamedNPCRegistry(java.lang.String)",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "descr": "Stops executing any currently running Goals and allows other goals to be selected for execution.",
    "param-names": ["GoalSelector"],
    "param-types": ["net.citizensnpcs.api.ai.GoalSelector"],
    "method": "finish",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalSelector#finish()",
    "class": "net.citizensnpcs.api.ai.GoalSelector"
  },
  {
    "param-names": [
      "Paginator",
      "Line"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.Paginator",
      "java.lang.String"
    ],
    "method": "addLine",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Paginator#addLine(java.lang.String)",
    "class": "net.citizensnpcs.api.util.Paginator"
  },
  {
    "param-names": ["BlockBreaker.BlockBreakerConfiguration"],
    "param-types": ["net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration"],
    "method": "radius",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration#radius()",
    "class": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
    "return": "double"
  },
  {
    "descr": "Sets whether this NPC is flyable or not. Note that this is intended for normally ground-based\\nentities only - it will generally have no effect on mob types that were originally flyable.",
    "param-names": [
      "NPC",
      "Flyable"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "boolean"
    ],
    "method": "setFlyable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#setFlyable(boolean)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": [
      "Trait",
      "Npc"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.Trait",
      "net.citizensnpcs.api.npc.NPC"
    ],
    "method": "linkToNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#linkToNPC(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "param-names": ["In"],
    "static": true,
    "param-types": ["org.bukkit.Material"],
    "method": "isDoor",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#isDoor(org.bukkit.Material)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "boolean"
  },
  {
    "param-names": [
      "Path",
      "Npc"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.Path",
      "net.citizensnpcs.api.npc.NPC"
    ],
    "method": "run",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.Path#run(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.astar.pathfinder.Path"
  },
  {
    "param-names": [
      "Npc",
      "Xrange",
      "Yrange"
    ],
    "static": true,
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "int",
      "int"
    ],
    "method": "createWithNPCAndRange",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.WanderGoal#createWithNPCAndRange(net.citizensnpcs.api.npc.NPC,int,int)",
    "class": "net.citizensnpcs.api.ai.goals.WanderGoal",
    "return": "net.citizensnpcs.api.ai.goals.WanderGoal"
  },
  {
    "descr": "Run the given source code.",
    "param-names": [
      "ScriptCompiler",
      "Code",
      "Extension",
      "Vars"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.ScriptCompiler",
      "java.lang.String",
      "java.lang.String",
      "java.util.Map"
    ],
    "method": "run",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler#run(java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler"
  },
  {
    "param-names": [
      "Base",
      "Xrange",
      "Yrange"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.Location",
      "int",
      "int"
    ],
    "method": "findRandomValidLocation",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#findRandomValidLocation(org.bukkit.Location,int,int)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Whether the NPC drops its inventory after death. Boolean.",
    "static": true,
    "field": "DROPS_ITEMS",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#DROPS_ITEMS",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByEntityEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "BlockSource",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.BlockSource",
      "int",
      "int",
      "int"
    ],
    "method": "getMaterialAt",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockSource#getMaterialAt(int,int,int)",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockSource",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRightClickEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRightClickEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["java.lang.Object"],
    "method": "equals",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#equals(java.lang.Object)",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "boolean"
  },
  {
    "descr": "Returns whether this NPC is flyable or not.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "isFlyable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#isFlyable()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "boolean"
  },
  {
    "param-names": ["Path"],
    "param-types": ["net.citizensnpcs.api.astar.pathfinder.Path"],
    "method": "getPath",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.Path#getPath()",
    "class": "net.citizensnpcs.api.astar.pathfinder.Path",
    "return": "java.lang.Iterable"
  },
  {
    "descr": "The position of the slot within the inventory.",
    "param-names": ["MenuTransition"],
    "param-types": ["net.citizensnpcs.api.gui.MenuTransition"],
    "method": "pos",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuTransition#pos()",
    "class": "net.citizensnpcs.api.gui.MenuTransition",
    "return": "int[]"
  },
  {
    "descr": "Whether the NPC is currently set to use Minecraft AI. Defaults to false.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "useMinecraftAI",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#useMinecraftAI()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "boolean"
  },
  {
    "param-names": [
      "Wrapping",
      "Condition"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.tree.Behavior",
      "net.citizensnpcs.api.ai.tree.Condition"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Loop#Loop(net.citizensnpcs.api.ai.tree.Behavior,net.citizensnpcs.api.ai.tree.Condition)",
    "class": "net.citizensnpcs.api.ai.tree.Loop"
  },
  {
    "param-names": ["Npc"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder#Builder(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder"
  },
  {
    "descr": "Removes any metadata at the given metadata key.",
    "param-names": [
      "MetadataStore",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "java.lang.String"
    ],
    "method": "remove",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#remove(java.lang.String)",
    "class": "net.citizensnpcs.api.npc.MetadataStore"
  },
  {
    "descr": "The color to glow using Minecraft's scoreboard glowing feature. Should be a ChatColor#name(). DEPRECATED:\\nuse ScoreboardTrait instead",
    "static": true,
    "field": "GLOWING_COLOR_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#GLOWING_COLOR_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "Adds all default traits to a given NPC.",
    "param-names": [
      "TraitFactory",
      "Npc"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.TraitFactory",
      "net.citizensnpcs.api.npc.NPC"
    ],
    "method": "addDefaultTraits",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitFactory#addDefaultTraits(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.trait.TraitFactory"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.SimpleGoalController#SimpleGoalController()",
    "class": "net.citizensnpcs.api.ai.SimpleGoalController"
  },
  {
    "static": true,
    "field": "INSTANCE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.TeleportStuckAction#INSTANCE",
    "class": "net.citizensnpcs.api.ai.TeleportStuckAction",
    "return": "net.citizensnpcs.api.ai.TeleportStuckAction"
  },
  {
    "descr": "Creates a new anonymous NPCRegistry with its own set of NPCs. This is not stored by the\\nCitizens plugin.",
    "param-names": ["Store"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.npc.NPCDataStore"],
    "method": "createAnonymousNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#createAnonymousNPCRegistry(net.citizensnpcs.api.npc.NPCDataStore)",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "method": "hashCode",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#hashCode()",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "int"
  },
  {
    "param-names": [
      "HPAGraphNode",
      "Level"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPAGraphNode",
      "int"
    ],
    "method": "getEdges",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraphNode#getEdges(int)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraphNode",
    "return": "java.util.List"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenGateEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenGateEvent"
  },
  {
    "param-names": [
      "HPACluster",
      "Node"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPACluster",
      "net.citizensnpcs.api.hpastar.HPAGraphNode"
    ],
    "method": "insert",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPACluster#insert(net.citizensnpcs.api.hpastar.HPAGraphNode)",
    "class": "net.citizensnpcs.api.hpastar.HPACluster"
  },
  {
    "param-names": [
      "Arg0",
      "Arg1"
    ],
    "static": true,
    "param-types": [
      "java.lang.Class",
      "java.lang.String"
    ],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#<T>valueOf(java.lang.Class<T>,java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "java.lang.Enum"
  },
  {
    "descr": "Whether to prevent NPC being targeted by hostile mobs. Boolean.",
    "static": true,
    "field": "TARGETABLE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#TARGETABLE",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "static": true,
    "method": "values",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#values()",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "net.citizensnpcs.api.event.SpawnReason[]"
  },
  {
    "param-names": ["InventoryMenuPattern"],
    "param-types": ["net.citizensnpcs.api.gui.InventoryMenuPattern"],
    "method": "getPattern",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuPattern#getPattern()",
    "class": "net.citizensnpcs.api.gui.InventoryMenuPattern",
    "return": "java.lang.String"
  },
  {
    "param-names": ["InventoryMenu"],
    "param-types": ["net.citizensnpcs.api.gui.InventoryMenu"],
    "method": "transitionBack",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#transitionBack()",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCommandDispatchEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCommandDispatchEvent"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent"
  },
  {
    "descr": "Display the menu to the given player. Multiple players can be shown the same menu, but transitions will affect\\nall players and the inventory is shared.",
    "param-names": [
      "InventoryMenu",
      "Player"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu",
      "org.bukkit.entity.Player"
    ],
    "method": "present",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#present(org.bukkit.entity.Player)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MemoryNPCDataStore#MemoryNPCDataStore()",
    "class": "net.citizensnpcs.api.npc.MemoryNPCDataStore"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent"
  },
  {
    "descr": "Gets the current implementation's default NPCRegistry.",
    "static": true,
    "method": "getNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#getNPCRegistry()",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "descr": "Called when an NPC teleports.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTeleportEvent"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCloneEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCloneEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": [
      "SwimmingExaminer",
      "Can Swim In Lava"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer",
      "boolean"
    ],
    "method": "setCanSwimInLava",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer#setCanSwimInLava(boolean)",
    "class": "net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDespawnEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDespawnEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["java.lang.Enum"],
    "method": "compareTo",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#compareTo(E)",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationStuckEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationStuckEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "DataKey",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String"
    ],
    "method": "getLong",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getLong(java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "long"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensPreReloadEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensPreReloadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The Item amount. Integer.",
    "static": true,
    "field": "ITEM_AMOUNT",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#ITEM_AMOUNT",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "baseSpeed",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#baseSpeed()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "float"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Clears all data about the given NPC from storage. Called when the NPC is removed.",
    "param-names": [
      "NPCDataStore",
      "Npc"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCDataStore",
      "net.citizensnpcs.api.npc.NPC"
    ],
    "method": "clearData",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCDataStore#clearData(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.npc.NPCDataStore"
  },
  {
    "static": true,
    "method": "values",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#values()",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata[]"
  },
  {
    "param-names": [
      "Graph",
      "Level",
      "Cluster Size",
      "Cluster X",
      "Cluster Y",
      "Cluster Z"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPAGraph",
      "int",
      "int",
      "int",
      "int",
      "int"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPACluster#HPACluster(net.citizensnpcs.api.hpastar.HPAGraph,int,int,int,int,int)",
    "class": "net.citizensnpcs.api.hpastar.HPACluster"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSelectEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSelectEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the type of mob that an NPC is.",
    "param-names": ["MobType"],
    "param-types": ["net.citizensnpcs.api.trait.trait.MobType"],
    "method": "getType",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.MobType#getType()",
    "class": "net.citizensnpcs.api.trait.trait.MobType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensEnableEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensEnableEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BOOTS",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot#BOOTS",
    "class": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot",
    "return": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot"
  },
  {
    "static": true,
    "field": "CHUNK_LOAD",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#CHUNK_LOAD",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "net.citizensnpcs.api.event.SpawnReason"
  },
  {
    "descr": "Close a given AStarNode, moving it from the open set to the closed set.",
    "param-names": [
      "AStarStorage",
      "Node"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarStorage",
      "net.citizensnpcs.api.astar.AStarNode"
    ],
    "method": "close",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarStorage#close(net.citizensnpcs.api.astar.AStarNode)",
    "class": "net.citizensnpcs.api.astar.AStarStorage"
  },
  {
    "descr": "Registers a trait using the given information.",
    "param-names": [
      "TraitFactory",
      "Info"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.TraitFactory",
      "net.citizensnpcs.api.trait.TraitInfo"
    ],
    "method": "registerTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitFactory#registerTrait(net.citizensnpcs.api.trait.TraitInfo)",
    "class": "net.citizensnpcs.api.trait.TraitFactory"
  },
  {
    "static": true,
    "field": "PLUGIN",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#PLUGIN",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "net.citizensnpcs.api.event.SpawnReason"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCommandDispatchEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCommandDispatchEvent",
    "return": "boolean"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "DataKey",
      "Path"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String"
    ],
    "method": "getFromRoot",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getFromRoot(java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "param-names": ["MenuContext"],
    "param-types": ["net.citizensnpcs.api.gui.MenuContext"],
    "method": "getMenu",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuContext#getMenu()",
    "class": "net.citizensnpcs.api.gui.MenuContext",
    "return": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "descr": "Creates a new NBTInputStream, which will source its data from the specified input stream.",
    "param-names": ["Is"],
    "param-types": ["java.io.InputStream"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTInputStream#NBTInputStream(java.io.InputStream)",
    "class": "net.citizensnpcs.api.jnbt.NBTInputStream"
  },
  {
    "descr": "Notifies the data store to save all stored data to disk immediately. Must not be asynchronous.",
    "param-names": ["NPCDataStore"],
    "param-types": ["net.citizensnpcs.api.npc.NPCDataStore"],
    "method": "saveToDiskImmediate",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCDataStore#saveToDiskImmediate()",
    "class": "net.citizensnpcs.api.npc.NPCDataStore"
  },
  {
    "descr": "Whether to sneak. Boolean.",
    "static": true,
    "field": "SNEAKING_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#SNEAKING_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["org.bukkit.event.Event.Result"],
    "method": "setResult",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#setResult(org.bukkit.event.Event.Result)",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent"
  },
  {
    "method": "getCreator",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#getCreator()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "method": "getCurrentItemNonNull",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getCurrentItemNonNull()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "param-names": [
      "ScriptCompiler",
      "File"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.ScriptCompiler",
      "java.io.File"
    ],
    "method": "canCompile",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler#canCompile(java.io.File)",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler",
    "return": "boolean"
  },
  {
    "param-names": [
      "DataKey",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String"
    ],
    "method": "getBoolean",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getBoolean(java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "boolean"
  },
  {
    "param-names": ["B"],
    "static": true,
    "param-types": ["boolean"],
    "method": "fromBoolean",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState#fromBoolean(boolean)",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState",
    "return": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState"
  },
  {
    "descr": "Gets the name of this trait.",
    "param-names": ["Trait"],
    "param-types": ["net.citizensnpcs.api.trait.Trait"],
    "method": "getName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#getName()",
    "class": "net.citizensnpcs.api.trait.Trait",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "HPAGraph",
      "Depth",
      "Other"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPAGraph",
      "int",
      "java.util.List"
    ],
    "method": "addClustersAtDepth",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraph#addClustersAtDepth(int,java.util.List<net.citizensnpcs.api.hpastar.HPACluster>)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraph"
  },
  {
    "static": true,
    "field": "DEFAULT_VOCAL_CHORD",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Speech#DEFAULT_VOCAL_CHORD",
    "class": "net.citizensnpcs.api.trait.trait.Speech",
    "return": "java.lang.String"
  },
  {
    "descr": "Creates a new instance of a VocalChord",
    "param-names": [
      "SpeechFactory",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechFactory",
      "java.lang.String"
    ],
    "method": "getVocalChord",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechFactory#getVocalChord(java.lang.String)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechFactory",
    "return": "net.citizensnpcs.api.ai.speech.VocalChord"
  },
  {
    "descr": "The Minecart item name.",
    "static": true,
    "field": "MINECART_ITEM_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#MINECART_ITEM_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensDisableEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDisableEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the name of the vocal chord used in the registration process.",
    "param-names": ["VocalChord"],
    "param-types": ["net.citizensnpcs.api.ai.speech.VocalChord"],
    "method": "getName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.VocalChord#getName()",
    "class": "net.citizensnpcs.api.ai.speech.VocalChord",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns a DataKey starting from the given root.",
    "param-names": [
      "Storage",
      "Root"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.Storage",
      "java.lang.String"
    ],
    "method": "getKey",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Storage#getKey(java.lang.String)",
    "class": "net.citizensnpcs.api.util.Storage",
    "return": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "static": true,
    "field": "CREATE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#CREATE",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "net.citizensnpcs.api.event.SpawnReason"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSelectEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSelectEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The Item ID. String.",
    "static": true,
    "field": "ITEM_ID_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#ITEM_ID_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns the estimated heuristic cost of traversing from the supplied AStarNode to the goal.",
    "param-names": [
      "AStarGoal",
      "From"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarGoal",
      "net.citizensnpcs.api.astar.AStarNode"
    ],
    "method": "h",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarGoal#h(T)",
    "class": "net.citizensnpcs.api.astar.AStarGoal",
    "return": "float"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByEntityEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Gets the type name of a tag.",
    "param-names": ["Clazz"],
    "static": true,
    "param-types": ["java.lang.Class"],
    "method": "getTypeName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTUtils#getTypeName(java.lang.Class<? extends net.citizensnpcs.api.jnbt.Tag>)",
    "class": "net.citizensnpcs.api.jnbt.NBTUtils",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "PENDING_RESPAWN",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#PENDING_RESPAWN",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "net.citizensnpcs.api.event.DespawnReason"
  },
  {
    "descr": "Create an inventory menu instance starting at the given page.",
    "param-names": ["Clazz"],
    "static": true,
    "param-types": ["java.lang.Class"],
    "method": "create",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#create(java.lang.Class<? extends net.citizensnpcs.api.gui.InventoryMenuPage>)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu",
    "return": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByEntityEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The display name of the inventory item.",
    "param-names": ["MenuSlot"],
    "param-types": ["net.citizensnpcs.api.gui.MenuSlot"],
    "method": "title",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuSlot#title()",
    "class": "net.citizensnpcs.api.gui.MenuSlot",
    "return": "java.lang.String"
  },
  {
    "descr": "Runs the behavior for one 'tick', optionally changing the state that it is in.",
    "param-names": ["Behavior"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Behavior"],
    "method": "run",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Behavior#run()",
    "class": "net.citizensnpcs.api.ai.tree.Behavior",
    "return": "net.citizensnpcs.api.ai.tree.BehaviorStatus"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Attempts to spawn this NPC.",
    "param-names": [
      "NPC",
      "Location"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "org.bukkit.Location"
    ],
    "method": "spawn",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#spawn(org.bukkit.Location)",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "boolean"
  },
  {
    "method": "getTraitClass",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent#getTraitClass()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent",
    "return": "java.lang.Class"
  },
  {
    "param-names": [
      "Npc",
      "Target"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "org.bukkit.Location"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.MoveToGoal#MoveToGoal(net.citizensnpcs.api.npc.NPC,org.bukkit.Location)",
    "class": "net.citizensnpcs.api.ai.goals.MoveToGoal"
  },
  {
    "descr": "Called just before a command list is dispatched.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCommandDispatchEvent"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#valueOf(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "net.citizensnpcs.api.event.SpawnReason"
  },
  {
    "descr": "Stores data at the given key. Data will persist and must be a primitive type or String.",
    "param-names": [
      "MetadataStore",
      "Key",
      "Data"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "net.citizensnpcs.api.npc.NPC.Metadata",
      "java.lang.Object"
    ],
    "method": "setPersistent",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#setPersistent(net.citizensnpcs.api.npc.NPC.Metadata,java.lang.Object)",
    "class": "net.citizensnpcs.api.npc.MetadataStore"
  },
  {
    "param-names": [
      "Location",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.Location",
      "float"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.AsyncChunkSnapshotBlockSource#AsyncChunkSnapshotBlockSource(org.bukkit.Location,float)",
    "class": "net.citizensnpcs.api.astar.pathfinder.AsyncChunkSnapshotBlockSource"
  },
  {
    "param-names": [
      "Parent",
      "Location",
      "Info"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.VectorNode",
      "org.bukkit.util.Vector",
      "net.citizensnpcs.api.astar.pathfinder.VectorNode.PathInfo"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.VectorNode#VectorNode(net.citizensnpcs.api.astar.pathfinder.VectorNode,org.bukkit.util.Vector,net.citizensnpcs.api.astar.pathfinder.VectorNode.PathInfo)",
    "class": "net.citizensnpcs.api.astar.pathfinder.VectorNode"
  },
  {
    "param-names": ["GoalController.GoalEntry"],
    "param-types": ["net.citizensnpcs.api.ai.GoalController.GoalEntry"],
    "method": "getGoal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController.GoalEntry#getGoal()",
    "class": "net.citizensnpcs.api.ai.GoalController.GoalEntry",
    "return": "net.citizensnpcs.api.ai.Goal"
  },
  {
    "descr": "Creates an AStarMachine using SimpleAStarStorage as the storage backend.",
    "static": true,
    "method": "createWithDefaultStorage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarMachine#<N,P>createWithDefaultStorage()",
    "class": "net.citizensnpcs.api.astar.AStarMachine",
    "return": "net.citizensnpcs.api.astar.AStarMachine"
  },
  {
    "param-names": ["CitizensPlugin"],
    "param-types": ["net.citizensnpcs.api.CitizensPlugin"],
    "method": "getOwningClassLoader",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#getOwningClassLoader()",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "java.lang.ClassLoader"
  },
  {
    "descr": "Returns whether the supplied AStarNode represents the goal state for this AStarGoal. This\\nwill halt execution of the calling AStarMachine.",
    "param-names": [
      "AStarGoal",
      "Node"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarGoal",
      "net.citizensnpcs.api.astar.AStarNode"
    ],
    "method": "isFinished",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarGoal#isFinished(T)",
    "class": "net.citizensnpcs.api.astar.AStarGoal",
    "return": "boolean"
  },
  {
    "descr": "Resets the goal and any resources or state it is holding.",
    "param-names": ["Goal"],
    "param-types": ["net.citizensnpcs.api.ai.Goal"],
    "method": "reset",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Goal#reset()",
    "class": "net.citizensnpcs.api.ai.Goal"
  },
  {
    "static": true,
    "method": "values",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#values()",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "net.citizensnpcs.api.event.DespawnReason[]"
  },
  {
    "method": "ordinal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#ordinal()",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "int"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCEnderTeleportEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCEnderTeleportEvent",
    "return": "boolean"
  },
  {
    "descr": "Whether to keep chunk loaded. Boolean.",
    "static": true,
    "field": "KEEP_CHUNK_LOADED_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#KEEP_CHUNK_LOADED_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "Decorator.Builder",
      "Callback"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.tree.Decorator.Builder",
      "java.lang.Runnable"
    ],
    "method": "withPreRunCallback",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Decorator.Builder#withPreRunCallback(java.lang.Runnable)",
    "class": "net.citizensnpcs.api.ai.tree.Decorator.Builder",
    "return": "net.citizensnpcs.api.ai.tree.Decorator.Builder"
  },
  {
    "descr": "Returns whether the metadata exists.",
    "param-names": [
      "MetadataStore",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "java.lang.String"
    ],
    "method": "has",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#has(java.lang.String)",
    "class": "net.citizensnpcs.api.npc.MetadataStore",
    "return": "boolean"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent"
  },
  {
    "param-names": ["Condition"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Condition"],
    "method": "get",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Condition#get()",
    "class": "net.citizensnpcs.api.ai.tree.Condition",
    "return": "boolean"
  },
  {
    "descr": "The position of the slot within the inventory.",
    "param-names": ["MenuSlot"],
    "param-types": ["net.citizensnpcs.api.gui.MenuSlot"],
    "method": "slot",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuSlot#slot()",
    "class": "net.citizensnpcs.api.gui.MenuSlot",
    "return": "int[]"
  },
  {
    "descr": "Close a given AStarNode, moving or adding it from the frontier to the open set.",
    "param-names": [
      "AStarStorage",
      "Node"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarStorage",
      "net.citizensnpcs.api.astar.AStarNode"
    ],
    "method": "open",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarStorage#open(net.citizensnpcs.api.astar.AStarNode)",
    "class": "net.citizensnpcs.api.astar.AStarStorage"
  },
  {
    "descr": "Returns the configured default attack strategy, which tries to perform the most Minecraft-like attack on\\nthe target.",
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "defaultAttackStrategy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#defaultAttackStrategy()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.AttackStrategy"
  },
  {
    "static": true,
    "field": "PASSABLE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState#PASSABLE",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState",
    "return": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState"
  },
  {
    "static": true,
    "field": "TIMED_RESPAWN",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#TIMED_RESPAWN",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "net.citizensnpcs.api.event.SpawnReason"
  },
  {
    "param-names": ["To Wrap"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.ai.tree.Behavior"],
    "method": "wrapping",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Decorator#wrapping(net.citizensnpcs.api.ai.tree.Behavior)",
    "class": "net.citizensnpcs.api.ai.tree.Decorator",
    "return": "net.citizensnpcs.api.ai.tree.Decorator.Builder"
  },
  {
    "param-names": ["Root"],
    "param-types": ["java.lang.String"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.NBTStorage.NBTKey#NBTKey(java.lang.String)",
    "class": "net.citizensnpcs.api.util.NBTStorage.NBTKey"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "DataKey",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String"
    ],
    "method": "keyExists",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#keyExists(java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "boolean"
  },
  {
    "param-names": ["Possible"],
    "static": true,
    "param-types": ["java.lang.Object"],
    "method": "tryTranslate",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#tryTranslate(java.lang.Object)",
    "class": "net.citizensnpcs.api.util.Messaging",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenGateEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenGateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCPushEvent"
  },
  {
    "method": "getDeclaringClass",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#getDeclaringClass()",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "java.lang.Class"
  },
  {
    "param-names": [
      "Menu",
      "Slots",
      "Inventory",
      "Data"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu",
      "net.citizensnpcs.api.gui.InventoryMenuSlot[]",
      "org.bukkit.inventory.Inventory",
      "java.util.Map"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuContext#MenuContext(net.citizensnpcs.api.gui.InventoryMenu,net.citizensnpcs.api.gui.InventoryMenuSlot[],org.bukkit.inventory.Inventory,java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "net.citizensnpcs.api.gui.MenuContext"
  },
  {
    "param-names": ["ReversableAStarNode"],
    "param-types": ["net.citizensnpcs.api.hpastar.ReversableAStarNode"],
    "method": "reconstructSolution",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.ReversableAStarNode#reconstructSolution()",
    "class": "net.citizensnpcs.api.hpastar.ReversableAStarNode",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the reason for spawning the NPC.",
    "method": "getReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSpawnEvent#getReason()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSpawnEvent",
    "return": "net.citizensnpcs.api.event.SpawnReason"
  },
  {
    "param-names": [
      "Msg",
      "Objects"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "java.lang.Object[]"
    ],
    "method": "format",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Translator#format(java.lang.String,java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Translator",
    "return": "java.lang.String"
  },
  {
    "descr": "The Minecraft sound played when the NPC dies. String - Minecraft sound name.",
    "static": true,
    "field": "DEATH_SOUND",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#DEATH_SOUND",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "When using aggressive NPC navigation, the NPC will wait until close enough to the target before attempting to use\\nthe #attackStrategy(). This parameter determines the range in blocks squared before the target will be\\nvalid to attack.",
    "param-names": [
      "NavigatorParameters",
      "Range"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "double"
    ],
    "method": "attackRange",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#attackRange(double)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "param-names": [
      "InventoryMenuPage",
      "Ctx"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenuPage",
      "net.citizensnpcs.api.gui.MenuContext"
    ],
    "method": "initialise",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuPage#initialise(net.citizensnpcs.api.gui.MenuContext)",
    "class": "net.citizensnpcs.api.gui.InventoryMenuPage"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "getCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent#getCancelReason()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent",
    "return": "java.lang.String"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCPushEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCPushEvent",
    "return": "boolean"
  },
  {
    "descr": "A helper method for registering events using the current implementation's Plugin.",
    "param-names": ["Listener"],
    "static": true,
    "param-types": ["org.bukkit.event.Listener"],
    "method": "registerEvents",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#registerEvents(org.bukkit.event.Listener)",
    "class": "net.citizensnpcs.api.CitizensAPI"
  },
  {
    "descr": "Gets the Bukkit entity associated with this NPC. This may be null if #isSpawned() is false.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "getEntity",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getEntity()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Called when the ScriptFactory has been compiled successfully. Note that this may be called in another\\nthread - make sure your handling code is threadsafe.",
    "param-names": [
      "CompileCallback",
      "Source Descriptor",
      "Compiled"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.CompileCallback",
      "java.lang.String",
      "net.citizensnpcs.api.scripting.ScriptFactory"
    ],
    "method": "onScriptCompiled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.CompileCallback#onScriptCompiled(java.lang.String,net.citizensnpcs.api.scripting.ScriptFactory)",
    "class": "net.citizensnpcs.api.scripting.CompileCallback"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCollisionEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCollisionEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Represents an event where a Talkable entity speaks to another Talkable entity.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCommandDispatchEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCommandDispatchEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Adds a path callback that will be executed if this path point is executed.",
    "param-names": [
      "PathPoint",
      "Callback"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.PathPoint",
      "net.citizensnpcs.api.astar.pathfinder.PathPoint.PathCallback"
    ],
    "method": "addCallback",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.PathPoint#addCallback(net.citizensnpcs.api.astar.pathfinder.PathPoint.PathCallback)",
    "class": "net.citizensnpcs.api.astar.pathfinder.PathPoint"
  },
  {
    "descr": "Whether the NPC's nameplate should be visible. Boolean.",
    "static": true,
    "field": "NAMEPLATE_VISIBLE_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#NAMEPLATE_VISIBLE_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSpawnEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSpawnEvent"
  },
  {
    "descr": "Cancels and resets the currently executing goal.",
    "param-names": ["GoalController"],
    "param-types": ["net.citizensnpcs.api.ai.GoalController"],
    "method": "cancelCurrentExecution",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController#cancelCurrentExecution()",
    "class": "net.citizensnpcs.api.ai.GoalController"
  },
  {
    "method": "hashCode",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#hashCode()",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "destinationTeleportMargin",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#destinationTeleportMargin()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "double"
  },
  {
    "param-names": [
      "InventoryMenu",
      "Event"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu",
      "org.bukkit.event.inventory.InventoryCloseEvent"
    ],
    "method": "onInventoryClose",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#onInventoryClose(org.bukkit.event.inventory.InventoryCloseEvent)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent"
  },
  {
    "param-names": [
      "HPAGraphNode",
      "Level",
      "To",
      "Type",
      "Weight"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPAGraphNode",
      "int",
      "net.citizensnpcs.api.hpastar.HPAGraphNode",
      "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType",
      "float"
    ],
    "method": "connect",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraphNode#connect(int,net.citizensnpcs.api.hpastar.HPAGraphNode,net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType,float)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraphNode"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Attempts to spawn this NPC.",
    "param-names": [
      "NPC",
      "Location",
      "Reason"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "org.bukkit.Location",
      "net.citizensnpcs.api.event.SpawnReason"
    ],
    "method": "spawn",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#spawn(org.bukkit.Location,net.citizensnpcs.api.event.SpawnReason)",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "boolean"
  },
  {
    "descr": "Gets the SpeechContext associated with the SpeechEvent.",
    "method": "getContext",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent#getContext()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent",
    "return": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "descr": "Indicates that the Behavior is still running and should be continued next tick.",
    "static": true,
    "field": "RUNNING",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.BehaviorStatus#RUNNING",
    "class": "net.citizensnpcs.api.ai.tree.BehaviorStatus",
    "return": "net.citizensnpcs.api.ai.tree.BehaviorStatus"
  },
  {
    "param-names": [
      "Location",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.Location",
      "float"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.ChunkSnapshotBlockSource#ChunkSnapshotBlockSource(org.bukkit.Location,float)",
    "class": "net.citizensnpcs.api.astar.pathfinder.ChunkSnapshotBlockSource"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCreateEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCreateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "Name",
      "Value"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "java.lang.Object"
    ],
    "method": "createTag",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTUtils#createTag(java.lang.String,java.lang.Object)",
    "class": "net.citizensnpcs.api.jnbt.NBTUtils",
    "return": "net.citizensnpcs.api.jnbt.Tag"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["java.lang.Object"],
    "method": "equals",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#equals(java.lang.Object)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "boolean"
  },
  {
    "descr": "Creates a new Talkable entity and returns it",
    "param-names": [
      "SpeechFactory",
      "Entity"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechFactory",
      "org.bukkit.entity.LivingEntity"
    ],
    "method": "newTalkableEntity",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechFactory#newTalkableEntity(org.bukkit.entity.LivingEntity)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechFactory",
    "return": "net.citizensnpcs.api.ai.speech.Talkable"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensReloadEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensReloadEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Plan"],
    "param-types": ["net.citizensnpcs.api.astar.Plan"],
    "method": "isComplete",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.Plan#isComplete()",
    "class": "net.citizensnpcs.api.astar.Plan",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "Composite",
      "Behavior"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.tree.Composite",
      "net.citizensnpcs.api.ai.tree.Behavior"
    ],
    "method": "addBehavior",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Composite#addBehavior(net.citizensnpcs.api.ai.tree.Behavior)",
    "class": "net.citizensnpcs.api.ai.tree.Composite"
  },
  {
    "static": true,
    "method": "getSkullMetaProvider",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#getSkullMetaProvider()",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "net.citizensnpcs.api.SkullMetaProvider"
  },
  {
    "descr": "Sets the distance (in blocks) at which the entity targeter will switch to simply following a straight line to the\\ntarget instead of pathfinding.",
    "param-names": [
      "NavigatorParameters",
      "Distance"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "float"
    ],
    "method": "straightLineTargetingDistance",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#straightLineTargetingDistance(float)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "param-names": [
      "Dest",
      "Range"
    ],
    "param-types": [
      "org.bukkit.Location",
      "float"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.VectorGoal#VectorGoal(org.bukkit.Location,float)",
    "class": "net.citizensnpcs.api.astar.pathfinder.VectorGoal"
  },
  {
    "descr": "Returns the distance margin or leeway that the Navigator will be able to stop from the target\\ndestination. The margin will be measured against the block distance.\\nFor example: if the distance margin were 2, then the Navigator could stop moving towards the target when\\nit is 2 blocks away from it.",
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "distanceMargin",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#distanceMargin()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "double"
  },
  {
    "descr": "Creates the tag.",
    "param-names": [
      "Name",
      "Value"
    ],
    "param-types": [
      "java.lang.String",
      "byte"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.ByteTag#ByteTag(java.lang.String,byte)",
    "class": "net.citizensnpcs.api.jnbt.ByteTag"
  },
  {
    "descr": "Faces a given Location if the NPC is spawned.",
    "param-names": [
      "NPC",
      "Location"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "org.bukkit.Location"
    ],
    "method": "faceLocation",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#faceLocation(org.bukkit.Location)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Exp"],
    "param-types": ["int"],
    "method": "setDroppedExp",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDeathEvent#setDroppedExp(int)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDeathEvent"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveEvent"
  },
  {
    "descr": "Whether to open doors while pathfinding. Boolean.",
    "static": true,
    "field": "PATHFINDER_OPEN_DOORS",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#PATHFINDER_OPEN_DOORS",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Sets the owner of an NPC.",
    "param-names": [
      "Owner",
      "Owner",
      "Uuid"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Owner",
      "java.lang.String",
      "java.util.UUID"
    ],
    "method": "setOwner",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Owner#setOwner(java.lang.String,java.util.UUID)",
    "class": "net.citizensnpcs.api.trait.trait.Owner"
  },
  {
    "param-names": [
      "HPACluster",
      "Nodes"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPACluster",
      "net.citizensnpcs.api.hpastar.HPAGraphNode[]"
    ],
    "method": "remove",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPACluster#remove(net.citizensnpcs.api.hpastar.HPAGraphNode...)",
    "class": "net.citizensnpcs.api.hpastar.HPACluster"
  },
  {
    "descr": "Gets if the given CommandSender is the owner of an NPC.",
    "param-names": [
      "Owner",
      "Sender"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Owner",
      "org.bukkit.command.CommandSender"
    ],
    "method": "isOwnedBy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Owner#isOwnedBy(org.bukkit.command.CommandSender)",
    "class": "net.citizensnpcs.api.trait.trait.Owner",
    "return": "boolean"
  },
  {
    "param-names": [
      "HPACluster",
      "Other"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPACluster",
      "net.citizensnpcs.api.hpastar.HPACluster"
    ],
    "method": "contains",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPACluster#contains(net.citizensnpcs.api.hpastar.HPACluster)",
    "class": "net.citizensnpcs.api.hpastar.HPACluster",
    "return": "boolean"
  },
  {
    "descr": "The number of seconds the combustee should be alight for.\\n\\nThis value will only ever increase the combustion time, not decrease existing combustion times.",
    "param-names": ["Duration"],
    "param-types": ["int"],
    "method": "setDuration",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByBlockEvent#setDuration(int)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent"
  },
  {
    "descr": "Checks if this NPC has the given trait.",
    "param-names": [
      "NPC",
      "Trait"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "java.lang.Class"
    ],
    "method": "hasTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#hasTrait(java.lang.Class<? extends net.citizensnpcs.api.trait.Trait>)",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "boolean"
  },
  {
    "param-names": ["Navigator"],
    "param-types": ["net.citizensnpcs.api.ai.Navigator"],
    "method": "getPathStrategy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#getPathStrategy()",
    "class": "net.citizensnpcs.api.ai.Navigator",
    "return": "net.citizensnpcs.api.ai.PathStrategy"
  },
  {
    "param-names": [
      "BlockBreaker.BlockBreakerConfiguration",
      "Stack"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "item",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration#item(org.bukkit.inventory.ItemStack)",
    "class": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
    "return": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration"
  },
  {
    "descr": "Creates the tag.",
    "param-names": [
      "Name",
      "Value"
    ],
    "param-types": [
      "java.lang.String",
      "double"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.DoubleTag#DoubleTag(java.lang.String,double)",
    "class": "net.citizensnpcs.api.jnbt.DoubleTag"
  },
  {
    "descr": "Returns the best node from the frontier and removes it.",
    "param-names": ["AStarStorage"],
    "param-types": ["net.citizensnpcs.api.astar.AStarStorage"],
    "method": "removeBestNode",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarStorage#removeBestNode()",
    "class": "net.citizensnpcs.api.astar.AStarStorage",
    "return": "net.citizensnpcs.api.astar.AStarNode"
  },
  {
    "descr": "Gets the name of this tag.",
    "param-names": ["Tag"],
    "param-types": ["net.citizensnpcs.api.jnbt.Tag"],
    "method": "getName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.Tag#getName()",
    "class": "net.citizensnpcs.api.jnbt.Tag",
    "return": "java.lang.String"
  },
  {
    "descr": "Checks whether the supplied VocalChord name is registered.",
    "param-names": [
      "SpeechFactory",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechFactory",
      "java.lang.String"
    ],
    "method": "isRegistered",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechFactory#isRegistered(java.lang.String)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechFactory",
    "return": "boolean"
  },
  {
    "descr": "Registers a Persister redirect. Fields with the Persist annotation with a type that has been\\nregistered using this method will use the Persister by default to load and save data. The\\nDelegatePersistence annotation will be preferred if present.",
    "param-names": [
      "Clazz",
      "Delegate Class"
    ],
    "static": true,
    "param-types": [
      "java.lang.Class",
      "java.lang.Class"
    ],
    "method": "registerPersistDelegate",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.PersistenceLoader#registerPersistDelegate(java.lang.Class<?>,java.lang.Class<? extends net.citizensnpcs.api.persistence.Persister<?>>)",
    "class": "net.citizensnpcs.api.persistence.PersistenceLoader"
  },
  {
    "param-names": ["DataKey"],
    "param-types": ["net.citizensnpcs.api.util.DataKey"],
    "method": "getValuesDeep",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getValuesDeep()",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "java.util.Map"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "boolean"
  },
  {
    "param-names": [
      "InventoryMenu",
      "Event"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu",
      "org.bukkit.event.inventory.InventoryDragEvent"
    ],
    "method": "onInventoryDrag",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#onInventoryDrag(org.bukkit.event.inventory.InventoryDragEvent)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDeathEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDeathEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The Minecart item offset as defined by Minecraft. Minecart#setDisplayBlockOffset(int)",
    "static": true,
    "field": "MINECART_OFFSET_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#MINECART_OFFSET_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "Registers a Behavior with a given priority.",
    "param-names": [
      "GoalController",
      "Behavior",
      "Priority"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.GoalController",
      "net.citizensnpcs.api.ai.tree.Behavior",
      "int"
    ],
    "method": "addBehavior",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController#addBehavior(net.citizensnpcs.api.ai.tree.Behavior,int)",
    "class": "net.citizensnpcs.api.ai.GoalController"
  },
  {
    "param-names": [
      "CitizensPlugin",
      "Store"
    ],
    "param-types": [
      "net.citizensnpcs.api.CitizensPlugin",
      "net.citizensnpcs.api.npc.NPCDataStore"
    ],
    "method": "createAnonymousNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#createAnonymousNPCRegistry(net.citizensnpcs.api.npc.NPCDataStore)",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "descr": "Sets whether to always use a name hologram instead of the in-built Minecraft name.",
    "param-names": [
      "NPC",
      "Use"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "boolean"
    ],
    "method": "setAlwaysUseNameHologram",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#setAlwaysUseNameHologram(boolean)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["GoalController.GoalEntry"],
    "param-types": ["net.citizensnpcs.api.ai.GoalController.GoalEntry"],
    "method": "getBehavior",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController.GoalEntry#getBehavior()",
    "class": "net.citizensnpcs.api.ai.GoalController.GoalEntry",
    "return": "net.citizensnpcs.api.ai.tree.Behavior"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCVehicleDamageEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCVehicleDamageEvent"
  },
  {
    "method": "getOriginal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#getOriginal()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_INT_ARRAY",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_INT_ARRAY",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "descr": "Whether the NPC is collidable with Players or not. Boolean.",
    "static": true,
    "field": "COLLIDABLE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#COLLIDABLE",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "static": true,
    "field": "PLAYER_SKIN_TEXTURE_PROPERTIES_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#PLAYER_SKIN_TEXTURE_PROPERTIES_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "param-names": ["File"],
    "param-types": ["java.io.File"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.YamlStorage#YamlStorage(java.io.File)",
    "class": "net.citizensnpcs.api.util.YamlStorage"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCommandDispatchEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCommandDispatchEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getNavigator",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCancelEvent#getNavigator()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCancelEvent",
    "return": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDespawnEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDespawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCollisionEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCollisionEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Creates a new local context of the Script.",
    "param-names": ["ScriptFactory"],
    "param-types": ["net.citizensnpcs.api.scripting.ScriptFactory"],
    "method": "newInstance",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptFactory#newInstance()",
    "class": "net.citizensnpcs.api.scripting.ScriptFactory",
    "return": "net.citizensnpcs.api.scripting.Script"
  },
  {
    "descr": "Permanently removes this NPC and all data about it from the registry it's attached to.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "destroy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#destroy()",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "static": true,
    "field": "PLAYER_SKIN_UUID",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#PLAYER_SKIN_UUID",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Returns the NavigatorParameters local to any current target execution. These are updated independently of\\nthe default parameters.",
    "param-names": ["Navigator"],
    "param-types": ["net.citizensnpcs.api.ai.Navigator"],
    "method": "getLocalParameters",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#getLocalParameters()",
    "class": "net.citizensnpcs.api.ai.Navigator",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationBeginEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationBeginEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["TraitInfo"],
    "param-types": ["net.citizensnpcs.api.trait.TraitInfo"],
    "method": "getTraitName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitInfo#getTraitName()",
    "class": "net.citizensnpcs.api.trait.TraitInfo",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "DataKey",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String"
    ],
    "method": "getString",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getString(java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Damage"],
    "param-types": ["double"],
    "method": "setDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#setDamage(double)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent"
  },
  {
    "method": "getSender",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent#getSender()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Whether to block Minecraft villager trades. Boolean defaults to true.",
    "static": true,
    "field": "VILLAGER_BLOCK_TRADES",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#VILLAGER_BLOCK_TRADES",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "param-names": ["InventoryMenuSlot"],
    "param-types": ["net.citizensnpcs.api.gui.InventoryMenuSlot"],
    "method": "getFilter",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuSlot#getFilter()",
    "class": "net.citizensnpcs.api.gui.InventoryMenuSlot",
    "return": "java.util.Collection"
  },
  {
    "descr": "Called when the trait has been newly copied to an NPC.",
    "param-names": ["Trait"],
    "param-types": ["net.citizensnpcs.api.trait.Trait"],
    "method": "onCopy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#onCopy()",
    "class": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "descr": "Returns the name of the VocalChord that called this event.",
    "method": "getVocalChordName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent#getVocalChordName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the text message sent. Overrides text set with the constructor.",
    "param-names": [
      "SpeechContext",
      "Message"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechContext",
      "java.lang.String"
    ],
    "method": "setMessage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#setMessage(java.lang.String)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "descr": "The combuster can be lava or a block that is on fire.\\n\\nWARNING: block may be null.",
    "method": "getCombuster",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByBlockEvent#getCombuster()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDespawnEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDespawnEvent",
    "return": "boolean"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLeftClickEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLeftClickEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Navigator"],
    "param-types": ["net.citizensnpcs.api.ai.Navigator"],
    "method": "isNavigating",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#isNavigating()",
    "class": "net.citizensnpcs.api.ai.Navigator",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSelectEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSelectEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Fetches metadata from the given key.",
    "param-names": [
      "MetadataStore",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "java.lang.String"
    ],
    "method": "get",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#<T>get(java.lang.String)",
    "class": "net.citizensnpcs.api.npc.MetadataStore",
    "return": "java.lang.Object"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the type of item in this list.",
    "param-names": ["ListTag"],
    "param-types": ["net.citizensnpcs.api.jnbt.ListTag"],
    "method": "getType",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.ListTag#getType()",
    "class": "net.citizensnpcs.api.jnbt.ListTag",
    "return": "java.lang.Class"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_BYTE_ARRAY",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_BYTE_ARRAY",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "descr": "Gets the StuckAction of these parameters. This will be run when the navigation is stuck and must either\\nbe fixed up or cancelled.",
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "stuckAction",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#stuckAction()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.StuckAction"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCancelEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCancelEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "InventoryMenu",
      "Event"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu",
      "org.bukkit.event.inventory.InventoryClickEvent"
    ],
    "method": "onInventoryClick",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#onInventoryClick(org.bukkit.event.inventory.InventoryClickEvent)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCancelEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCancelEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "getCreator",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#getCreator()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "descr": "Saves the NPC to the given DataKey. This includes all metadata, traits, and spawn information\\nthat will allow it to respawn at a later time via #load(DataKey).",
    "param-names": [
      "NPC",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "save",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#save(net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Sets the message to be sent to the bystander. Note: This may differ from the message contained in the\\nSpeechContext, as formatting may have occurred.",
    "param-names": ["Formatted Message"],
    "param-types": ["java.lang.String"],
    "method": "setMessage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent#setMessage(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent"
  },
  {
    "method": "getCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent#getCancelReason()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent",
    "return": "net.citizensnpcs.api.ai.event.CancelReason"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent",
    "return": "boolean"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#MinecraftBlockExaminer()",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer"
  },
  {
    "descr": "Sets the reason for cancelling the event. This will be sent to the CommandSender creator to explain why\\nthe NPC cannot be created.",
    "param-names": ["Reason"],
    "param-types": ["java.lang.String"],
    "method": "setCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent#setCancelReason(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent"
  },
  {
    "descr": "Modifieds the given speed value based on the current parameters.",
    "param-names": [
      "NavigatorParameters",
      "To Modify"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "float"
    ],
    "method": "modifiedSpeed",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#modifiedSpeed(float)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "float"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["java.lang.Object"],
    "method": "equals",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#equals(java.lang.Object)",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "boolean"
  },
  {
    "descr": "Whether to open doors while pathfinding. Boolean.",
    "static": true,
    "field": "PATHFINDER_OPEN_DOORS_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#PATHFINDER_OPEN_DOORS_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDeathEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDeathEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "DataKey",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String"
    ],
    "method": "getRaw",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getRaw(java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "java.lang.Object"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenDoorEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenDoorEvent",
    "return": "boolean"
  },
  {
    "descr": "Checks whether the given trait is 'internal'. An internal trait is implementation-defined and is default or\\nbuilt-in.",
    "param-names": [
      "TraitFactory",
      "Trait"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.TraitFactory",
      "net.citizensnpcs.api.trait.Trait"
    ],
    "method": "isInternalTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitFactory#isInternalTrait(net.citizensnpcs.api.trait.Trait)",
    "class": "net.citizensnpcs.api.trait.TraitFactory",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "hasImplementation",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#hasImplementation()",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "boolean"
  },
  {
    "param-names": ["MenuContext"],
    "param-types": ["net.citizensnpcs.api.gui.MenuContext"],
    "method": "getInventory",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuContext#getInventory()",
    "class": "net.citizensnpcs.api.gui.MenuContext",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "param-names": ["Mat"],
    "static": true,
    "param-types": ["org.bukkit.Material"],
    "method": "canStandOn",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#canStandOn(org.bukkit.Material)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "boolean"
  },
  {
    "param-names": ["DataKey"],
    "param-types": ["net.citizensnpcs.api.util.DataKey"],
    "method": "name",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#name()",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "java.lang.String"
  },
  {
    "descr": "The Item amount. Integer.",
    "static": true,
    "field": "ITEM_AMOUNT_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#ITEM_AMOUNT_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns a sorted view of this registry, sorted by NPC id.",
    "param-names": ["NPCRegistry"],
    "param-types": ["net.citizensnpcs.api.npc.NPCRegistry"],
    "method": "sorted",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#sorted()",
    "class": "net.citizensnpcs.api.npc.NPCRegistry",
    "return": "java.lang.Iterable"
  },
  {
    "descr": "Creates a retrying sequence that will continue from the current Behavior if it returns\\nBehaviorStatus#FAILURE instead of propagating the failure up to its parent.",
    "param-names": ["Behaviors"],
    "static": true,
    "param-types": ["java.util.Collection"],
    "method": "createRetryingSequence",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Sequence#createRetryingSequence(java.util.Collection<net.citizensnpcs.api.ai.tree.Behavior>)",
    "class": "net.citizensnpcs.api.ai.tree.Sequence",
    "return": "net.citizensnpcs.api.ai.tree.Sequence"
  },
  {
    "static": true,
    "method": "getDefaultNPCSelector",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#getDefaultNPCSelector()",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "net.citizensnpcs.api.npc.NPCSelector"
  },
  {
    "param-names": [
      "ScriptCompiler.CompileTaskBuilder",
      "Provider"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder",
      "net.citizensnpcs.api.scripting.ContextProvider"
    ],
    "method": "withContextProvider",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder#withContextProvider(net.citizensnpcs.api.scripting.ContextProvider)",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder",
    "return": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder"
  },
  {
    "descr": "Saves a trait.",
    "param-names": [
      "Trait",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.Trait",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "save",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#save(net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "method": "getNavigator",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent#getNavigator()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent",
    "return": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#SpeechContext()",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "param-names": ["Block"],
    "static": true,
    "param-types": ["org.bukkit.block.Block"],
    "method": "canStandOn",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#canStandOn(org.bukkit.block.Block)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "boolean"
  },
  {
    "method": "getHotbarButton",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getHotbarButton()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "int"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "updatePathRate",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#updatePathRate()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "int"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensDisableEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDisableEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the NPC with the given ID if it exists.",
    "param-names": [
      "NPCRegistry",
      "Id"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCRegistry",
      "int"
    ],
    "method": "getById",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#getById(int)",
    "class": "net.citizensnpcs.api.npc.NPCRegistry",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent",
    "return": "boolean"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensEnableEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensEnableEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Whether the NPC is 'protected' i.e. invulnerable to damage. Boolean.",
    "static": true,
    "field": "DEFAULT_PROTECTED",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#DEFAULT_PROTECTED",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Sets the path distance margin. This is how close the pathfinder should pathfind to the target in blocks. If you\\nneed to set the cutoff distance before the NPC considers their path completed, use\\n#distanceMargin(double).",
    "param-names": [
      "NavigatorParameters",
      "Distance"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "double"
    ],
    "method": "pathDistanceMargin",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#pathDistanceMargin(double)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "param-names": ["DataKey"],
    "param-types": ["net.citizensnpcs.api.util.DataKey"],
    "method": "keyExists",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#keyExists()",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "boolean"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "boolean"
  },
  {
    "descr": "Get an NPC's equipment from the given slot.",
    "param-names": [
      "Equipment",
      "Slot"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Equipment",
      "int"
    ],
    "method": "get",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment#get(int)",
    "class": "net.citizensnpcs.api.trait.trait.Equipment",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Sets the current navigation to a Location destination.",
    "param-names": [
      "Navigator",
      "Target",
      "Strategy"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.Navigator",
      "org.bukkit.Location",
      "java.util.function.Function"
    ],
    "method": "setTarget",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#setTarget(org.bukkit.Location,java.util.function.Function<net.citizensnpcs.api.ai.NavigatorParameters,net.citizensnpcs.api.ai.PathStrategy>)",
    "class": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "descr": "Adds a Runnable callback that will be called every tick while the path is running.",
    "param-names": [
      "NavigatorParameters",
      "Callback"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "java.lang.Runnable"
    ],
    "method": "addRunCallback",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#addRunCallback(java.lang.Runnable)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "param-names": ["Damage"],
    "param-types": ["int"],
    "method": "setDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#setDamage(int)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent"
  },
  {
    "param-names": [
      "BlockExaminer",
      "Source",
      "Point"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.BlockExaminer",
      "net.citizensnpcs.api.astar.pathfinder.BlockSource",
      "net.citizensnpcs.api.astar.pathfinder.PathPoint"
    ],
    "method": "isPassable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer#isPassable(net.citizensnpcs.api.astar.pathfinder.BlockSource,net.citizensnpcs.api.astar.pathfinder.PathPoint)",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer",
    "return": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent"
  },
  {
    "param-names": [
      "DataKey",
      "Key",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String",
      "int"
    ],
    "method": "setInt",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#setInt(java.lang.String,int)",
    "class": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "descr": "Sets whether the controller is paused. While paused, no new Goals will be selected and any executing\\ngoals will be suspended.",
    "param-names": [
      "GoalController",
      "Paused"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.GoalController",
      "boolean"
    ],
    "method": "setPaused",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController#setPaused(boolean)",
    "class": "net.citizensnpcs.api.ai.GoalController"
  },
  {
    "descr": "Gets the default GoalController of this NPC.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "getDefaultGoalController",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getDefaultGoalController()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "net.citizensnpcs.api.ai.GoalController"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenDoorEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenDoorEvent"
  },
  {
    "param-names": ["Npc"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "builder",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal#builder(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal",
    "return": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenGateEvent"
  },
  {
    "method": "describeConstable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#describeConstable()",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "java.util.Optional"
  },
  {
    "param-names": ["Path"],
    "param-types": ["net.citizensnpcs.api.astar.pathfinder.Path"],
    "method": "debugEnd",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.Path#debugEnd()",
    "class": "net.citizensnpcs.api.astar.pathfinder.Path"
  },
  {
    "descr": "Resets the behavior and any state it is holding.",
    "param-names": ["Behavior"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Behavior"],
    "method": "reset",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Behavior#reset()",
    "class": "net.citizensnpcs.api.ai.tree.Behavior"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Behaviors"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Behavior[]"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Composite#Composite(net.citizensnpcs.api.ai.tree.Behavior...)",
    "class": "net.citizensnpcs.api.ai.tree.Composite"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Colorizer#Colorizer()",
    "class": "net.citizensnpcs.api.util.Colorizer"
  },
  {
    "descr": "Creates an inventory menu instance starting at the given page that registers events and deregisters events when\\nthe menu is closed.",
    "param-names": ["Clazz"],
    "static": true,
    "param-types": ["java.lang.Class"],
    "method": "createSelfRegistered",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#createSelfRegistered(java.lang.Class<? extends net.citizensnpcs.api.gui.InventoryMenuPage>)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu",
    "return": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "static": true,
    "field": "CHESTPLATE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot#CHESTPLATE",
    "class": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot",
    "return": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot"
  },
  {
    "descr": "Builds a Selector that prioritises certain Behaviors based on a comparison function.",
    "param-names": [
      "Comparator",
      "Behaviors"
    ],
    "static": true,
    "param-types": [
      "java.util.Comparator",
      "java.util.Collection"
    ],
    "method": "prioritySelector",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Selectors#prioritySelector(java.util.Comparator<net.citizensnpcs.api.ai.tree.Behavior>,java.util.Collection<net.citizensnpcs.api.ai.tree.Behavior>)",
    "class": "net.citizensnpcs.api.ai.tree.Selectors",
    "return": "net.citizensnpcs.api.ai.tree.Selector.Builder"
  },
  {
    "descr": "Called just before the NPC is spawned. NPC#getEntity() will return an unspawned entity.",
    "param-names": ["Trait"],
    "param-types": ["net.citizensnpcs.api.trait.Trait"],
    "method": "onPreSpawn",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#onPreSpawn()",
    "class": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByBlockEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent",
    "return": "boolean"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Behaviors"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.ai.tree.Behavior[]"],
    "method": "selecting",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Selector#selecting(net.citizensnpcs.api.ai.tree.Behavior...)",
    "class": "net.citizensnpcs.api.ai.tree.Selector",
    "return": "net.citizensnpcs.api.ai.tree.Selector.Builder"
  },
  {
    "param-names": [
      "InventoryMenuSlot",
      "Description"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenuSlot",
      "java.lang.String"
    ],
    "method": "setDescription",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuSlot#setDescription(java.lang.String)",
    "class": "net.citizensnpcs.api.gui.InventoryMenuSlot"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockSource#BlockSource()",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockSource"
  },
  {
    "param-names": ["BlockSource"],
    "param-types": ["net.citizensnpcs.api.astar.pathfinder.BlockSource"],
    "method": "getWorld",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockSource#getWorld()",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockSource",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Gets the SpeechFactory.",
    "param-names": ["CitizensPlugin"],
    "param-types": ["net.citizensnpcs.api.CitizensPlugin"],
    "method": "getSpeechFactory",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#getSpeechFactory()",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "net.citizensnpcs.api.ai.speech.SpeechFactory"
  },
  {
    "param-names": [
      "DataKey",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String"
    ],
    "method": "getRawUnchecked",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#<T>getRawUnchecked(java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "java.lang.Object"
  },
  {
    "descr": "Reads an NBT tag from the stream.",
    "param-names": ["NBTInputStream"],
    "param-types": ["net.citizensnpcs.api.jnbt.NBTInputStream"],
    "method": "readTag",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTInputStream#readTag()",
    "class": "net.citizensnpcs.api.jnbt.NBTInputStream",
    "return": "net.citizensnpcs.api.jnbt.Tag"
  },
  {
    "param-names": [
      "Min X",
      "Min Y",
      "Min Z",
      "Max X",
      "Max Y",
      "Max Z"
    ],
    "param-types": [
      "double",
      "double",
      "double",
      "double",
      "double",
      "double"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.BoundingBox#BoundingBox(double,double,double,double,double,double)",
    "class": "net.citizensnpcs.api.util.BoundingBox"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Creates an despawned NPC.",
    "param-names": [
      "NPCRegistry",
      "Type",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCRegistry",
      "org.bukkit.entity.EntityType",
      "java.lang.String"
    ],
    "method": "createNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#createNPC(org.bukkit.entity.EntityType,java.lang.String)",
    "class": "net.citizensnpcs.api.npc.NPCRegistry",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Sets the current navigation using a list of Vectors which will be followed in turn.",
    "param-names": [
      "Navigator",
      "Path"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.Navigator",
      "java.lang.Iterable"
    ],
    "method": "setTarget",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#setTarget(java.lang.Iterable<org.bukkit.util.Vector>)",
    "class": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "param-names": [
      "Location",
      "Radius"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.Location",
      "int"
    ],
    "method": "findValidLocation",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#findValidLocation(org.bukkit.Location,int)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "org.bukkit.Location"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#valueOf(java.lang.String)",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Creates a new anonymous NPCRegistry that is \"Citizens-backed\" i.e. will reload and unload at the\\nsame time that Citizens reloads and unloads.",
    "param-names": [
      "CitizensPlugin",
      "Store"
    ],
    "param-types": [
      "net.citizensnpcs.api.CitizensPlugin",
      "net.citizensnpcs.api.npc.NPCDataStore"
    ],
    "method": "createCitizensBackedNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#createCitizensBackedNPCRegistry(net.citizensnpcs.api.npc.NPCDataStore)",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenDoorEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenDoorEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Creates a new NPCRegistry with its own set of NPCs. This is stored in memory with the Citizens\\nplugin, and can be accessed via #getNamedNPCRegistry(String).",
    "param-names": [
      "Name",
      "Store"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "net.citizensnpcs.api.npc.NPCDataStore"
    ],
    "method": "createNamedNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#createNamedNPCRegistry(java.lang.String,net.citizensnpcs.api.npc.NPCDataStore)",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "clone",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#clone()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "The combuster can be a WeatherStorm a Blaze, or an Entity holding a FIRE_ASPECT enchanted item.",
    "method": "getCombuster",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByEntityEvent#getCombuster()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSelectEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSelectEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent"
  },
  {
    "param-names": [
      "Key",
      "Msg"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "java.lang.Object[]"
    ],
    "method": "logTr",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#logTr(java.lang.String,java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "param-names": [
      "Paginator",
      "Page"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.Paginator",
      "int"
    ],
    "method": "getPageText",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Paginator#getPageText(int)",
    "class": "net.citizensnpcs.api.util.Paginator",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.EntityTargetNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.EntityTargetNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLeftClickEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLeftClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Translator.TranslationProvider"],
    "param-types": ["net.citizensnpcs.api.util.Translator.TranslationProvider"],
    "method": "getName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Translator.TranslationProvider#getName()",
    "class": "net.citizensnpcs.api.util.Translator.TranslationProvider",
    "return": "java.lang.String"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getSlotType",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getSlotType()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Radius"],
    "param-types": ["double"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.RadiusNPCFlock#RadiusNPCFlock(double)",
    "class": "net.citizensnpcs.api.ai.flocking.RadiusNPCFlock"
  },
  {
    "descr": "The specialised collection type to use when a super class is specified. Eg. WeakHashMap.class when the field type\\nis Map.",
    "param-names": ["Persist"],
    "param-types": ["net.citizensnpcs.api.persistence.Persist"],
    "method": "collectionType",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.Persist#collectionType()",
    "class": "net.citizensnpcs.api.persistence.Persist",
    "return": "java.lang.Class"
  },
  {
    "param-names": ["GoalController"],
    "param-types": ["net.citizensnpcs.api.ai.GoalController"],
    "method": "isPaused",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController#isPaused()",
    "class": "net.citizensnpcs.api.ai.GoalController",
    "return": "boolean"
  },
  {
    "param-names": [
      "Text",
      "Player"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "org.bukkit.OfflinePlayer"
    ],
    "method": "replace",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Placeholders#replace(java.lang.String,org.bukkit.OfflinePlayer)",
    "class": "net.citizensnpcs.api.util.Placeholders",
    "return": "java.lang.String"
  },
  {
    "descr": "The final message to be sent to the bystander. Note: This may differ from the message contained in the\\nSpeechContext, as formatting may have occurred.",
    "method": "getMessage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent#getMessage()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "attackStrategy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#attackStrategy()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.AttackStrategy"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensEnableEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensEnableEvent",
    "return": "boolean"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent",
    "return": "java.lang.String"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent",
    "return": "boolean"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationStuckEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationStuckEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "Sender",
      "Msg",
      "Npc"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.command.CommandSender",
      "java.lang.Object",
      "net.citizensnpcs.api.npc.NPC"
    ],
    "method": "sendWithNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#sendWithNPC(org.bukkit.command.CommandSender,java.lang.Object,net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "param-names": [
      "SlotSource",
      "Index"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.SlotSource",
      "int"
    ],
    "method": "getSlot",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.SlotSource#getSlot(int)",
    "class": "net.citizensnpcs.api.gui.SlotSource",
    "return": "net.citizensnpcs.api.gui.InventoryMenuSlot"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Placeholders#Placeholders()",
    "class": "net.citizensnpcs.api.util.Placeholders"
  },
  {
    "descr": "Represents an event where an NPC speaks, with SpeechContext. This event takes place before being sent to the\\nVocalChord",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent"
  },
  {
    "param-names": ["Navigator"],
    "param-types": ["net.citizensnpcs.api.ai.Navigator"],
    "method": "isPaused",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#isPaused()",
    "class": "net.citizensnpcs.api.ai.Navigator",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets a trait with the given class.",
    "param-names": [
      "TraitFactory",
      "Clazz"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.TraitFactory",
      "java.lang.Class"
    ],
    "method": "getTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitFactory#<T>getTrait(java.lang.Class<T>)",
    "class": "net.citizensnpcs.api.trait.TraitFactory",
    "return": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "param-names": ["PathStrategy"],
    "param-types": ["net.citizensnpcs.api.ai.PathStrategy"],
    "method": "getCurrentDestination",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.PathStrategy#getCurrentDestination()",
    "class": "net.citizensnpcs.api.ai.PathStrategy",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTeleportEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTeleportEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getCursor",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getCursor()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Sets the owner of an NPC.",
    "param-names": [
      "Owner",
      "Owner"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Owner",
      "java.lang.String"
    ],
    "method": "setOwner",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Owner#setOwner(java.lang.String)",
    "class": "net.citizensnpcs.api.trait.trait.Owner"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "stationaryTicks",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#stationaryTicks()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "int"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCEnderTeleportEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCEnderTeleportEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCollisionEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCollisionEvent",
    "return": "boolean"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenDoorEvent"
  },
  {
    "param-names": ["CitizensPlugin"],
    "param-types": ["net.citizensnpcs.api.CitizensPlugin"],
    "method": "getScriptFolder",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#getScriptFolder()",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "java.io.File"
  },
  {
    "descr": "Despawns this NPC. This is equivalent to calling #despawn(DespawnReason) with\\nDespawnReason#PLUGIN.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "despawn",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#despawn()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "boolean"
  },
  {
    "descr": "Sets the base movement speed of the Navigator. Note that this is mob-specific and may not always be sane.\\nUsing #speedModifier() is preferred.",
    "param-names": [
      "NavigatorParameters",
      "Speed"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "float"
    ],
    "method": "speed",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#speed(float)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent"
  },
  {
    "descr": "Gets the current implementation's SpeechFactory.",
    "static": true,
    "method": "getSpeechFactory",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#getSpeechFactory()",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "net.citizensnpcs.api.ai.speech.SpeechFactory"
  },
  {
    "method": "getVocalChordName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent#getVocalChordName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "EventRegistrar.Events",
      "Handler"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.EventRegistrar.Events",
      "net.citizensnpcs.api.scripting.EventHandler"
    ],
    "method": "deregister",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.EventRegistrar.Events#deregister(net.citizensnpcs.api.scripting.EventHandler)",
    "class": "net.citizensnpcs.api.scripting.EventRegistrar.Events"
  },
  {
    "method": "getClone",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCloneEvent#getClone()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCloneEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["PathStrategy"],
    "param-types": ["net.citizensnpcs.api.ai.PathStrategy"],
    "method": "getPath",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.PathStrategy#getPath()",
    "class": "net.citizensnpcs.api.ai.PathStrategy",
    "return": "java.lang.Iterable"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent",
    "return": "boolean"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#Messaging()",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "param-names": [
      "Arg0",
      "Arg1"
    ],
    "static": true,
    "param-types": [
      "java.lang.Class",
      "java.lang.String"
    ],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#<T>valueOf(java.lang.Class<T>,java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "java.lang.Enum"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.MobType#MobType()",
    "class": "net.citizensnpcs.api.trait.trait.MobType"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRightClickEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRightClickEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "The Item data. Byte.",
    "static": true,
    "field": "ITEM_DATA_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#ITEM_DATA_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "method": "getCause",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#getCause()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "param-names": [
      "TargetNearbyEntityGoal.Builder",
      "Target Types"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder",
      "java.util.Set"
    ],
    "method": "targets",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder#targets(java.util.Set<org.bukkit.entity.EntityType>)",
    "class": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder",
    "return": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder"
  },
  {
    "descr": "Transition to another page with context. Adds the previous page to a stack which will be returned to when the\\ncurrent page is closed.",
    "param-names": [
      "InventoryMenu",
      "Clazz",
      "Context"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu",
      "java.lang.Class",
      "java.util.Map"
    ],
    "method": "transition",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#transition(java.lang.Class<? extends net.citizensnpcs.api.gui.InventoryMenuPage>,java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "static": true,
    "field": "PLAYER_SKIN_TEXTURE_PROPERTIES_SIGN",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#PLAYER_SKIN_TEXTURE_PROPERTIES_SIGN",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Creates the tag.",
    "param-names": [
      "Name",
      "Value"
    ],
    "param-types": [
      "java.lang.String",
      "long"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.LongTag#LongTag(java.lang.String,long)",
    "class": "net.citizensnpcs.api.jnbt.LongTag"
  },
  {
    "static": true,
    "field": "DISABLE_DEFAULT_STUCK_ACTION",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#DISABLE_DEFAULT_STUCK_ACTION",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "param-names": [
      "Src",
      "Providers"
    ],
    "param-types": [
      "javax.script.CompiledScript",
      "net.citizensnpcs.api.scripting.ContextProvider[]"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.SimpleScript#SimpleScript(javax.script.CompiledScript,net.citizensnpcs.api.scripting.ContextProvider[])",
    "class": "net.citizensnpcs.api.scripting.SimpleScript"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechEvent",
    "return": "boolean"
  },
  {
    "method": "toString",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#toString()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLeftClickEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLeftClickEvent"
  },
  {
    "descr": "Loads a trait.",
    "param-names": [
      "Trait",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.Trait",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "load",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#load(net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByBlockEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Checks if there are any recipients. If none, this SpeechContext is not targeted.",
    "param-names": ["SpeechContext"],
    "param-types": ["net.citizensnpcs.api.ai.speech.SpeechContext"],
    "method": "hasRecipients",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#hasRecipients()",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext",
    "return": "boolean"
  },
  {
    "descr": "Saves the object instance to the given DataKey.",
    "param-names": [
      "Persister",
      "Instance",
      "Root"
    ],
    "param-types": [
      "net.citizensnpcs.api.persistence.Persister",
      "java.lang.Object",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "save",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.Persister#save(T,net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.persistence.Persister"
  },
  {
    "method": "getDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#getDamage()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent",
    "return": "double"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent"
  },
  {
    "param-names": ["Override Class Loader"],
    "param-types": ["java.lang.ClassLoader"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler#ScriptCompiler(java.lang.ClassLoader)",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler"
  },
  {
    "descr": "The Minecraft sound played when the NPC dies. String - Minecraft sound name.",
    "static": true,
    "field": "DEATH_SOUND_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#DEATH_SOUND_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "IGNORE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState#IGNORE",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState",
    "return": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState"
  },
  {
    "method": "getDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#getDamage()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent",
    "return": "double"
  },
  {
    "method": "getFrom",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTeleportEvent#getFrom()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTeleportEvent",
    "return": "org.bukkit.Location"
  },
  {
    "method": "getCurrentItem",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getCurrentItem()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.ReversableAStarNode#ReversableAStarNode()",
    "class": "net.citizensnpcs.api.hpastar.ReversableAStarNode"
  },
  {
    "param-names": ["Trait"],
    "param-types": ["net.citizensnpcs.api.trait.Trait"],
    "method": "isRunImplemented",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#isRunImplemented()",
    "class": "net.citizensnpcs.api.trait.Trait",
    "return": "boolean"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent"
  },
  {
    "param-names": [
      "ScriptCompiler.CompileTaskBuilder",
      "Callback"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder",
      "net.citizensnpcs.api.scripting.CompileCallback"
    ],
    "method": "withCallback",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder#withCallback(net.citizensnpcs.api.scripting.CompileCallback)",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder",
    "return": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSpawnEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "DataKey",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "int"
    ],
    "method": "getRelative",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getRelative(int)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDeathEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDeathEvent",
    "return": "java.lang.String"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensDisableEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDisableEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Selector"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Selector"],
    "method": "retryChildren",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Selector#retryChildren()",
    "class": "net.citizensnpcs.api.ai.tree.Selector",
    "return": "boolean"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.SimpleMetadataStore#SimpleMetadataStore()",
    "class": "net.citizensnpcs.api.npc.SimpleMetadataStore"
  },
  {
    "static": true,
    "field": "NPC_DESPAWNED",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#NPC_DESPAWNED",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "net.citizensnpcs.api.ai.event.CancelReason"
  },
  {
    "param-names": ["BoundingBox"],
    "param-types": ["net.citizensnpcs.api.util.BoundingBox"],
    "field": "minZ",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.BoundingBox#minZ",
    "class": "net.citizensnpcs.api.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Sample weight indicating high amount of influence from flocking.",
    "static": true,
    "field": "HIGH_INFLUENCE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.Flocker#HIGH_INFLUENCE",
    "class": "net.citizensnpcs.api.ai.flocking.Flocker",
    "return": "double"
  },
  {
    "param-names": [
      "SpeechContext",
      "Entity"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechContext",
      "org.bukkit.entity.LivingEntity"
    ],
    "method": "setTalker",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#setTalker(org.bukkit.entity.LivingEntity)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "param-names": [
      "BlockSource",
      "Pos"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.BlockSource",
      "org.bukkit.util.Vector"
    ],
    "method": "getCollisionBox",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockSource#getCollisionBox(org.bukkit.util.Vector)",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockSource",
    "return": "net.citizensnpcs.api.util.BoundingBox"
  },
  {
    "descr": "Creates a new NBTOutputStream, which will write data to the specified underlying output stream.",
    "param-names": ["Os"],
    "param-types": ["java.io.OutputStream"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTOutputStream#NBTOutputStream(java.io.OutputStream)",
    "class": "net.citizensnpcs.api.jnbt.NBTOutputStream"
  },
  {
    "descr": "Called when an NPC is right-clicked by a player.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRightClickEvent"
  },
  {
    "param-names": ["PathStrategy"],
    "param-types": ["net.citizensnpcs.api.ai.PathStrategy"],
    "method": "getTargetAsLocation",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.PathStrategy#getTargetAsLocation()",
    "class": "net.citizensnpcs.api.ai.PathStrategy",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent"
  },
  {
    "static": true,
    "method": "values",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.Direction#values()",
    "class": "net.citizensnpcs.api.hpastar.Direction",
    "return": "net.citizensnpcs.api.hpastar.Direction[]"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["InventoryMenuPattern"],
    "param-types": ["net.citizensnpcs.api.gui.InventoryMenuPattern"],
    "method": "getTransitions",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuPattern#getTransitions()",
    "class": "net.citizensnpcs.api.gui.InventoryMenuPattern",
    "return": "java.util.Collection"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.SimpleGoalController.SimpleGoalSelector#SimpleGoalSelector()",
    "class": "net.citizensnpcs.api.ai.SimpleGoalController.SimpleGoalSelector"
  },
  {
    "param-names": [
      "NPCSelector",
      "Sender",
      "Npc"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCSelector",
      "org.bukkit.command.CommandSender",
      "net.citizensnpcs.api.npc.NPC"
    ],
    "method": "select",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCSelector#select(org.bukkit.command.CommandSender,net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.npc.NPCSelector"
  },
  {
    "method": "getCursorNonNull",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getCursorNonNull()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_INT",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_INT",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "param-names": ["InventoryMenuTransition"],
    "param-types": ["net.citizensnpcs.api.gui.InventoryMenuTransition"],
    "method": "getSlot",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuTransition#getSlot()",
    "class": "net.citizensnpcs.api.gui.InventoryMenuTransition",
    "return": "net.citizensnpcs.api.gui.InventoryMenuSlot"
  },
  {
    "descr": "Removes the named NPCRegistry with the given name.",
    "param-names": [
      "CitizensPlugin",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.CitizensPlugin",
      "java.lang.String"
    ],
    "method": "removeNamedNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#removeNamedNPCRegistry(java.lang.String)",
    "class": "net.citizensnpcs.api.CitizensPlugin"
  },
  {
    "descr": "Whether the NPC drops its inventory after death. Boolean.",
    "static": true,
    "field": "DROPS_ITEMS_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#DROPS_ITEMS_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState#valueOf(java.lang.String)",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState",
    "return": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState"
  },
  {
    "param-names": [
      "BlockBreaker.BlockBreakerConfiguration",
      "Radius"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
      "double"
    ],
    "method": "radius",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration#radius(double)",
    "class": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
    "return": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration"
  },
  {
    "param-names": [
      "BoundingBox",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.BoundingBox",
      "int",
      "int",
      "int"
    ],
    "method": "add",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.BoundingBox#add(int,int,int)",
    "class": "net.citizensnpcs.api.util.BoundingBox",
    "return": "net.citizensnpcs.api.util.BoundingBox"
  },
  {
    "param-names": [
      "WanderGoal",
      "Xrange",
      "Yrange"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.goals.WanderGoal",
      "int",
      "int"
    ],
    "method": "setXYRange",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.WanderGoal#setXYRange(int,int)",
    "class": "net.citizensnpcs.api.ai.goals.WanderGoal"
  },
  {
    "descr": "Adds a list of Talkable recipients. The VocalChord should use this information to correctly\\ndirect the message. Note: depending on the VocalChord, this list may not be inclusive as to who gets the message.",
    "param-names": [
      "SpeechContext",
      "Talkables"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechContext",
      "java.util.List"
    ],
    "method": "addRecipients",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#addRecipients(java.util.List<net.citizensnpcs.api.ai.speech.Talkable>)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext",
    "return": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent",
    "return": "java.lang.String"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Inventory#Inventory()",
    "class": "net.citizensnpcs.api.trait.trait.Inventory"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCloneEvent"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCreateEvent"
  },
  {
    "param-names": [
      "WanderGoal",
      "Event"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.goals.WanderGoal",
      "net.citizensnpcs.api.ai.event.NavigationCompleteEvent"
    ],
    "method": "onFinish",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.WanderGoal#onFinish(net.citizensnpcs.api.ai.event.NavigationCompleteEvent)",
    "class": "net.citizensnpcs.api.ai.goals.WanderGoal"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent",
    "return": "boolean"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDespawnEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDespawnEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Sets the current navigation to a Location destination.",
    "param-names": [
      "Navigator",
      "Target"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.Navigator",
      "org.bukkit.Location"
    ],
    "method": "setTarget",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#setTarget(org.bukkit.Location)",
    "class": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "static": true,
    "method": "values",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.BehaviorStatus#values()",
    "class": "net.citizensnpcs.api.ai.tree.BehaviorStatus",
    "return": "net.citizensnpcs.api.ai.tree.BehaviorStatus[]"
  },
  {
    "method": "getAction",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationStuckEvent#getAction()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationStuckEvent",
    "return": "net.citizensnpcs.api.ai.StuckAction"
  },
  {
    "descr": "An alternative to npc.getEntity().getLocation() that teleports passengers as well.",
    "param-names": [
      "NPC",
      "Location",
      "Cause"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "org.bukkit.Location",
      "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
    ],
    "method": "teleport",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#teleport(org.bukkit.Location,org.bukkit.event.player.PlayerTeleportEvent.TeleportCause)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#NavigatorParameters()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "descr": "Gets the full name of this NPC.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "getFullName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getFullName()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDeathEvent"
  },
  {
    "descr": "The color to glow using Minecraft's scoreboard glowing feature. Should be a ChatColor#name().\\nDEPRECATED: use ScoreboardTrait instead",
    "static": true,
    "field": "GLOWING_COLOR",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#GLOWING_COLOR",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "method": "isShiftClick",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#isShiftClick()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensReloadEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensReloadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Called when an NPC is left-clicked by a player.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLeftClickEvent"
  },
  {
    "descr": "Set the NPC to use Minecraft AI where possible. Note that the NPC may not always behave exactly like a Minecraft\\nmob would because of additional Citizens APIs.",
    "param-names": [
      "NPC",
      "Use"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "boolean"
    ],
    "method": "setUseMinecraftAI",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#setUseMinecraftAI(boolean)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Sets whether an NPC should spawn during server starts or reloads.",
    "param-names": [
      "Spawned",
      "Should Spawn"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Spawned",
      "boolean"
    ],
    "method": "setSpawned",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Spawned#setSpawned(boolean)",
    "class": "net.citizensnpcs.api.trait.trait.Spawned"
  },
  {
    "descr": "Get all registered NPCRegistrys.",
    "param-names": ["CitizensPlugin"],
    "param-types": ["net.citizensnpcs.api.CitizensPlugin"],
    "method": "getNPCRegistries",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#getNPCRegistries()",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "java.lang.Iterable"
  },
  {
    "descr": "Sets the distance (in blocks) after which the NPC will directly teleport to the destination or -1 if disabled.\\nFor example, if the destination teleport margin was 1.5 and the NPC reached 1.5 blocks from the target it would\\ninstantly teleport to the target location.",
    "param-names": [
      "NavigatorParameters",
      "Margin"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "double"
    ],
    "method": "destinationTeleportMargin",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#destinationTeleportMargin(double)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "descr": "An optional filter for specific actions. Default = handle all clicks",
    "param-names": ["ClickHandler"],
    "param-types": ["net.citizensnpcs.api.gui.ClickHandler"],
    "method": "filter",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.ClickHandler#filter()",
    "class": "net.citizensnpcs.api.gui.ClickHandler",
    "return": "org.bukkit.event.inventory.InventoryAction[]"
  },
  {
    "param-names": [
      "Info",
      "Slots",
      "Transitions"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.MenuPattern",
      "java.util.Collection",
      "java.util.Collection"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuPattern#InventoryMenuPattern(net.citizensnpcs.api.gui.MenuPattern,java.util.Collection<net.citizensnpcs.api.gui.InventoryMenuSlot>,java.util.Collection<net.citizensnpcs.api.gui.InventoryMenuTransition>)",
    "class": "net.citizensnpcs.api.gui.InventoryMenuPattern"
  },
  {
    "param-names": ["Messages"],
    "static": true,
    "param-types": ["java.lang.Object[]"],
    "method": "severe",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#severe(java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "param-names": ["Behaviors"],
    "param-types": ["java.util.Collection"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Composite#Composite(java.util.Collection<net.citizensnpcs.api.ai.tree.Behavior>)",
    "class": "net.citizensnpcs.api.ai.tree.Composite"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_LIST",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_LIST",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "method": "getEvent",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#getEvent()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent",
    "return": "org.bukkit.event.entity.EntityDamageEvent"
  },
  {
    "param-names": ["Providers"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.util.Translator.TranslationProvider[]"],
    "method": "addTranslations",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Translator#addTranslations(net.citizensnpcs.api.util.Translator.TranslationProvider...)",
    "class": "net.citizensnpcs.api.util.Translator"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent",
    "return": "boolean"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Damage"],
    "param-types": ["double"],
    "method": "setDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#setDamage(double)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Creates an NPC with the given id. WARNING: may overwrite any existing NPC in the registry with the same\\nID.",
    "param-names": [
      "NPCRegistry",
      "Type",
      "Uuid",
      "Id",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCRegistry",
      "org.bukkit.entity.EntityType",
      "java.util.UUID",
      "int",
      "java.lang.String"
    ],
    "method": "createNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#createNPC(org.bukkit.entity.EntityType,java.util.UUID,int,java.lang.String)",
    "class": "net.citizensnpcs.api.npc.NPCRegistry",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["InventoryMenuPage"],
    "param-types": ["net.citizensnpcs.api.gui.InventoryMenuPage"],
    "method": "getInventoryType",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuPage#getInventoryType()",
    "class": "net.citizensnpcs.api.gui.InventoryMenuPage",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "static": true,
    "field": "HELMET",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot#HELMET",
    "class": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot",
    "return": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot"
  },
  {
    "static": true,
    "field": "PLAYER_SKIN_TEXTURE_PROPERTIES",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#PLAYER_SKIN_TEXTURE_PROPERTIES",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "param-names": ["AStarMachine.AStarState"],
    "param-types": ["net.citizensnpcs.api.astar.AStarMachine.AStarState"],
    "method": "getBestNode",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarMachine.AStarState#getBestNode()",
    "class": "net.citizensnpcs.api.astar.AStarMachine.AStarState",
    "return": "net.citizensnpcs.api.astar.AStarNode"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Stores data at the given key. Data will not persist.",
    "param-names": [
      "MetadataStore",
      "Key",
      "Data"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "net.citizensnpcs.api.npc.NPC.Metadata",
      "java.lang.Object"
    ],
    "method": "set",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#set(net.citizensnpcs.api.npc.NPC.Metadata,java.lang.Object)",
    "class": "net.citizensnpcs.api.npc.MetadataStore"
  },
  {
    "descr": "The slot position to handle clicks for.",
    "param-names": ["ClickHandler"],
    "param-types": ["net.citizensnpcs.api.gui.ClickHandler"],
    "method": "slot",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.ClickHandler#slot()",
    "class": "net.citizensnpcs.api.gui.ClickHandler",
    "return": "int[]"
  },
  {
    "descr": "Shuts down any resources currently being held.",
    "static": true,
    "method": "shutdown",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#shutdown()",
    "class": "net.citizensnpcs.api.CitizensAPI"
  },
  {
    "descr": "Returns the initial cost value when starting from the supplied AStarNode. This represents an initial\\nestimate for reaching the goal state from the start node.",
    "param-names": [
      "AStarGoal",
      "Node"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarGoal",
      "net.citizensnpcs.api.astar.AStarNode"
    ],
    "method": "getInitialCost",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarGoal#getInitialCost(T)",
    "class": "net.citizensnpcs.api.astar.AStarGoal",
    "return": "float"
  },
  {
    "param-names": [
      "Block Source",
      "Cx",
      "Cy",
      "Cz"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.BlockSource",
      "int",
      "int",
      "int"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraph#HPAGraph(net.citizensnpcs.api.astar.pathfinder.BlockSource,int,int,int)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraph"
  },
  {
    "descr": "Creates an despawned NPC using the given ItemStack to configure it if possible.",
    "param-names": [
      "NPCRegistry",
      "Type",
      "Name",
      "Item"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCRegistry",
      "org.bukkit.entity.EntityType",
      "java.lang.String",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "createNPCUsingItem",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#createNPCUsingItem(org.bukkit.entity.EntityType,java.lang.String,org.bukkit.inventory.ItemStack)",
    "class": "net.citizensnpcs.api.npc.NPCRegistry",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "The Minecart item data. Byte.",
    "static": true,
    "field": "MINECART_ITEM_DATA_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#MINECART_ITEM_DATA_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "Saves the in-memory aspects of the storage to disk.",
    "param-names": ["Storage"],
    "param-types": ["net.citizensnpcs.api.util.Storage"],
    "method": "save",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Storage#save()",
    "class": "net.citizensnpcs.api.util.Storage"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLeftClickEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLeftClickEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getResultItem",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getResultItem()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Sample weight indicating low amount of influence from flocking.",
    "static": true,
    "field": "LOW_INFLUENCE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.Flocker#LOW_INFLUENCE",
    "class": "net.citizensnpcs.api.ai.flocking.Flocker",
    "return": "double"
  },
  {
    "descr": "A helper method for using #DEFAULT_PROTECTED_METADATA to set the NPC as protected or not protected from\\ndamage/entity target events. Equivalent to\\nnpc.data().set(NPC.DEFAULT_PROTECTED_METADATA, isProtected);",
    "param-names": [
      "NPC",
      "Is Protected"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "boolean"
    ],
    "method": "setProtected",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#setProtected(boolean)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Whether to use PersistenceLoader to load/save the value of this class.",
    "param-names": ["Persist"],
    "param-types": ["net.citizensnpcs.api.persistence.Persist"],
    "method": "reify",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.Persist#reify()",
    "class": "net.citizensnpcs.api.persistence.Persist",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensPreReloadEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensPreReloadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getDroppedExp",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDeathEvent#getDroppedExp()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDeathEvent",
    "return": "int"
  },
  {
    "param-names": ["NPC.Metadata"],
    "param-types": ["net.citizensnpcs.api.npc.NPC.Metadata"],
    "method": "getKey",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#getKey()",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "Debug File",
      "Debug",
      "Message Colour",
      "Highlight Colour",
      "Error Colour"
    ],
    "static": true,
    "param-types": [
      "java.io.File",
      "boolean",
      "java.lang.String",
      "java.lang.String",
      "java.lang.String"
    ],
    "method": "configure",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#configure(java.io.File,boolean,java.lang.String,java.lang.String,java.lang.String)",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "descr": "For use with patterns.",
    "param-names": ["MenuTransition"],
    "param-types": ["net.citizensnpcs.api.gui.MenuTransition"],
    "method": "pat",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuTransition#pat()",
    "class": "net.citizensnpcs.api.gui.MenuTransition",
    "return": "char"
  },
  {
    "descr": "Gets the selector of the NPC.",
    "method": "getSelector",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSelectEvent#getSelector()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSelectEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "descr": "Sets the name of the default VocalChord for this NPC.",
    "param-names": [
      "Speech",
      "Clazz"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Speech",
      "java.lang.Class"
    ],
    "method": "setDefaultVocalChord",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Speech#setDefaultVocalChord(java.lang.Class<net.citizensnpcs.api.ai.speech.VocalChord>)",
    "class": "net.citizensnpcs.api.trait.trait.Speech"
  },
  {
    "param-names": ["Trait"],
    "param-types": ["net.citizensnpcs.api.trait.Trait"],
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#getNPC()",
    "class": "net.citizensnpcs.api.trait.Trait",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["java.lang.Enum"],
    "method": "compareTo",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#compareTo(E)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "int"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the current navigation to an entity target.",
    "param-names": [
      "Navigator",
      "Target",
      "Aggressive",
      "Strategy"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.Navigator",
      "org.bukkit.entity.Entity",
      "boolean",
      "java.util.function.Function"
    ],
    "method": "setTarget",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#setTarget(org.bukkit.entity.Entity,boolean,java.util.function.Function<net.citizensnpcs.api.ai.NavigatorParameters,net.citizensnpcs.api.ai.PathStrategy>)",
    "class": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "descr": "Clears all current BlockExaminers.",
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "clearExaminers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#clearExaminers()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCAddTraitEvent"
  },
  {
    "param-names": ["BoundingBox"],
    "param-types": ["net.citizensnpcs.api.util.BoundingBox"],
    "field": "maxZ",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.BoundingBox#maxZ",
    "class": "net.citizensnpcs.api.util.BoundingBox",
    "return": "double"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Registers a VocalChord class with the SpeechController, making it available for use within. Requires a\\n'name', which should generally describe the intent of the VocalChord.",
    "param-names": [
      "SpeechFactory",
      "Clazz",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechFactory",
      "java.lang.Class",
      "java.lang.String"
    ],
    "method": "register",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechFactory#register(java.lang.Class<? extends net.citizensnpcs.api.ai.speech.VocalChord>,java.lang.String)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechFactory"
  },
  {
    "param-names": ["BoundingBox"],
    "param-types": ["net.citizensnpcs.api.util.BoundingBox"],
    "field": "minY",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.BoundingBox#minY",
    "class": "net.citizensnpcs.api.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTeleportEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTeleportEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Creates the tag.",
    "param-names": [
      "Name",
      "Type",
      "Value"
    ],
    "param-types": [
      "java.lang.String",
      "java.lang.Class",
      "java.util.List"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.ListTag#ListTag(java.lang.String,java.lang.Class<? extends net.citizensnpcs.api.jnbt.Tag>,java.util.List<? extends net.citizensnpcs.api.jnbt.Tag>)",
    "class": "net.citizensnpcs.api.jnbt.ListTag"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationBeginEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationBeginEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "range",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#range()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "float"
  },
  {
    "descr": "Despawn all NPCs within the registry.",
    "param-names": [
      "NPCRegistry",
      "Reason"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCRegistry",
      "net.citizensnpcs.api.event.DespawnReason"
    ],
    "method": "despawnNPCs",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#despawnNPCs(net.citizensnpcs.api.event.DespawnReason)",
    "class": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "descr": "Removes the given Behavior from rotation.",
    "param-names": [
      "GoalController",
      "Behavior"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.GoalController",
      "net.citizensnpcs.api.ai.tree.Behavior"
    ],
    "method": "removeBehavior",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController#removeBehavior(net.citizensnpcs.api.ai.tree.Behavior)",
    "class": "net.citizensnpcs.api.ai.GoalController"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCommandDispatchEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCommandDispatchEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "getNavigator",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationBeginEvent#getNavigator()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationBeginEvent",
    "return": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "static": true,
    "field": "LEGGINGS",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot#LEGGINGS",
    "class": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot",
    "return": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the type code of a tag class.",
    "param-names": ["Clazz"],
    "static": true,
    "param-types": ["java.lang.Class"],
    "method": "getTypeCode",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTUtils#getTypeCode(java.lang.Class<? extends net.citizensnpcs.api.jnbt.Tag>)",
    "class": "net.citizensnpcs.api.jnbt.NBTUtils",
    "return": "int"
  },
  {
    "param-names": [
      "DataKey",
      "Key",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String",
      "java.lang.Object"
    ],
    "method": "setRaw",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#setRaw(java.lang.String,java.lang.Object)",
    "class": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "descr": "Gets a copy of all current BlockExaminers.",
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "examiners",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#examiners()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer[]"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Tries to attack the supplied target from the supplied attacker. Returns true if the attack was\\nhandled, or false if the default attack strategy should be used.",
    "param-names": [
      "AttackStrategy",
      "Attacker",
      "Target"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.AttackStrategy",
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.entity.LivingEntity"
    ],
    "method": "handle",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.AttackStrategy#handle(org.bukkit.entity.LivingEntity,org.bukkit.entity.LivingEntity)",
    "class": "net.citizensnpcs.api.ai.AttackStrategy",
    "return": "boolean"
  },
  {
    "descr": "Turn the ResultSet into an Object.",
    "param-names": [
      "ResultSetHandler",
      "Rs"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.ResultSetHandler",
      "java.sql.ResultSet"
    ],
    "method": "handle",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.ResultSetHandler#handle(java.sql.ResultSet)",
    "class": "net.citizensnpcs.api.util.ResultSetHandler",
    "return": "java.lang.Object"
  },
  {
    "method": "getCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#getCancelReason()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["InventoryMenuPattern"],
    "param-types": ["net.citizensnpcs.api.gui.InventoryMenuPattern"],
    "method": "getSlots",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuPattern#getSlots()",
    "class": "net.citizensnpcs.api.gui.InventoryMenuPattern",
    "return": "java.util.Collection"
  },
  {
    "method": "getRawSlot",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getRawSlot()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "int"
  },
  {
    "descr": "Removes a Goal from rotation.",
    "param-names": [
      "GoalController",
      "Goal"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.GoalController",
      "net.citizensnpcs.api.ai.Goal"
    ],
    "method": "removeGoal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController#removeGoal(net.citizensnpcs.api.ai.Goal)",
    "class": "net.citizensnpcs.api.ai.GoalController"
  },
  {
    "descr": "Creates the tag.",
    "param-names": [
      "Name",
      "Value"
    ],
    "param-types": [
      "java.lang.String",
      "int"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.IntTag#IntTag(java.lang.String,int)",
    "class": "net.citizensnpcs.api.jnbt.IntTag"
  },
  {
    "descr": "Closes the GUI and all associated viewer inventories.",
    "param-names": ["InventoryMenu"],
    "param-types": ["net.citizensnpcs.api.gui.InventoryMenu"],
    "method": "close",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#close()",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "descr": "The inventory type.",
    "param-names": ["Menu"],
    "param-types": ["net.citizensnpcs.api.gui.Menu"],
    "method": "type",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.Menu#type()",
    "class": "net.citizensnpcs.api.gui.Menu",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Sets the current Citizens implementation.",
    "param-names": ["Implementation"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.CitizensPlugin"],
    "method": "setImplementation",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#setImplementation(net.citizensnpcs.api.CitizensPlugin)",
    "class": "net.citizensnpcs.api.CitizensAPI"
  },
  {
    "param-names": [
      "BlockExaminer",
      "Source",
      "Point"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.BlockExaminer",
      "net.citizensnpcs.api.astar.pathfinder.BlockSource",
      "net.citizensnpcs.api.astar.pathfinder.PathPoint"
    ],
    "method": "getCost",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer#getCost(net.citizensnpcs.api.astar.pathfinder.BlockSource,net.citizensnpcs.api.astar.pathfinder.PathPoint)",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer",
    "return": "float"
  },
  {
    "descr": "Gets the default SpeechController of this NPC.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "getDefaultSpeechController",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getDefaultSpeechController()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "net.citizensnpcs.api.ai.speech.SpeechController"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTeleportEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTeleportEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Loads the NPC from the given DataKey. This reloads all traits, respawns the NPC and sets it up\\nfor execution. Should not be called often.",
    "param-names": [
      "NPC",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "load",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#load(net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Tries to convert the given Entity to a spawned NPC.",
    "param-names": [
      "NPCRegistry",
      "Entity"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCRegistry",
      "org.bukkit.entity.Entity"
    ],
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#getNPC(org.bukkit.entity.Entity)",
    "class": "net.citizensnpcs.api.npc.NPCRegistry",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "The fake NPC scoreboard team name because Minecraft requires a team name. Usually will be a random UUID in\\nString form.",
    "static": true,
    "field": "SCOREBOARD_FAKE_TEAM_NAME",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#SCOREBOARD_FAKE_TEAM_NAME",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensEnableEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensEnableEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "CitizensPlugin",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.CitizensPlugin",
      "java.lang.String"
    ],
    "method": "getNamedNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#getNamedNPCRegistry(java.lang.String)",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "param-names": ["ScriptCompiler.CompileTaskBuilder"],
    "param-types": ["net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder"],
    "method": "beginWithFuture",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder#beginWithFuture()",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder",
    "return": "java.util.concurrent.Future"
  },
  {
    "descr": "Called when an NPC spawns.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSpawnEvent"
  },
  {
    "param-names": ["Owner"],
    "param-types": ["net.citizensnpcs.api.trait.trait.Owner"],
    "method": "getOwnerId",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Owner#getOwnerId()",
    "class": "net.citizensnpcs.api.trait.trait.Owner",
    "return": "java.util.UUID"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByBlockEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["YamlStorage.YamlKey"],
    "param-types": ["net.citizensnpcs.api.util.YamlStorage.YamlKey"],
    "method": "getStorage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.YamlStorage.YamlKey#getStorage()",
    "class": "net.citizensnpcs.api.util.YamlStorage.YamlKey",
    "return": "net.citizensnpcs.api.util.YamlStorage"
  },
  {
    "descr": "Called when the current Citizens implementation is changed",
    "param-names": ["CitizensPlugin"],
    "param-types": ["net.citizensnpcs.api.CitizensPlugin"],
    "method": "onImplementationChanged",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#onImplementationChanged()",
    "class": "net.citizensnpcs.api.CitizensPlugin"
  },
  {
    "param-names": [
      "Owner",
      "Uuid"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Owner",
      "java.util.UUID"
    ],
    "method": "setOwner",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Owner#setOwner(java.util.UUID)",
    "class": "net.citizensnpcs.api.trait.trait.Owner"
  },
  {
    "param-names": ["BlockBreaker.BlockBreakerConfiguration"],
    "param-types": ["net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration"],
    "method": "item",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration#item()",
    "class": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "param-names": [
      "NPC",
      "Target Block",
      "Config"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "org.bukkit.block.Block",
      "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration"
    ],
    "method": "getBlockBreaker",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getBlockBreaker(org.bukkit.block.Block,net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration)",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "net.citizensnpcs.api.npc.BlockBreaker"
  },
  {
    "param-names": [
      "Slot",
      "Transition"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenuSlot",
      "java.lang.Class"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuTransition#InventoryMenuTransition(net.citizensnpcs.api.gui.InventoryMenuSlot,java.lang.Class<? extends net.citizensnpcs.api.gui.InventoryMenuPage>)",
    "class": "net.citizensnpcs.api.gui.InventoryMenuTransition"
  },
  {
    "descr": "The Minecraft sound to play when hurt. String - Minecraft sound name.",
    "static": true,
    "field": "HURT_SOUND",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#HURT_SOUND",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLeftClickEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLeftClickEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "TARGET_DIED",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#TARGET_DIED",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "net.citizensnpcs.api.ai.event.CancelReason"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCreateEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCreateEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the attribute with the given name and value.",
    "param-names": [
      "Script",
      "Name",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.Script",
      "java.lang.String",
      "java.lang.Object"
    ],
    "method": "setAttribute",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.Script#setAttribute(java.lang.String,java.lang.Object)",
    "class": "net.citizensnpcs.api.scripting.Script"
  },
  {
    "descr": "Permanently removes this NPC and all data about it from the registry it's attached to.",
    "param-names": [
      "NPC",
      "Source"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "org.bukkit.command.CommandSender"
    ],
    "method": "destroy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#destroy(org.bukkit.command.CommandSender)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Fetches metadata from the given key.",
    "param-names": [
      "MetadataStore",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "net.citizensnpcs.api.npc.NPC.Metadata"
    ],
    "method": "get",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#<T>get(net.citizensnpcs.api.npc.NPC.Metadata)",
    "class": "net.citizensnpcs.api.npc.MetadataStore",
    "return": "java.lang.Object"
  },
  {
    "static": true,
    "field": "EAST",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.Direction#EAST",
    "class": "net.citizensnpcs.api.hpastar.Direction",
    "return": "net.citizensnpcs.api.hpastar.Direction"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent",
    "return": "boolean"
  },
  {
    "param-names": ["In"],
    "static": true,
    "param-types": ["org.bukkit.Material"],
    "method": "isGate",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#isGate(org.bukkit.Material)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "boolean"
  },
  {
    "descr": "Whether to suppress sounds. Boolean.",
    "static": true,
    "field": "SILENT",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#SILENT",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Sets whether to avoid water while pathfinding",
    "param-names": [
      "NavigatorParameters",
      "Avoid Water"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "boolean"
    ],
    "method": "avoidWater",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#avoidWater(boolean)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "static": true,
    "method": "getPlugin",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#getPlugin()",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "org.bukkit.plugin.Plugin"
  },
  {
    "descr": "Gets whether this NPC is currently spawned.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "isSpawned",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#isSpawned()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "boolean"
  },
  {
    "param-names": ["PathStrategy"],
    "param-types": ["net.citizensnpcs.api.ai.PathStrategy"],
    "method": "getTargetType",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.PathStrategy#getTargetType()",
    "class": "net.citizensnpcs.api.ai.PathStrategy",
    "return": "net.citizensnpcs.api.ai.TargetType"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.LocationPersister#LocationPersister()",
    "class": "net.citizensnpcs.api.persistence.LocationPersister"
  },
  {
    "descr": "Whether to allow swimming. Boolean.",
    "static": true,
    "field": "SWIMMING_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#SWIMMING_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "boolean"
  },
  {
    "method": "hashCode",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#hashCode()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "int"
  },
  {
    "param-names": ["MetadataStore"],
    "param-types": ["net.citizensnpcs.api.npc.MetadataStore"],
    "method": "size",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#size()",
    "class": "net.citizensnpcs.api.npc.MetadataStore",
    "return": "int"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent"
  },
  {
    "param-names": ["DataKey"],
    "param-types": ["net.citizensnpcs.api.util.DataKey"],
    "method": "getIntegerSubKeys",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getIntegerSubKeys()",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "java.lang.Iterable"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.SpigotUtil#SpigotUtil()",
    "class": "net.citizensnpcs.api.util.SpigotUtil"
  },
  {
    "param-names": ["Providers"],
    "static": true,
    "param-types": ["java.util.Collection"],
    "method": "addTranslations",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Translator#addTranslations(java.util.Collection<net.citizensnpcs.api.util.Translator.TranslationProvider>)",
    "class": "net.citizensnpcs.api.util.Translator"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCPushEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCPushEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCollisionEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCollisionEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The Minecart item offset as defined by Minecraft. Minecart#setDisplayBlockOffset(int)",
    "static": true,
    "field": "MINECART_OFFSET",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#MINECART_OFFSET",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Sets the base movement speed of the Navigator. Note that this is mob-specific and may not always be sane.\\nUsing #speedModifier() is preferred.",
    "param-names": [
      "NavigatorParameters",
      "Speed"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "float"
    ],
    "method": "baseSpeed",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#baseSpeed(float)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "descr": "Gets the contents of an NPC's inventory.",
    "param-names": ["Inventory"],
    "param-types": ["net.citizensnpcs.api.trait.trait.Inventory"],
    "method": "getContents",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Inventory#getContents()",
    "class": "net.citizensnpcs.api.trait.trait.Inventory",
    "return": "org.bukkit.inventory.ItemStack[]"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.Direction#valueOf(java.lang.String)",
    "class": "net.citizensnpcs.api.hpastar.Direction",
    "return": "net.citizensnpcs.api.hpastar.Direction"
  },
  {
    "static": true,
    "field": "EMPTY",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.BoundingBox#EMPTY",
    "class": "net.citizensnpcs.api.util.BoundingBox",
    "return": "net.citizensnpcs.api.util.BoundingBox"
  },
  {
    "static": true,
    "method": "getDataFolder",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#getDataFolder()",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "java.io.File"
  },
  {
    "descr": "Whether the NPC is leashable. Boolean.",
    "static": true,
    "field": "LEASH_PROTECTED",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#LEASH_PROTECTED",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Loads persistent metadata from the given DataKey.",
    "param-names": [
      "MetadataStore",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "loadFrom",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#loadFrom(net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.npc.MetadataStore"
  },
  {
    "static": true,
    "field": "REPLACE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#REPLACE",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "net.citizensnpcs.api.ai.event.CancelReason"
  },
  {
    "method": "getTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCAddTraitEvent#getTrait()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCAddTraitEvent",
    "return": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent",
    "return": "java.lang.String"
  },
  {
    "method": "toString",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#toString()",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "java.lang.String"
  },
  {
    "param-names": ["TraitInfo"],
    "param-types": ["net.citizensnpcs.api.trait.TraitInfo"],
    "method": "isDefaultTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitInfo#isDefaultTrait()",
    "class": "net.citizensnpcs.api.trait.TraitInfo",
    "return": "boolean"
  },
  {
    "descr": "FOR INTERNAL USE ONLY: ticks all Runnable callbacks.",
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "run",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#run()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "static": true,
    "field": "WEST",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.Direction#WEST",
    "class": "net.citizensnpcs.api.hpastar.Direction",
    "return": "net.citizensnpcs.api.hpastar.Direction"
  },
  {
    "descr": "Sets the default AttackStrategy.",
    "param-names": [
      "NavigatorParameters",
      "Default Strategy"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "net.citizensnpcs.api.ai.AttackStrategy"
    ],
    "method": "defaultAttackStrategy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#defaultAttackStrategy(net.citizensnpcs.api.ai.AttackStrategy)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "param-names": [
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "int",
      "int",
      "int"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraphNode#HPAGraphNode(int,int,int)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraphNode"
  },
  {
    "param-names": [
      "BlockBreaker.BlockBreakerConfiguration",
      "Callback"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
      "java.lang.Runnable"
    ],
    "method": "callback",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration#callback(java.lang.Runnable)",
    "class": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
    "return": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration"
  },
  {
    "descr": "Loads data from a file or other location.",
    "param-names": ["Storage"],
    "param-types": ["net.citizensnpcs.api.util.Storage"],
    "method": "load",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Storage#load()",
    "class": "net.citizensnpcs.api.util.Storage",
    "return": "boolean"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCommandDispatchEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCommandDispatchEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getEvent",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#getEvent()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent",
    "return": "org.bukkit.event.entity.EntityDamageEvent"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the StuckAction of the parameters.",
    "param-names": [
      "NavigatorParameters",
      "Action"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "net.citizensnpcs.api.ai.StuckAction"
    ],
    "method": "stuckAction",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#stuckAction(net.citizensnpcs.api.ai.StuckAction)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_BYTE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_BYTE",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationStuckEvent"
  },
  {
    "method": "getDeclaringClass",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#getDeclaringClass()",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "java.lang.Class"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getDrops",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDeathEvent#getDrops()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDeathEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Invokes a method on the given object, which should be a return value or scripting object.",
    "param-names": [
      "Script",
      "Instance",
      "Name",
      "Args"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.Script",
      "java.lang.Object",
      "java.lang.String",
      "java.lang.Object[]"
    ],
    "method": "invoke",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.Script#invoke(java.lang.Object,java.lang.String,java.lang.Object...)",
    "class": "net.citizensnpcs.api.scripting.Script",
    "return": "java.lang.Object"
  },
  {
    "descr": "Fetches metadata from the given key.",
    "param-names": [
      "MetadataStore",
      "Key",
      "Def"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "net.citizensnpcs.api.npc.NPC.Metadata",
      "java.lang.Object"
    ],
    "method": "get",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#<T>get(net.citizensnpcs.api.npc.NPC.Metadata,T)",
    "class": "net.citizensnpcs.api.npc.MetadataStore",
    "return": "java.lang.Object"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Spawned#Spawned()",
    "class": "net.citizensnpcs.api.trait.trait.Spawned"
  },
  {
    "param-names": ["BlockBreaker.BlockBreakerConfiguration"],
    "param-types": ["net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration"],
    "method": "callback",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration#callback()",
    "class": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
    "return": "java.lang.Runnable"
  },
  {
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "requiresNameHologram",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#requiresNameHologram()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "boolean"
  },
  {
    "descr": "Returns the reason for the targeting",
    "method": "getReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.EntityTargetNPCEvent#getReason()",
    "event": true,
    "class": "net.citizensnpcs.api.event.EntityTargetNPCEvent",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "NPCSelector",
      "Sender"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCSelector",
      "org.bukkit.command.CommandSender"
    ],
    "method": "getSelected",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCSelector#getSelected(org.bukkit.command.CommandSender)",
    "class": "net.citizensnpcs.api.npc.NPCSelector",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByEntityEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent",
    "return": "boolean"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the name of the VocalChord to be used.",
    "param-names": ["Name"],
    "param-types": ["java.lang.String"],
    "method": "setVocalChord",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent#setVocalChord(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent"
  },
  {
    "param-names": [
      "Condition",
      "If Behavior",
      "Else Behavior"
    ],
    "static": true,
    "param-types": [
      "net.citizensnpcs.api.ai.tree.Condition",
      "net.citizensnpcs.api.ai.tree.Behavior",
      "net.citizensnpcs.api.ai.tree.Behavior"
    ],
    "method": "create",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.IfElse#create(net.citizensnpcs.api.ai.tree.Condition,net.citizensnpcs.api.ai.tree.Behavior,net.citizensnpcs.api.ai.tree.Behavior)",
    "class": "net.citizensnpcs.api.ai.tree.IfElse",
    "return": "net.citizensnpcs.api.ai.tree.IfElse"
  },
  {
    "descr": "Adds a Runnable that will run every tick. Note that removal is not yet supported.",
    "param-names": [
      "NPC",
      "Runnable"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "java.lang.Runnable"
    ],
    "method": "addRunnable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#addRunnable(java.lang.Runnable)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Set the armor from the given slot as the given item.",
    "param-names": [
      "Equipment",
      "Slot",
      "Item"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Equipment",
      "int",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "set",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment#set(int,org.bukkit.inventory.ItemStack)",
    "class": "net.citizensnpcs.api.trait.trait.Equipment"
  },
  {
    "param-names": ["MenuTransitions"],
    "param-types": ["net.citizensnpcs.api.gui.MenuTransitions"],
    "method": "value",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuTransitions#value()",
    "class": "net.citizensnpcs.api.gui.MenuTransitions",
    "return": "net.citizensnpcs.api.gui.MenuTransition[]"
  },
  {
    "descr": "Sets the name of this NPC.",
    "param-names": [
      "NPC",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "java.lang.String"
    ],
    "method": "setName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#setName(java.lang.String)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent"
  },
  {
    "static": true,
    "method": "getNPCRegistries",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#getNPCRegistries()",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "java.lang.Iterable"
  },
  {
    "descr": "Get all of the equipment as a Map.",
    "param-names": ["Equipment"],
    "param-types": ["net.citizensnpcs.api.trait.trait.Equipment"],
    "method": "getEquipmentBySlot",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment#getEquipmentBySlot()",
    "class": "net.citizensnpcs.api.trait.trait.Equipment",
    "return": "java.util.Map"
  },
  {
    "descr": "The number of seconds the combustee should be alight for.\\n\\nThis value will only ever increase the combustion time, not decrease existing combustion times.",
    "param-names": ["Duration"],
    "param-types": ["int"],
    "method": "setDuration",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustEvent#setDuration(int)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustEvent"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenGateEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenGateEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ALWAYS_USE_NAME_HOLOGRAM",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#ALWAYS_USE_NAME_HOLOGRAM",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "param-names": ["Behaviors"],
    "static": true,
    "param-types": ["java.util.Collection"],
    "method": "selecting",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Selector#selecting(java.util.Collection<net.citizensnpcs.api.ai.tree.Behavior>)",
    "class": "net.citizensnpcs.api.ai.tree.Selector",
    "return": "net.citizensnpcs.api.ai.tree.Selector.Builder"
  },
  {
    "param-names": ["Sequence"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Sequence"],
    "method": "retryChildren",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Sequence#retryChildren()",
    "class": "net.citizensnpcs.api.ai.tree.Sequence",
    "return": "boolean"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent"
  },
  {
    "descr": "The save key to use when saving. If not present, the field name will be used instead.\\n\\n@Persist -> root key + field name\\n@Persist(\"\") -> root key + \"\" (or simply root key)\\n@Persist(\"sub\") root key + \"sub\"\\n",
    "param-names": ["Persist"],
    "param-types": ["net.citizensnpcs.api.persistence.Persist"],
    "method": "value",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.Persist#value()",
    "class": "net.citizensnpcs.api.persistence.Persist",
    "return": "java.lang.String"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns whether to examine a given AStarNode.",
    "param-names": [
      "AStarStorage",
      "Neighbour"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarStorage",
      "net.citizensnpcs.api.astar.AStarNode"
    ],
    "method": "shouldExamine",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarStorage#shouldExamine(net.citizensnpcs.api.astar.AStarNode)",
    "class": "net.citizensnpcs.api.astar.AStarStorage",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DISABLE_DEFAULT_STUCK_ACTION_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#DISABLE_DEFAULT_STUCK_ACTION_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTeleportEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTeleportEvent",
    "return": "boolean"
  },
  {
    "descr": "Adds a trait to this NPC.",
    "param-names": [
      "NPC",
      "Trait"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "net.citizensnpcs.api.trait.Trait"
    ],
    "method": "addTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#addTrait(net.citizensnpcs.api.trait.Trait)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Whether to keep chunk loaded. Boolean.",
    "static": true,
    "field": "KEEP_CHUNK_LOADED",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#KEEP_CHUNK_LOADED",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTeleportEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTeleportEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getCommandSender",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent#getCommandSender()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "static": true,
    "field": "INSTANCE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Empty#INSTANCE",
    "class": "net.citizensnpcs.api.ai.tree.Empty",
    "return": "net.citizensnpcs.api.ai.tree.Empty"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getDamaged",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#getDamaged()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets the maximum length of the resultant flocking vector.",
    "param-names": [
      "Flocker",
      "Max Force"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.flocking.Flocker",
      "double"
    ],
    "method": "setMaxForce",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.Flocker#setMaxForce(double)",
    "class": "net.citizensnpcs.api.ai.flocking.Flocker"
  },
  {
    "param-names": ["WanderGoal"],
    "param-types": ["net.citizensnpcs.api.ai.goals.WanderGoal"],
    "method": "pause",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.WanderGoal#pause()",
    "class": "net.citizensnpcs.api.ai.goals.WanderGoal"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.UUIDPersister#UUIDPersister()",
    "class": "net.citizensnpcs.api.persistence.UUIDPersister"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByEntityEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Plugin"],
    "param-types": ["org.bukkit.plugin.Plugin"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.EventRegistrar#EventRegistrar(org.bukkit.plugin.Plugin)",
    "class": "net.citizensnpcs.api.scripting.EventRegistrar"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["GoalController.GoalEntry"],
    "param-types": ["net.citizensnpcs.api.ai.GoalController.GoalEntry"],
    "method": "getPriority",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController.GoalEntry#getPriority()",
    "class": "net.citizensnpcs.api.ai.GoalController.GoalEntry",
    "return": "int"
  },
  {
    "method": "getDeclaringClass",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#getDeclaringClass()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "java.lang.Class"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the reason for cancelling the event. This will be sent to the CommandSender creator to explain why\\nthe NPC cannot be created.",
    "param-names": ["Reason"],
    "param-types": ["java.lang.String"],
    "method": "setCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#setCancelReason(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent"
  },
  {
    "method": "ordinal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#ordinal()",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDespawnEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDespawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getInventory",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getInventory()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCEnderTeleportEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCEnderTeleportEvent"
  },
  {
    "descr": "Whitelist the allowed actions (empty = all allowed).",
    "param-names": ["MenuSlot"],
    "param-types": ["net.citizensnpcs.api.gui.MenuSlot"],
    "method": "filter",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuSlot#filter()",
    "class": "net.citizensnpcs.api.gui.MenuSlot",
    "return": "org.bukkit.event.inventory.InventoryAction[]"
  },
  {
    "param-names": ["Behavior"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Behavior"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.ForwardingBehaviorGoalAdapter#ForwardingBehaviorGoalAdapter(net.citizensnpcs.api.ai.tree.Behavior)",
    "class": "net.citizensnpcs.api.ai.tree.ForwardingBehaviorGoalAdapter"
  },
  {
    "param-names": [
      "Radius",
      "Max Cache Ticks"
    ],
    "param-types": [
      "double",
      "int"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.RadiusNPCFlock#RadiusNPCFlock(double,int)",
    "class": "net.citizensnpcs.api.ai.flocking.RadiusNPCFlock"
  },
  {
    "static": true,
    "method": "values",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState#values()",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState",
    "return": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState[]"
  },
  {
    "descr": "The offset position to start the pattern at.",
    "param-names": ["MenuPattern"],
    "param-types": ["net.citizensnpcs.api.gui.MenuPattern"],
    "method": "offset",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuPattern#offset()",
    "class": "net.citizensnpcs.api.gui.MenuPattern",
    "return": "int[]"
  },
  {
    "param-names": [
      "Owner",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Owner",
      "java.lang.String"
    ],
    "method": "isOwnedBy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Owner#isOwnedBy(java.lang.String)",
    "class": "net.citizensnpcs.api.trait.trait.Owner",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "File",
      "Name"
    ],
    "param-types": [
      "java.io.File",
      "java.lang.String"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.NBTStorage#NBTStorage(java.io.File,java.lang.String)",
    "class": "net.citizensnpcs.api.util.NBTStorage"
  },
  {
    "descr": "Gets the SpeechContext associated with the SpeechEvent.",
    "method": "getContext",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechEvent#getContext()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechEvent",
    "return": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCPushEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCPushEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Whether to suppress sounds. Boolean.",
    "static": true,
    "field": "SILENT_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#SILENT_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLeftClickEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLeftClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "CitizensPlugin",
      "Name",
      "Store"
    ],
    "param-types": [
      "net.citizensnpcs.api.CitizensPlugin",
      "java.lang.String",
      "net.citizensnpcs.api.npc.NPCDataStore"
    ],
    "method": "createNamedNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#createNamedNPCRegistry(java.lang.String,net.citizensnpcs.api.npc.NPCDataStore)",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "descr": "The amount of the itemstack to display.",
    "param-names": ["MenuSlot"],
    "param-types": ["net.citizensnpcs.api.gui.MenuSlot"],
    "method": "amount",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuSlot#amount()",
    "class": "net.citizensnpcs.api.gui.MenuSlot",
    "return": "int"
  },
  {
    "param-names": [
      "World",
      "X",
      "Z",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "float"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.AsyncChunkSnapshotBlockSource#AsyncChunkSnapshotBlockSource(org.bukkit.World,int,int,float)",
    "class": "net.citizensnpcs.api.astar.pathfinder.AsyncChunkSnapshotBlockSource"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCPushEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCPushEvent"
  },
  {
    "param-names": [
      "Name",
      "Obj"
    ],
    "param-types": [
      "java.lang.String",
      "java.lang.Object"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ObjectProvider#ObjectProvider(java.lang.String,java.lang.Object)",
    "class": "net.citizensnpcs.api.scripting.ObjectProvider"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenDoorEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenDoorEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the message to be sent to the bystander. Note: This may differ from the message contained in the\\nSpeechContext, as formatting may have occurred.",
    "param-names": ["Formatted Message"],
    "param-types": ["java.lang.String"],
    "method": "setMessage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechEvent#setMessage(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechEvent"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCollisionEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCollisionEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["AbstractNPC"],
    "param-types": ["net.citizensnpcs.api.npc.AbstractNPC"],
    "method": "update",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.AbstractNPC#update()",
    "class": "net.citizensnpcs.api.npc.AbstractNPC"
  },
  {
    "descr": "Deregisters all NPCs from this registry. #deregister(NPC)",
    "param-names": ["NPCRegistry"],
    "param-types": ["net.citizensnpcs.api.npc.NPCRegistry"],
    "method": "deregisterAll",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#deregisterAll()",
    "class": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets whether or not to use an A* pathfinder defined in AStarMachine for pathfinding.\\nIf this is set to false, then the Minecraft pathfinder will be used, which may or may not be more consistent.\\nNote that certain API features will not be possible if this is set to false - this includes\\n#examiner(BlockExaminer) and #distanceMargin(double).",
    "param-names": [
      "NavigatorParameters",
      "Use"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "boolean"
    ],
    "method": "useNewPathfinder",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#useNewPathfinder(boolean)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "param-names": ["Path"],
    "param-types": ["net.citizensnpcs.api.astar.pathfinder.Path"],
    "method": "getCurrentVector",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.Path#getCurrentVector()",
    "class": "net.citizensnpcs.api.astar.pathfinder.Path",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Returns all currently registered traits, including internal traits",
    "param-names": ["TraitFactory"],
    "param-types": ["net.citizensnpcs.api.trait.TraitFactory"],
    "method": "getRegisteredTraits",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitFactory#getRegisteredTraits()",
    "class": "net.citizensnpcs.api.trait.TraitFactory",
    "return": "java.util.Collection"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByBlockEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getEvent",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDeathEvent#getEvent()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDeathEvent",
    "return": "org.bukkit.event.entity.EntityDeathEvent"
  },
  {
    "method": "getDuration",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByEntityEvent#getDuration()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent",
    "return": "int"
  },
  {
    "descr": "Whether to use Minecraft AI. Boolean.",
    "static": true,
    "field": "USE_MINECRAFT_AI",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#USE_MINECRAFT_AI",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "The dimensions of the menu, if supported.",
    "param-names": ["Menu"],
    "param-types": ["net.citizensnpcs.api.gui.Menu"],
    "method": "dimensions",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.Menu#dimensions()",
    "class": "net.citizensnpcs.api.gui.Menu",
    "return": "int[]"
  },
  {
    "param-names": ["EntityTarget"],
    "param-types": ["net.citizensnpcs.api.ai.EntityTarget"],
    "method": "getTarget",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.EntityTarget#getTarget()",
    "class": "net.citizensnpcs.api.ai.EntityTarget",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "param-names": [
      "InventoryMenuPage",
      "Player"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenuPage",
      "org.bukkit.entity.HumanEntity"
    ],
    "method": "onClose",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuPage#onClose(org.bukkit.entity.HumanEntity)",
    "class": "net.citizensnpcs.api.gui.InventoryMenuPage"
  },
  {
    "descr": "Sets a new ClickType filter that will only accept clicks with the given type. An empty set is equivalent\\nto allowing all click types.",
    "param-names": [
      "InventoryMenuSlot",
      "Filter"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenuSlot",
      "java.util.Collection"
    ],
    "method": "setFilter",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuSlot#setFilter(java.util.Collection<org.bukkit.event.inventory.InventoryAction>)",
    "class": "net.citizensnpcs.api.gui.InventoryMenuSlot"
  },
  {
    "param-names": ["Inventory"],
    "param-types": ["net.citizensnpcs.api.trait.trait.Inventory"],
    "method": "getInventoryView",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Inventory#getInventoryView()",
    "class": "net.citizensnpcs.api.trait.trait.Inventory",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "param-names": [
      "Npcs",
      "Radius"
    ],
    "static": true,
    "param-types": [
      "java.lang.Iterable",
      "double"
    ],
    "method": "createWithRadius",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.GroupNPCFlock#createWithRadius(java.lang.Iterable<net.citizensnpcs.api.npc.NPC>,double)",
    "class": "net.citizensnpcs.api.ai.flocking.GroupNPCFlock",
    "return": "net.citizensnpcs.api.ai.flocking.GroupNPCFlock"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDespawnEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDespawnEvent"
  },
  {
    "descr": "Saves the NPCs to the internal NPCDataStore",
    "param-names": ["NPCRegistry"],
    "param-types": ["net.citizensnpcs.api.npc.NPCRegistry"],
    "method": "saveToStore",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#saveToStore()",
    "class": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "static": true,
    "field": "HAND",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot#HAND",
    "class": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot",
    "return": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Whether to allow swimming. Boolean.",
    "static": true,
    "field": "SWIMMING",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#SWIMMING",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Saves persistent metadata to the given DataKey.",
    "param-names": [
      "MetadataStore",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "saveTo",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#saveTo(net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.npc.MetadataStore"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenGateEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenGateEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Navigator"],
    "param-types": ["net.citizensnpcs.api.ai.Navigator"],
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#getNPC()",
    "class": "net.citizensnpcs.api.ai.Navigator",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": [
      "TraitInfo",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.TraitInfo",
      "java.lang.String"
    ],
    "method": "withName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitInfo#withName(java.lang.String)",
    "class": "net.citizensnpcs.api.trait.TraitInfo",
    "return": "net.citizensnpcs.api.trait.TraitInfo"
  },
  {
    "method": "getTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveTraitEvent#getTrait()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveTraitEvent",
    "return": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "descr": "Whether to save / persist across server restarts. Boolean.",
    "static": true,
    "field": "SHOULD_SAVE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#SHOULD_SAVE",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "static": true,
    "method": "getScriptFolder",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#getScriptFolder()",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "java.io.File"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Represents an event where a Talkable entity speaks at/near a Talkable entity.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechEvent"
  },
  {
    "descr": "Create an inventory menu instance starting at the given page.",
    "param-names": ["Instance"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.gui.InventoryMenuPage"],
    "method": "create",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#create(net.citizensnpcs.api.gui.InventoryMenuPage)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu",
    "return": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "method": "getCreator",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent#getCreator()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCAddTraitEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCAddTraitEvent",
    "return": "boolean"
  },
  {
    "descr": "Creates the tag.",
    "param-names": [
      "Name",
      "Value"
    ],
    "param-types": [
      "java.lang.String",
      "java.util.Map"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.CompoundTag#CompoundTag(java.lang.String,java.util.Map<java.lang.String,net.citizensnpcs.api.jnbt.Tag>)",
    "class": "net.citizensnpcs.api.jnbt.CompoundTag"
  },
  {
    "method": "getClick",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getClick()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.EntityTargetNPCEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.EntityTargetNPCEvent"
  },
  {
    "static": true,
    "field": "WORLD_UNLOAD",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#WORLD_UNLOAD",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "net.citizensnpcs.api.event.DespawnReason"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCVehicleDamageEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCVehicleDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["MenuSlots"],
    "param-types": ["net.citizensnpcs.api.gui.MenuSlots"],
    "method": "value",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuSlots#value()",
    "class": "net.citizensnpcs.api.gui.MenuSlots",
    "return": "net.citizensnpcs.api.gui.MenuSlot[]"
  },
  {
    "param-names": ["BoundingBox"],
    "param-types": ["net.citizensnpcs.api.util.BoundingBox"],
    "field": "maxY",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.BoundingBox#maxY",
    "class": "net.citizensnpcs.api.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Called by a VocalChord when talking near this Talkable Entity to provide a universal method to getting an\\nevent/output.",
    "param-names": [
      "Talkable",
      "Context",
      "Message",
      "Vocal Chord"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.Talkable",
      "net.citizensnpcs.api.ai.speech.SpeechContext",
      "java.lang.String",
      "net.citizensnpcs.api.ai.speech.VocalChord"
    ],
    "method": "talkNear",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.Talkable#talkNear(net.citizensnpcs.api.ai.speech.SpeechContext,java.lang.String,net.citizensnpcs.api.ai.speech.VocalChord)",
    "class": "net.citizensnpcs.api.ai.speech.Talkable"
  },
  {
    "descr": "Runs the machine fully until the iteration limit has been exceeded. This will use the supplied goal and start to\\ngenerate neighbours until the goal state has been reached using the A* algorithm.",
    "param-names": [
      "AStarMachine",
      "Goal",
      "Start",
      "Iterations"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarMachine",
      "net.citizensnpcs.api.astar.AStarGoal",
      "net.citizensnpcs.api.astar.AStarNode",
      "int"
    ],
    "method": "runFully",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarMachine#runFully(net.citizensnpcs.api.astar.AStarGoal<N>,N,int)",
    "class": "net.citizensnpcs.api.astar.AStarMachine",
    "return": "net.citizensnpcs.api.astar.Plan"
  },
  {
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCancelEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCancelEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": [
      "EventRegistrar.Events",
      "Event Class",
      "Handler"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.EventRegistrar.Events",
      "java.lang.Class",
      "net.citizensnpcs.api.scripting.EventHandler"
    ],
    "method": "on",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.EventRegistrar.Events#on(java.lang.Class<? extends org.bukkit.event.Event>,net.citizensnpcs.api.scripting.EventHandler)",
    "class": "net.citizensnpcs.api.scripting.EventRegistrar.Events"
  },
  {
    "param-names": ["AStarSolution"],
    "param-types": ["net.citizensnpcs.api.hpastar.AStarSolution"],
    "method": "convertToVectors",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.AStarSolution#convertToVectors()",
    "class": "net.citizensnpcs.api.hpastar.AStarSolution",
    "return": "java.util.Collection"
  },
  {
    "method": "getKey",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent#getKey()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent",
    "return": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRightClickEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRightClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sends the speechController's NPC and SpeechContext to the specified VocalChord.",
    "param-names": [
      "SpeechController",
      "Message",
      "Vocal Chord Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechController",
      "net.citizensnpcs.api.ai.speech.SpeechContext",
      "java.lang.String"
    ],
    "method": "speak",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechController#speak(net.citizensnpcs.api.ai.speech.SpeechContext,java.lang.String)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechController"
  },
  {
    "method": "getWhoClicked",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getWhoClicked()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "NORTH",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.Direction#NORTH",
    "class": "net.citizensnpcs.api.hpastar.Direction",
    "return": "net.citizensnpcs.api.hpastar.Direction"
  },
  {
    "param-names": [
      "DataKey",
      "Key",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String",
      "boolean"
    ],
    "method": "getBoolean",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getBoolean(java.lang.String,boolean)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "boolean"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.EntityTargetNPCEvent#getEntity()",
    "event": true,
    "class": "net.citizensnpcs.api.event.EntityTargetNPCEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets the EntityType of this NPC. Currently only accepts living entity types, with scope for\\nadditional types in the future. The NPC will respawned if currently spawned, or will remain despawned otherwise.",
    "param-names": [
      "NPC",
      "Type"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "org.bukkit.entity.EntityType"
    ],
    "method": "setBukkitEntityType",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#setBukkitEntityType(org.bukkit.entity.EntityType)",
    "class": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": [
      "DataKey",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String"
    ],
    "method": "getDouble",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getDouble(java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "double"
  },
  {
    "param-names": [
      "DataKey",
      "Key",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String",
      "java.lang.String"
    ],
    "method": "setString",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#setString(java.lang.String,java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "descr": "Despawns this NPC.",
    "param-names": [
      "NPC",
      "Reason"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "net.citizensnpcs.api.event.DespawnReason"
    ],
    "method": "despawn",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#despawn(net.citizensnpcs.api.event.DespawnReason)",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "boolean"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechEvent"
  },
  {
    "param-names": [
      "File",
      "Header"
    ],
    "param-types": [
      "java.io.File",
      "java.lang.String"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.YamlStorage#YamlStorage(java.io.File,java.lang.String)",
    "class": "net.citizensnpcs.api.util.YamlStorage"
  },
  {
    "param-names": [
      "DataKey",
      "Key",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String",
      "long"
    ],
    "method": "getLong",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getLong(java.lang.String,long)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "long"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenDoorEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenDoorEvent",
    "return": "boolean"
  },
  {
    "param-names": [
      "HPAGraph",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPAGraph",
      "int",
      "int",
      "int"
    ],
    "method": "walkable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraph#walkable(int,int,int)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraph",
    "return": "boolean"
  },
  {
    "descr": "Whether the NPC can damage other Entities. Boolean.",
    "static": true,
    "field": "DAMAGE_OTHERS",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#DAMAGE_OTHERS",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Whether to use Minecraft AI. Boolean.",
    "static": true,
    "field": "USE_MINECRAFT_AI_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#USE_MINECRAFT_AI_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "method": "getDuration",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByBlockEvent#getDuration()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent",
    "return": "int"
  },
  {
    "param-names": ["Damage"],
    "param-types": ["double"],
    "method": "setDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#setDamage(double)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent"
  },
  {
    "param-names": ["AStarStorage"],
    "param-types": ["net.citizensnpcs.api.astar.AStarStorage"],
    "method": "getBestNode",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarStorage#getBestNode()",
    "class": "net.citizensnpcs.api.astar.AStarStorage",
    "return": "net.citizensnpcs.api.astar.AStarNode"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensReloadEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensReloadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCEnderTeleportEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCEnderTeleportEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["File"],
    "param-types": ["java.io.File"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.NBTStorage#NBTStorage(java.io.File)",
    "class": "net.citizensnpcs.api.util.NBTStorage"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveTraitEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveTraitEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Whether to save / persist across server restarts. Boolean.",
    "static": true,
    "field": "SHOULD_SAVE_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#SHOULD_SAVE_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_LONG",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_LONG",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "param-names": [
      "SkullMetaProvider",
      "Meta"
    ],
    "param-types": [
      "net.citizensnpcs.api.SkullMetaProvider",
      "org.bukkit.inventory.meta.SkullMeta"
    ],
    "method": "getTexture",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.SkullMetaProvider#getTexture(org.bukkit.inventory.meta.SkullMeta)",
    "class": "net.citizensnpcs.api.SkullMetaProvider",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["java.lang.Object"],
    "method": "compareTo",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#compareTo(T)",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "int"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "callbacks",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#callbacks()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "java.lang.Iterable"
  },
  {
    "static": true,
    "field": "STUCK",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#STUCK",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "net.citizensnpcs.api.ai.event.CancelReason"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.EntityTargetNPCEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.EntityTargetNPCEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_SHORT",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_SHORT",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "method": "getDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#getDamage()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent",
    "return": "double"
  },
  {
    "method": "getTraitClass",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent#getTraitClass()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent",
    "return": "java.lang.Class"
  },
  {
    "method": "isRightClick",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#isRightClick()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent"
  },
  {
    "param-names": ["Navigator"],
    "param-types": ["net.citizensnpcs.api.ai.Navigator"],
    "method": "getTargetType",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#getTargetType()",
    "class": "net.citizensnpcs.api.ai.Navigator",
    "return": "net.citizensnpcs.api.ai.TargetType"
  },
  {
    "descr": "Returns the current Location being navigated towards - this is not necessarily permanent and may change,\\nfor example when pathing towards a moving Entity. May return null.",
    "param-names": ["Navigator"],
    "param-types": ["net.citizensnpcs.api.ai.Navigator"],
    "method": "getTargetAsLocation",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#getTargetAsLocation()",
    "class": "net.citizensnpcs.api.ai.Navigator",
    "return": "org.bukkit.Location"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCEnderTeleportEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCEnderTeleportEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenDoorEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenDoorEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "static": true,
    "field": "CHUNK_UNLOAD",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#CHUNK_UNLOAD",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "net.citizensnpcs.api.event.DespawnReason"
  },
  {
    "descr": "The Minecraft ambient sound played. String - Minecraft sound name",
    "static": true,
    "field": "AMBIENT_SOUND",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#AMBIENT_SOUND",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "The final message to be sent to the bystander. Note: This may differ from the message contained in the\\nSpeechContext, as formatting may have occurred.",
    "method": "getMessage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent#getMessage()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCancelEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCancelEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Damage"],
    "param-types": ["int"],
    "method": "setDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#setDamage(int)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent"
  },
  {
    "param-names": [
      "Location",
      "Radius"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.Location",
      "int"
    ],
    "method": "findValidLocationAbove",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#findValidLocationAbove(org.bukkit.Location,int)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "org.bukkit.Location"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCEnderTeleportEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCEnderTeleportEvent",
    "return": "boolean"
  },
  {
    "param-names": ["TargetNearbyEntityGoal.Builder"],
    "param-types": ["net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder"],
    "method": "build",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder#build()",
    "class": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder",
    "return": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal"
  },
  {
    "param-names": ["Behaviors"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.ai.tree.Behavior[]"],
    "method": "createSequence",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Sequence#createSequence(net.citizensnpcs.api.ai.tree.Behavior...)",
    "class": "net.citizensnpcs.api.ai.tree.Sequence",
    "return": "net.citizensnpcs.api.ai.tree.Sequence"
  },
  {
    "descr": "The lore of the inventory item, newline-delimited.",
    "param-names": ["MenuSlot"],
    "param-types": ["net.citizensnpcs.api.gui.MenuSlot"],
    "method": "lore",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuSlot#lore()",
    "class": "net.citizensnpcs.api.gui.MenuSlot",
    "return": "java.lang.String"
  },
  {
    "param-names": ["HPAGraph"],
    "param-types": ["net.citizensnpcs.api.hpastar.HPAGraph"],
    "field": "clusters",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraph#clusters",
    "class": "net.citizensnpcs.api.hpastar.HPAGraph",
    "return": "java.util.List"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCloneEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCloneEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent"
  },
  {
    "param-names": ["Path"],
    "param-types": ["net.citizensnpcs.api.astar.pathfinder.Path"],
    "method": "debug",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.Path#debug()",
    "class": "net.citizensnpcs.api.astar.pathfinder.Path"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_END",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_END",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "descr": "Gets the vector represented by this point",
    "param-names": ["PathPoint"],
    "param-types": ["net.citizensnpcs.api.astar.pathfinder.PathPoint"],
    "method": "getVector",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.PathPoint#getVector()",
    "class": "net.citizensnpcs.api.astar.pathfinder.PathPoint",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Returns whether the metadata exists.",
    "param-names": [
      "MetadataStore",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "net.citizensnpcs.api.npc.NPC.Metadata"
    ],
    "method": "has",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#has(net.citizensnpcs.api.npc.NPC.Metadata)",
    "class": "net.citizensnpcs.api.npc.MetadataStore",
    "return": "boolean"
  },
  {
    "descr": "The pattern string. 0 = AIR",
    "param-names": ["MenuPattern"],
    "param-types": ["net.citizensnpcs.api.gui.MenuPattern"],
    "method": "value",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuPattern#value()",
    "class": "net.citizensnpcs.api.gui.MenuPattern",
    "return": "java.lang.String"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent"
  },
  {
    "descr": "Sets the AttackStrategy for use when attacking entity targets.",
    "param-names": [
      "NavigatorParameters",
      "Strategy"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "net.citizensnpcs.api.ai.AttackStrategy"
    ],
    "method": "attackStrategy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#attackStrategy(net.citizensnpcs.api.ai.AttackStrategy)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Speech#Speech()",
    "class": "net.citizensnpcs.api.trait.trait.Speech"
  },
  {
    "param-names": ["Block"],
    "static": true,
    "param-types": ["org.bukkit.block.Block"],
    "method": "isLiquidOrInLiquid",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#isLiquidOrInLiquid(org.bukkit.block.Block)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "boolean"
  },
  {
    "param-names": ["SpeechContext"],
    "param-types": ["net.citizensnpcs.api.ai.speech.SpeechContext"],
    "method": "size",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#size()",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext",
    "return": "int"
  },
  {
    "descr": "Gets the location where the NPC was spawned.",
    "method": "getLocation",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSpawnEvent#getLocation()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSpawnEvent",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "UNPASSABLE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState#UNPASSABLE",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState",
    "return": "net.citizensnpcs.api.astar.pathfinder.BlockExaminer.PassableState"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent",
    "return": "boolean"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByBlockEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent",
    "return": "boolean"
  },
  {
    "method": "getCommandSender",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent#getCommandSender()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "descr": "Sets the delay between attacks. When attacking a target using an aggressive target strategy, the NPC waits for a\\ncertain number of ticks between attacks to avoid spamming damage to the target. This determines the number of\\nticks to wait.",
    "param-names": [
      "NavigatorParameters",
      "Ticks"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "int"
    ],
    "method": "attackDelayTicks",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#attackDelayTicks(int)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "descr": "Called when the Navigator reports that it is stuck.",
    "param-names": [
      "StuckAction",
      "Npc",
      "Navigator"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.StuckAction",
      "net.citizensnpcs.api.npc.NPC",
      "net.citizensnpcs.api.ai.Navigator"
    ],
    "method": "run",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.StuckAction#run(net.citizensnpcs.api.npc.NPC,net.citizensnpcs.api.ai.Navigator)",
    "class": "net.citizensnpcs.api.ai.StuckAction",
    "return": "boolean"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent",
    "return": "boolean"
  },
  {
    "param-names": ["BlockBreaker.BlockBreakerConfiguration"],
    "param-types": ["net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration"],
    "method": "blockStrengthModifier",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration#blockStrengthModifier()",
    "class": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
    "return": "float"
  },
  {
    "descr": "Whether to sneak. Boolean.",
    "static": true,
    "field": "SNEAKING",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#SNEAKING",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Creates an instance of the given class using the default constructor and loads it using\\n#load(Object, DataKey). Will return null if an exception occurs.",
    "param-names": [
      "Clazz",
      "Root"
    ],
    "static": true,
    "param-types": [
      "java.lang.Class",
      "net.citizensnpcs.api.util.DataKey"
    ],
    "method": "load",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.PersistenceLoader#<T>load(java.lang.Class<? extends T>,net.citizensnpcs.api.util.DataKey)",
    "class": "net.citizensnpcs.api.persistence.PersistenceLoader",
    "return": "java.lang.Object"
  },
  {
    "param-names": ["TraitInfo"],
    "param-types": ["net.citizensnpcs.api.trait.TraitInfo"],
    "method": "tryCreateInstance",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitInfo#<T>tryCreateInstance()",
    "class": "net.citizensnpcs.api.trait.TraitInfo",
    "return": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "param-names": [
      "Location",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.Location",
      "float"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.ChunkBlockSource#ChunkBlockSource(org.bukkit.Location,float)",
    "class": "net.citizensnpcs.api.astar.pathfinder.ChunkBlockSource"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the name of this NPC with color codes stripped.",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "getName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getName()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "method": "getCause",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#getCause()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "ENTITY",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.TargetType#ENTITY",
    "class": "net.citizensnpcs.api.ai.TargetType",
    "return": "net.citizensnpcs.api.ai.TargetType"
  },
  {
    "descr": "Calls #finish() and removes the Goal from the list of possible goals to execute.",
    "param-names": ["GoalSelector"],
    "param-types": ["net.citizensnpcs.api.ai.GoalSelector"],
    "method": "finishAndRemove",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalSelector#finishAndRemove()",
    "class": "net.citizensnpcs.api.ai.GoalSelector"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSpawnEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSpawnEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "static": true,
    "field": "PLAYER_SKIN_UUID_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#PLAYER_SKIN_UUID_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the update path rate, in ticks (default 20). Mainly used for target following at this point - the NPC will\\nrecalculate its path to the target every rate ticks.",
    "param-names": [
      "NavigatorParameters",
      "Rate"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "int"
    ],
    "method": "updatePathRate",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#updatePathRate(int)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCancelEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCancelEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationBeginEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationBeginEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "The number of seconds the combustee should be alight for.\\n\\nThis value will only ever increase the combustion time, not decrease existing combustion times.",
    "param-names": ["Duration"],
    "param-types": ["int"],
    "method": "setDuration",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByEntityEvent#setDuration(int)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent"
  },
  {
    "param-names": [
      "InventoryMenuSlot",
      "Item",
      "Description"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenuSlot",
      "org.bukkit.inventory.ItemStack",
      "java.lang.String"
    ],
    "method": "setItemStack",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuSlot#setItemStack(org.bukkit.inventory.ItemStack,java.lang.String)",
    "class": "net.citizensnpcs.api.gui.InventoryMenuSlot"
  },
  {
    "param-names": ["Selector.Builder"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Selector.Builder"],
    "method": "build",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Selector.Builder#build()",
    "class": "net.citizensnpcs.api.ai.tree.Selector.Builder",
    "return": "net.citizensnpcs.api.ai.tree.Selector"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenDoorEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenDoorEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["DataKey"],
    "param-types": ["net.citizensnpcs.api.util.DataKey"],
    "method": "getSubKeys",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getSubKeys()",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "java.lang.Iterable"
  },
  {
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Fetches the attribute with the specified name, or null if not found. The returned attribute can be user-stored or\\na script variable, such as a function. Script objects should be accessed through\\nScript#invoke(String, Object...)",
    "param-names": [
      "Script",
      "Name"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.Script",
      "java.lang.String"
    ],
    "method": "getAttribute",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.Script#getAttribute(java.lang.String)",
    "class": "net.citizensnpcs.api.scripting.Script",
    "return": "java.lang.Object"
  },
  {
    "static": true,
    "method": "values",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot#values()",
    "class": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot",
    "return": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot[]"
  },
  {
    "param-names": ["Behavior"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.ai.tree.Behavior"],
    "method": "create",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.BehaviorGoalAdapter#create(net.citizensnpcs.api.ai.tree.Behavior)",
    "class": "net.citizensnpcs.api.ai.tree.BehaviorGoalAdapter",
    "return": "net.citizensnpcs.api.ai.Goal"
  },
  {
    "descr": "Sets the talker.",
    "param-names": [
      "SpeechContext",
      "Entity"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechContext",
      "org.bukkit.entity.Entity"
    ],
    "method": "setTalker",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#setTalker(org.bukkit.entity.Entity)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "method": "describeConstable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#describeConstable()",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "java.util.Optional"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechEvent",
    "return": "boolean"
  },
  {
    "param-names": [
      "DataKey",
      "Key",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String",
      "double"
    ],
    "method": "setDouble",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#setDouble(java.lang.String,double)",
    "class": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "descr": "The Minecraft ambient sound played. String - Minecraft sound name",
    "static": true,
    "field": "AMBIENT_SOUND_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#AMBIENT_SOUND_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "The Integer delay to respawn in ticks after death. Only works if non-zero.",
    "static": true,
    "field": "RESPAWN_DELAY",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#RESPAWN_DELAY",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "static": true,
    "field": "REMOVAL",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#REMOVAL",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "net.citizensnpcs.api.event.DespawnReason"
  },
  {
    "descr": "Whether to remove players from the player list. Boolean defaults to true.",
    "static": true,
    "field": "REMOVE_FROM_PLAYERLIST_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#REMOVE_FROM_PLAYERLIST_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "Sends the speechController's NPC and SpeechContext to the current default VocalChord for\\nthe NPC. If none, the default VocalChord is used.",
    "param-names": [
      "SpeechController",
      "Message"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechController",
      "net.citizensnpcs.api.ai.speech.SpeechContext"
    ],
    "method": "speak",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechController#speak(net.citizensnpcs.api.ai.speech.SpeechContext)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechController"
  },
  {
    "descr": "Sets the message to be sent to the bystander. Note: This may differ from the message contained in the\\nSpeechContext, as formatting may have occurred.",
    "param-names": ["Formatted Message"],
    "param-types": ["java.lang.String"],
    "method": "setMessage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent#setMessage(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent"
  },
  {
    "descr": "Updates the plan. Should be run ideally every tick.",
    "param-names": [
      "Plan",
      "Agent"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.Plan",
      "net.citizensnpcs.api.astar.Agent"
    ],
    "method": "update",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.Plan#update(net.citizensnpcs.api.astar.Agent)",
    "class": "net.citizensnpcs.api.astar.Plan"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByBlockEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByBlockEvent"
  },
  {
    "method": "name",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#name()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "java.lang.String"
  },
  {
    "descr": "Closes the GUI for just a specific Player.",
    "param-names": [
      "InventoryMenu",
      "Player"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu",
      "org.bukkit.entity.Player"
    ],
    "method": "close",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#close(org.bukkit.entity.Player)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent",
    "return": "boolean"
  },
  {
    "descr": "Whether the NPC can damage other Entities. Boolean.",
    "static": true,
    "field": "DAMAGE_OTHERS_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#DAMAGE_OTHERS_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Paginator#Paginator()",
    "class": "net.citizensnpcs.api.util.Paginator"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDeathEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDeathEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationBeginEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationBeginEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDespawnEvent#getReason()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDespawnEvent",
    "return": "net.citizensnpcs.api.event.DespawnReason"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCommandDispatchEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCommandDispatchEvent",
    "return": "boolean"
  },
  {
    "method": "describeConstable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#describeConstable()",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "java.util.Optional"
  },
  {
    "param-names": ["String"],
    "static": true,
    "param-types": ["java.lang.Object"],
    "method": "wrapHeader",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Paginator#wrapHeader(java.lang.Object)",
    "class": "net.citizensnpcs.api.util.Paginator",
    "return": "java.lang.String"
  },
  {
    "method": "getMeta",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent#getMeta()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent",
    "return": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCAddTraitEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCAddTraitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["BoundingBox"],
    "param-types": ["net.citizensnpcs.api.util.BoundingBox"],
    "field": "maxX",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.BoundingBox#maxX",
    "class": "net.citizensnpcs.api.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Called when an NPC is spawned. NPC#getEntity() will return null until this is called. This is\\nalso called onAttach when the NPC is already spawned.",
    "param-names": ["Trait"],
    "param-types": ["net.citizensnpcs.api.trait.Trait"],
    "method": "onSpawn",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#onSpawn()",
    "class": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "descr": "Whether to remove players from the player list. Boolean defaults to true.",
    "static": true,
    "field": "REMOVE_FROM_PLAYERLIST",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#REMOVE_FROM_PLAYERLIST",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "param-names": ["CitizensPlugin"],
    "param-types": ["net.citizensnpcs.api.CitizensPlugin"],
    "method": "getSkullMetaProvider",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#getSkullMetaProvider()",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "net.citizensnpcs.api.SkullMetaProvider"
  },
  {
    "method": "ordinal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#ordinal()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "int"
  },
  {
    "param-names": [
      "EventHandler",
      "Event"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.EventHandler",
      "org.bukkit.event.Event"
    ],
    "method": "handle",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.EventHandler#handle(org.bukkit.event.Event)",
    "class": "net.citizensnpcs.api.scripting.EventHandler"
  },
  {
    "descr": "Invokes a root-level method using the method name and args and returns the result.",
    "param-names": [
      "Script",
      "Name",
      "Args"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.Script",
      "java.lang.String",
      "java.lang.Object[]"
    ],
    "method": "invoke",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.Script#invoke(java.lang.String,java.lang.Object...)",
    "class": "net.citizensnpcs.api.scripting.Script",
    "return": "java.lang.Object"
  },
  {
    "param-names": [
      "Sender",
      "Key",
      "Msg"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.command.CommandSender",
      "java.lang.String",
      "java.lang.Object[]"
    ],
    "method": "sendErrorTr",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#sendErrorTr(org.bukkit.command.CommandSender,java.lang.String,java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "descr": "Removes any previously created NPCRegistry stored under the given name.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "removeNamedNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#removeNamedNPCRegistry(java.lang.String)",
    "class": "net.citizensnpcs.api.CitizensAPI"
  },
  {
    "descr": "Returns whether the behavior is ready to run. Note this is called once when deciding whether to start\\nexecution of a leaf node. The actual execution status is determined by the return value of Behavior#run()\\nwhich is repeatedly called by the executing node.",
    "param-names": ["Behavior"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Behavior"],
    "method": "shouldExecute",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Behavior#shouldExecute()",
    "class": "net.citizensnpcs.api.ai.tree.Behavior",
    "return": "boolean"
  },
  {
    "param-names": [
      "Wrapping",
      "Condition"
    ],
    "static": true,
    "param-types": [
      "net.citizensnpcs.api.ai.tree.Behavior",
      "net.citizensnpcs.api.ai.tree.Condition"
    ],
    "method": "createWithCondition",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Loop#createWithCondition(net.citizensnpcs.api.ai.tree.Behavior,net.citizensnpcs.api.ai.tree.Condition)",
    "class": "net.citizensnpcs.api.ai.tree.Loop",
    "return": "net.citizensnpcs.api.ai.tree.Loop"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Returns the Block that was opened.",
    "method": "getDoor",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenDoorEvent#getDoor()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenDoorEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Sets whether to retry child Behaviors when they return BehaviorStatus#FAILURE.",
    "param-names": [
      "Selector.Builder",
      "B"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.tree.Selector.Builder",
      "boolean"
    ],
    "method": "retryChildren",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Selector.Builder#retryChildren(boolean)",
    "class": "net.citizensnpcs.api.ai.tree.Selector.Builder",
    "return": "net.citizensnpcs.api.ai.tree.Selector.Builder"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCPushEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCPushEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PLAYER_SKIN_USE_LATEST",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#PLAYER_SKIN_USE_LATEST",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "method": "getView",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getView()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Called when the trait has been attached to an NPC. #npc will be null until this is called.",
    "param-names": ["Trait"],
    "param-types": ["net.citizensnpcs.api.trait.Trait"],
    "method": "onAttach",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.Trait#onAttach()",
    "class": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "descr": "Gets the talker.",
    "param-names": ["SpeechContext"],
    "param-types": ["net.citizensnpcs.api.ai.speech.SpeechContext"],
    "method": "getTalker",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#getTalker()",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext",
    "return": "net.citizensnpcs.api.ai.speech.Talkable"
  },
  {
    "param-names": ["AStarMachine.AStarState"],
    "param-types": ["net.citizensnpcs.api.astar.AStarMachine.AStarState"],
    "method": "isEmpty",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarMachine.AStarState#isEmpty()",
    "class": "net.citizensnpcs.api.astar.AStarMachine.AStarState",
    "return": "boolean"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveTraitEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveTraitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCancelEvent"
  },
  {
    "param-names": ["Composite"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Composite"],
    "method": "getBehaviors",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Composite#getBehaviors()",
    "class": "net.citizensnpcs.api.ai.tree.Composite",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the default NPCRegistry.",
    "param-names": ["CitizensPlugin"],
    "param-types": ["net.citizensnpcs.api.CitizensPlugin"],
    "method": "getNPCRegistry",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#getNPCRegistry()",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "param-names": [
      "BlockBreaker.BlockBreakerConfiguration",
      "Modifier"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
      "float"
    ],
    "method": "blockStrengthModifier",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration#blockStrengthModifier(float)",
    "class": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration",
    "return": "net.citizensnpcs.api.npc.BlockBreaker.BlockBreakerConfiguration"
  },
  {
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "getNavigator",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getNavigator()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "descr": "Sets the reason for cancelling the event. This will be sent to the CommandSender creator to explain why\\nthe NPC cannot be created.",
    "param-names": ["Reason"],
    "param-types": ["java.lang.String"],
    "method": "setCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#setCancelReason(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent"
  },
  {
    "descr": "Creates the tag.",
    "param-names": [
      "Name",
      "Value"
    ],
    "param-types": [
      "java.lang.String",
      "short"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.ShortTag#ShortTag(java.lang.String,short)",
    "class": "net.citizensnpcs.api.jnbt.ShortTag"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.DoorExaminer#DoorExaminer()",
    "class": "net.citizensnpcs.api.astar.pathfinder.DoorExaminer"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSpawnEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "PREFIX",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Translator#PREFIX",
    "class": "net.citizensnpcs.api.util.Translator",
    "return": "java.lang.String"
  },
  {
    "method": "getEvent",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCVehicleDamageEvent#getEvent()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCVehicleDamageEvent",
    "return": "org.bukkit.event.vehicle.VehicleDamageEvent"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "boolean"
  },
  {
    "param-names": [
      "DataKey",
      "Key",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String",
      "long"
    ],
    "method": "setLong",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#setLong(java.lang.String,long)",
    "class": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "param-names": [
      "TargetNearbyEntityGoal.Builder",
      "Aggressive"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder",
      "boolean"
    ],
    "method": "aggressive",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder#aggressive(boolean)",
    "class": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder",
    "return": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder"
  },
  {
    "param-names": ["Storage"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.util.Storage"],
    "method": "create",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.SimpleNPCDataStore#create(net.citizensnpcs.api.util.Storage)",
    "class": "net.citizensnpcs.api.npc.SimpleNPCDataStore",
    "return": "net.citizensnpcs.api.npc.NPCDataStore"
  },
  {
    "param-names": ["CitizensPlugin"],
    "param-types": ["net.citizensnpcs.api.CitizensPlugin"],
    "method": "getDefaultNPCSelector",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensPlugin#getDefaultNPCSelector()",
    "class": "net.citizensnpcs.api.CitizensPlugin",
    "return": "net.citizensnpcs.api.npc.NPCSelector"
  },
  {
    "descr": "Sets the movement speed modifier of the Navigator. This is a percentage modifier that alters the movement\\nspeed returned in #speed().",
    "param-names": [
      "NavigatorParameters",
      "Percent"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "float"
    ],
    "method": "speedModifier",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#speedModifier(float)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "param-names": [
      "TargetNearbyEntityGoal.Builder",
      "Radius"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder",
      "double"
    ],
    "method": "radius",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder#radius(double)",
    "class": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder",
    "return": "net.citizensnpcs.api.ai.goals.TargetNearbyEntityGoal.Builder"
  },
  {
    "param-names": [
      "X",
      "Z"
    ],
    "param-types": [
      "int",
      "int"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.ClusterNode#ClusterNode(int,int)",
    "class": "net.citizensnpcs.api.hpastar.ClusterNode"
  },
  {
    "param-names": ["TraitInfo"],
    "param-types": ["net.citizensnpcs.api.trait.TraitInfo"],
    "method": "getTraitClass",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitInfo#getTraitClass()",
    "class": "net.citizensnpcs.api.trait.TraitInfo",
    "return": "java.lang.Class"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandDetachEvent"
  },
  {
    "param-names": [
      "Talker",
      "Message",
      "Recipient"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "java.lang.String",
      "org.bukkit.entity.LivingEntity"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#SpeechContext(net.citizensnpcs.api.npc.NPC,java.lang.String,org.bukkit.entity.LivingEntity)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "COMMAND",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#COMMAND",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "net.citizensnpcs.api.event.SpawnReason"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent"
  },
  {
    "param-names": [
      "HPAGraphNode",
      "Dest"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPAGraphNode",
      "net.citizensnpcs.api.hpastar.HPAGraphNode"
    ],
    "method": "distance",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraphNode#distance(net.citizensnpcs.api.hpastar.HPAGraphNode)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraphNode",
    "return": "double"
  },
  {
    "descr": "The packet update delay. Integer defaults to setting value.",
    "static": true,
    "field": "PACKET_UPDATE_DELAY",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#PACKET_UPDATE_DELAY",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Sets the pathfinding range in blocks. The pathfinding range determines how far away the Navigator will\\nattempt to pathfind before giving up to save computation.",
    "param-names": [
      "NavigatorParameters",
      "Range"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "float"
    ],
    "method": "range",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#range(float)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "Weight",
      "Separation"
    ],
    "param-types": [
      "double",
      "double"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.SeparationBehavior#SeparationBehavior(double,double)",
    "class": "net.citizensnpcs.api.ai.flocking.SeparationBehavior"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuPage#InventoryMenuPage()",
    "class": "net.citizensnpcs.api.gui.InventoryMenuPage"
  },
  {
    "method": "getSelected",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent#getSelected()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["Mat"],
    "static": true,
    "param-types": ["org.bukkit.Material[]"],
    "method": "canStandIn",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#canStandIn(org.bukkit.Material...)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "boolean"
  },
  {
    "param-names": [
      "Key",
      "Item"
    ],
    "static": true,
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "saveItem",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.ItemStorage#saveItem(net.citizensnpcs.api.util.DataKey,org.bukkit.inventory.ItemStack)",
    "class": "net.citizensnpcs.api.util.ItemStorage"
  },
  {
    "param-names": [
      "Paginator",
      "Sender",
      "Page"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.Paginator",
      "org.bukkit.command.CommandSender",
      "int"
    ],
    "method": "sendPage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Paginator#sendPage(org.bukkit.command.CommandSender,int)",
    "class": "net.citizensnpcs.api.util.Paginator",
    "return": "boolean"
  },
  {
    "method": "describeConstable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#describeConstable()",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "java.util.Optional"
  },
  {
    "param-names": [
      "HPACluster",
      "Clusters"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPACluster",
      "java.util.List"
    ],
    "method": "buildFrom",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPACluster#buildFrom(java.util.List<net.citizensnpcs.api.hpastar.HPACluster>)",
    "class": "net.citizensnpcs.api.hpastar.HPACluster"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_COMPOUND",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_COMPOUND",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the Entity that collided with the NPC.",
    "method": "getCollidedWith",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCollisionEvent#getCollidedWith()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCollisionEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "avoidWater",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#avoidWater()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.EntityTargetNPCEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.EntityTargetNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Whether player is actively using held item. Boolean defaults to false.",
    "static": true,
    "field": "USING_HELD_ITEM",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#USING_HELD_ITEM",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Creates the tag with the specified name.",
    "param-names": ["Name"],
    "param-types": ["java.lang.String"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.Tag#Tag(java.lang.String)",
    "class": "net.citizensnpcs.api.jnbt.Tag"
  },
  {
    "descr": "A callback that is run every tick while the path is being executed.",
    "param-names": [
      "PathPoint.PathCallback",
      "Npc",
      "Point",
      "Path"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.PathPoint.PathCallback",
      "net.citizensnpcs.api.npc.NPC",
      "org.bukkit.block.Block",
      "java.util.ListIterator"
    ],
    "method": "run",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.PathPoint.PathCallback#run(net.citizensnpcs.api.npc.NPC,org.bukkit.block.Block,java.util.ListIterator<org.bukkit.block.Block>)",
    "class": "net.citizensnpcs.api.astar.pathfinder.PathPoint.PathCallback"
  },
  {
    "param-names": ["Npc"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "setSelected",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent#setSelected(net.citizensnpcs.api.npc.NPC)",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensGetSelectedNPCEvent"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCPushEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCPushEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "SpeechContext",
      "Entity"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechContext",
      "org.bukkit.entity.LivingEntity"
    ],
    "method": "addRecipient",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#addRecipient(org.bukkit.entity.LivingEntity)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext",
    "return": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["java.lang.Object"],
    "method": "compareTo",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#compareTo(T)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "int"
  },
  {
    "param-names": ["In"],
    "static": true,
    "param-types": ["org.bukkit.block.Block"],
    "method": "validPosition",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer#validPosition(org.bukkit.block.Block)",
    "class": "net.citizensnpcs.api.astar.pathfinder.MinecraftBlockExaminer",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PLAYER_SKIN_TEXTURE_PROPERTIES_SIGN_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#PLAYER_SKIN_TEXTURE_PROPERTIES_SIGN_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "method": "describeConstable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#describeConstable()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "java.util.Optional"
  },
  {
    "descr": "Creates the tag.",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.EndTag#EndTag()",
    "class": "net.citizensnpcs.api.jnbt.EndTag"
  },
  {
    "descr": "Creates an spawned NPC at the given location.",
    "param-names": [
      "NPCRegistry",
      "Type",
      "Name",
      "Loc"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCRegistry",
      "org.bukkit.entity.EntityType",
      "java.lang.String",
      "org.bukkit.Location"
    ],
    "method": "createNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#createNPC(org.bukkit.entity.EntityType,java.lang.String,org.bukkit.Location)",
    "class": "net.citizensnpcs.api.npc.NPCRegistry",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent",
    "return": "boolean"
  },
  {
    "descr": "Creates a Precondition that wraps the shouldExecute method in Behavior. When\\nshouldExecute is called, the given Condition will be checked before the wrapped behavior's\\nmethod is called.",
    "param-names": [
      "Wrapping",
      "Condition"
    ],
    "static": true,
    "param-types": [
      "net.citizensnpcs.api.ai.tree.Behavior",
      "net.citizensnpcs.api.ai.tree.Condition"
    ],
    "method": "wrappingPrecondition",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Precondition#wrappingPrecondition(net.citizensnpcs.api.ai.tree.Behavior,net.citizensnpcs.api.ai.tree.Condition)",
    "class": "net.citizensnpcs.api.ai.tree.Precondition",
    "return": "net.citizensnpcs.api.ai.tree.Precondition"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationBeginEvent"
  },
  {
    "static": true,
    "field": "INTRA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType#INTRA",
    "class": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType",
    "return": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType"
  },
  {
    "param-names": ["Behaviors"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.ai.tree.Behavior[]"],
    "method": "createRetryingSequence",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Sequence#createRetryingSequence(net.citizensnpcs.api.ai.tree.Behavior...)",
    "class": "net.citizensnpcs.api.ai.tree.Sequence",
    "return": "net.citizensnpcs.api.ai.tree.Sequence"
  },
  {
    "param-names": [
      "SkullMetaProvider",
      "String",
      "Meta"
    ],
    "param-types": [
      "net.citizensnpcs.api.SkullMetaProvider",
      "java.lang.String",
      "org.bukkit.inventory.meta.SkullMeta"
    ],
    "method": "setTexture",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.SkullMetaProvider#setTexture(java.lang.String,org.bukkit.inventory.meta.SkullMeta)",
    "class": "net.citizensnpcs.api.SkullMetaProvider"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "attackDelayTicks",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#attackDelayTicks()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "int"
  },
  {
    "param-names": ["Npc"],
    "static": true,
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "createWithNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.WanderGoal#createWithNPC(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.ai.goals.WanderGoal",
    "return": "net.citizensnpcs.api.ai.goals.WanderGoal"
  },
  {
    "descr": "Sets the distance margin.",
    "param-names": [
      "NavigatorParameters",
      "New Margin"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "double"
    ],
    "method": "distanceMargin",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#distanceMargin(double)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.EntityTargetNPCEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.EntityTargetNPCEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Target"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "setNewTarget",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent#setNewTarget(org.bukkit.entity.Player)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensPreReloadEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensPreReloadEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Deregisters the NPC and removes all data about it from the data store.",
    "param-names": [
      "NPCRegistry",
      "Npc"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCRegistry",
      "net.citizensnpcs.api.npc.NPC"
    ],
    "method": "deregister",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#deregister(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.npc.NPCRegistry"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenGateEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenGateEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Msg"],
    "static": true,
    "param-types": ["java.lang.Object[]"],
    "method": "log",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#log(java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "param-names": [
      "Key",
      "Preferred Locale",
      "Msg"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "java.util.Locale",
      "java.lang.Object[]"
    ],
    "method": "translate",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Translator#translate(java.lang.String,java.util.Locale,java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Translator",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCAddTraitEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCAddTraitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent"
  },
  {
    "descr": "Adds a click handler to this slot.",
    "param-names": [
      "InventoryMenuSlot",
      "Func"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenuSlot",
      "java.util.function.Consumer"
    ],
    "method": "addClickHandler",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuSlot#addClickHandler(java.util.function.Consumer<net.citizensnpcs.api.gui.CitizensInventoryClickEvent>)",
    "class": "net.citizensnpcs.api.gui.InventoryMenuSlot"
  },
  {
    "descr": "Gets the NPC with the given unique ID if it exists.",
    "param-names": [
      "NPCRegistry",
      "Uuid"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCRegistry",
      "java.util.UUID"
    ],
    "method": "getByUniqueId",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#getByUniqueId(java.util.UUID)",
    "class": "net.citizensnpcs.api.npc.NPCRegistry",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Get all of an NPC's equipment.",
    "param-names": ["Equipment"],
    "param-types": ["net.citizensnpcs.api.trait.trait.Equipment"],
    "method": "getEquipment",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment#getEquipment()",
    "class": "net.citizensnpcs.api.trait.trait.Equipment",
    "return": "org.bukkit.inventory.ItemStack[]"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#valueOf(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "net.citizensnpcs.api.event.DespawnReason"
  },
  {
    "descr": "Gets the path distance margin.",
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "pathDistanceMargin",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#pathDistanceMargin()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "double"
  },
  {
    "param-names": [
      "Goal",
      "Location",
      "Source",
      "Examiners"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.VectorGoal",
      "org.bukkit.Location",
      "net.citizensnpcs.api.astar.pathfinder.BlockSource",
      "net.citizensnpcs.api.astar.pathfinder.BlockExaminer[]"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.VectorNode#VectorNode(net.citizensnpcs.api.astar.pathfinder.VectorGoal,org.bukkit.Location,net.citizensnpcs.api.astar.pathfinder.BlockSource,net.citizensnpcs.api.astar.pathfinder.BlockExaminer...)",
    "class": "net.citizensnpcs.api.astar.pathfinder.VectorNode"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCVehicleDamageEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCVehicleDamageEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "straightLineTargetingDistance",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#straightLineTargetingDistance()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "float"
  },
  {
    "descr": "Whether the NPC is currently glowing. Boolean.",
    "static": true,
    "field": "GLOWING_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#GLOWING_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "DataKey",
      "Key",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String",
      "int"
    ],
    "method": "getInt",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getInt(java.lang.String,int)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "int"
  },
  {
    "descr": "Returns the cost of moving between the two supplied AStarNodes.",
    "param-names": [
      "AStarGoal",
      "From",
      "To"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.AStarGoal",
      "net.citizensnpcs.api.astar.AStarNode",
      "net.citizensnpcs.api.astar.AStarNode"
    ],
    "method": "g",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarGoal#g(T,T)",
    "class": "net.citizensnpcs.api.astar.AStarGoal",
    "return": "float"
  },
  {
    "param-names": [
      "VectorNode",
      "To"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.VectorNode",
      "net.citizensnpcs.api.astar.pathfinder.VectorNode"
    ],
    "method": "distance",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.VectorNode#distance(net.citizensnpcs.api.astar.pathfinder.VectorNode)",
    "class": "net.citizensnpcs.api.astar.pathfinder.VectorNode",
    "return": "float"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCVehicleDamageEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCVehicleDamageEvent",
    "return": "boolean"
  },
  {
    "descr": "Whether a value must be present at load time. If a value for the field could not be loaded,\\nPersistenceLoader#load(Object, DataKey) will return null.",
    "param-names": ["Persist"],
    "param-types": ["net.citizensnpcs.api.persistence.Persist"],
    "method": "required",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.Persist#required()",
    "class": "net.citizensnpcs.api.persistence.Persist",
    "return": "boolean"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getCreator",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#getCreator()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "static": true,
    "field": "TARGET_MOVED_WORLD",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#TARGET_MOVED_WORLD",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "net.citizensnpcs.api.ai.event.CancelReason"
  },
  {
    "descr": "The Item data. Byte.",
    "static": true,
    "field": "ITEM_DATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#ITEM_DATA",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "descr": "Returns the NavigatorParameters local to this navigator. These parameters are copied to local target\\nparameters when a new target is started.",
    "param-names": ["Navigator"],
    "param-types": ["net.citizensnpcs.api.ai.Navigator"],
    "method": "getDefaultParameters",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#getDefaultParameters()",
    "class": "net.citizensnpcs.api.ai.Navigator",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "param-names": [
      "Info",
      "Instance"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu.InventoryMenuInfo",
      "net.citizensnpcs.api.gui.InventoryMenuPage"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#InventoryMenu(net.citizensnpcs.api.gui.InventoryMenu.InventoryMenuInfo,net.citizensnpcs.api.gui.InventoryMenuPage)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "param-names": [
      "Condition",
      "If Behavior",
      "Else Behavior"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.tree.Condition",
      "net.citizensnpcs.api.ai.tree.Behavior",
      "net.citizensnpcs.api.ai.tree.Behavior"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.IfElse#IfElse(net.citizensnpcs.api.ai.tree.Condition,net.citizensnpcs.api.ai.tree.Behavior,net.citizensnpcs.api.ai.tree.Behavior)",
    "class": "net.citizensnpcs.api.ai.tree.IfElse"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Whether to block Minecraft villager trades. Boolean defaults to true.",
    "static": true,
    "field": "VILLAGER_BLOCK_TRADES",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#VILLAGER_BLOCK_TRADES",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "Converts an object returned by a script to the given Java interface. The class should be an interface, as\\nalthough abstract classes are accepted by the Rhino engine, this is not standard behaviour.",
    "param-names": [
      "Script",
      "Obj",
      "Expected"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.Script",
      "java.lang.Object",
      "java.lang.Class"
    ],
    "method": "convertToInterface",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.Script#<T>convertToInterface(java.lang.Object,java.lang.Class<T>)",
    "class": "net.citizensnpcs.api.scripting.Script",
    "return": "java.lang.Object"
  },
  {
    "param-names": [
      "Key",
      "Msg"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "java.lang.Object[]"
    ],
    "method": "translate",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Translator#translate(java.lang.String,java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Translator",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "Menu",
      "Slots",
      "Inventory"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu",
      "net.citizensnpcs.api.gui.InventoryMenuSlot[]",
      "org.bukkit.inventory.Inventory"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuContext#MenuContext(net.citizensnpcs.api.gui.InventoryMenu,net.citizensnpcs.api.gui.InventoryMenuSlot[],org.bukkit.inventory.Inventory)",
    "class": "net.citizensnpcs.api.gui.MenuContext"
  },
  {
    "descr": "Removes a previously added run callback.",
    "param-names": [
      "NavigatorParameters",
      "Runnable"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.NavigatorParameters",
      "java.lang.Runnable"
    ],
    "method": "removeRunCallback",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#removeRunCallback(java.lang.Runnable)",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "net.citizensnpcs.api.ai.NavigatorParameters"
  },
  {
    "descr": "Gets a trait from the given class. If the NPC does not currently have the trait then it will be created and\\nattached using #addTrait(Class) .",
    "param-names": [
      "NPC",
      "Trait"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "java.lang.Class"
    ],
    "method": "getOrAddTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#<T>getOrAddTrait(java.lang.Class<T>)",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "param-names": ["EntityTarget"],
    "param-types": ["net.citizensnpcs.api.ai.EntityTarget"],
    "method": "isAggressive",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.EntityTarget#isAggressive()",
    "class": "net.citizensnpcs.api.ai.EntityTarget",
    "return": "boolean"
  },
  {
    "param-names": [
      "VectorNode",
      "Source",
      "Point"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.VectorNode",
      "net.citizensnpcs.api.astar.pathfinder.BlockSource",
      "net.citizensnpcs.api.astar.pathfinder.PathPoint"
    ],
    "method": "getNeighbours",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.VectorNode#getNeighbours(net.citizensnpcs.api.astar.pathfinder.BlockSource,net.citizensnpcs.api.astar.pathfinder.PathPoint)",
    "class": "net.citizensnpcs.api.astar.pathfinder.VectorNode",
    "return": "java.util.List"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent"
  },
  {
    "param-names": ["GroupNPCFlock"],
    "param-types": ["net.citizensnpcs.api.ai.flocking.GroupNPCFlock"],
    "method": "getNPCs",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.GroupNPCFlock#getNPCs()",
    "class": "net.citizensnpcs.api.ai.flocking.GroupNPCFlock",
    "return": "java.util.List"
  },
  {
    "param-names": [
      "World",
      "X",
      "Z",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "float"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.ChunkSnapshotBlockSource#ChunkSnapshotBlockSource(org.bukkit.World,int,int,float)",
    "class": "net.citizensnpcs.api.astar.pathfinder.ChunkSnapshotBlockSource"
  },
  {
    "descr": "Clears the CancelReason returned by #getCancelReason() and attempts to resume pathfinding.",
    "param-names": ["PathStrategy"],
    "param-types": ["net.citizensnpcs.api.ai.PathStrategy"],
    "method": "clearCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.PathStrategy#clearCancelReason()",
    "class": "net.citizensnpcs.api.ai.PathStrategy"
  },
  {
    "param-names": ["MenuPattern"],
    "param-types": ["net.citizensnpcs.api.gui.MenuPattern"],
    "method": "transitions",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuPattern#transitions()",
    "class": "net.citizensnpcs.api.gui.MenuPattern",
    "return": "net.citizensnpcs.api.gui.MenuTransition[]"
  },
  {
    "param-names": [
      "VectorNode",
      "Goal"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.VectorNode",
      "org.bukkit.util.Vector"
    ],
    "method": "heuristicDistance",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.VectorNode#heuristicDistance(org.bukkit.util.Vector)",
    "class": "net.citizensnpcs.api.astar.pathfinder.VectorNode",
    "return": "float"
  },
  {
    "descr": "Gets the owner.",
    "param-names": ["Owner"],
    "param-types": ["net.citizensnpcs.api.trait.trait.Owner"],
    "method": "getOwner",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Owner#getOwner()",
    "class": "net.citizensnpcs.api.trait.trait.Owner",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the current navigation to an entity target.",
    "param-names": [
      "Navigator",
      "Target",
      "Aggressive"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.Navigator",
      "org.bukkit.entity.Entity",
      "boolean"
    ],
    "method": "setTarget",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#setTarget(org.bukkit.entity.Entity,boolean)",
    "class": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "method": "getAction",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getAction()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Transition to another page with context. Adds the previous page to a stack which will be returned to when the\\ncurrent page is closed.",
    "param-names": [
      "InventoryMenu",
      "Instance",
      "Context"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu",
      "net.citizensnpcs.api.gui.InventoryMenuPage",
      "java.util.Map"
    ],
    "method": "transition",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#transition(net.citizensnpcs.api.gui.InventoryMenuPage,java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Owner#Owner()",
    "class": "net.citizensnpcs.api.trait.trait.Owner"
  },
  {
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "descr": "Returns the displacement vector to be combined with other FlockBehavior vectors by a Flocker.",
    "param-names": [
      "FlockBehavior",
      "Npc",
      "Nearby"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.flocking.FlockBehavior",
      "net.citizensnpcs.api.npc.NPC",
      "java.util.Collection"
    ],
    "method": "getVector",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.FlockBehavior#getVector(net.citizensnpcs.api.npc.NPC,java.util.Collection<net.citizensnpcs.api.npc.NPC>)",
    "class": "net.citizensnpcs.api.ai.flocking.FlockBehavior",
    "return": "org.bukkit.util.Vector"
  },
  {
    "method": "getEvent",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEntityEvent#getEvent()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent",
    "return": "org.bukkit.event.entity.EntityDamageEvent"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTeleportEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTeleportEvent"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCAddTraitEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCAddTraitEvent",
    "return": "java.lang.String"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the Block that was opened.",
    "method": "getGate",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenGateEvent#getGate()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenGateEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "param-names": ["Parsed"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "parseColors",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Colorizer#parseColors(java.lang.String)",
    "class": "net.citizensnpcs.api.util.Colorizer",
    "return": "java.lang.String"
  },
  {
    "descr": "Registers a global ContextProvider, which will be invoked on all scripts created by this ScriptCompiler.",
    "param-names": [
      "ScriptCompiler",
      "Provider"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.ScriptCompiler",
      "net.citizensnpcs.api.scripting.ContextProvider"
    ],
    "method": "registerGlobalContextProvider",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler#registerGlobalContextProvider(net.citizensnpcs.api.scripting.ContextProvider)",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler"
  },
  {
    "method": "getSource",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent#getSource()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRemoveByCommandSenderEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets a trait from the given class. If the NPC does not currently have the trait then it will be created and\\nattached using #addTrait(Class) .",
    "param-names": [
      "NPC",
      "Trait"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPC",
      "java.lang.Class"
    ],
    "method": "getTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#<T>getTrait(java.lang.Class<T>)",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "net.citizensnpcs.api.trait.Trait"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The Minecraft sound to play when hurt. String - Minecraft sound name.",
    "static": true,
    "field": "HURT_SOUND_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#HURT_SOUND_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "param-names": ["DataKey"],
    "param-types": ["net.citizensnpcs.api.util.DataKey"],
    "method": "getPath",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getPath()",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "java.lang.String"
  },
  {
    "descr": "Fetches metadata from the given key. Sets the default value provided via #set(String, Object) if the\\nmetadata is not already stored.",
    "param-names": [
      "MetadataStore",
      "Key",
      "Def"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "java.lang.String",
      "java.lang.Object"
    ],
    "method": "get",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#<T>get(java.lang.String,T)",
    "class": "net.citizensnpcs.api.npc.MetadataStore",
    "return": "java.lang.Object"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["java.lang.Enum"],
    "method": "compareTo",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#compareTo(E)",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "int"
  },
  {
    "descr": "The menu title.",
    "param-names": ["Menu"],
    "param-types": ["net.citizensnpcs.api.gui.Menu"],
    "method": "title",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.Menu#title()",
    "class": "net.citizensnpcs.api.gui.Menu",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the player that clicked the NPC.",
    "method": "getClicker",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRightClickEvent#getClicker()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRightClickEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Creates a new Talkable entity and returns it",
    "param-names": [
      "SpeechFactory",
      "Entity"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechFactory",
      "org.bukkit.entity.Entity"
    ],
    "method": "newTalkableEntity",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechFactory#newTalkableEntity(org.bukkit.entity.Entity)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechFactory",
    "return": "net.citizensnpcs.api.ai.speech.Talkable"
  },
  {
    "descr": "Called by a VocalChord when talking to this Talkable Entity to provide a universal method to getting an\\nevent/output.",
    "param-names": [
      "Talkable",
      "Context",
      "Message",
      "Vocal Chord"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.Talkable",
      "net.citizensnpcs.api.ai.speech.SpeechContext",
      "java.lang.String",
      "net.citizensnpcs.api.ai.speech.VocalChord"
    ],
    "method": "talkTo",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.Talkable#talkTo(net.citizensnpcs.api.ai.speech.SpeechContext,java.lang.String,net.citizensnpcs.api.ai.speech.VocalChord)",
    "class": "net.citizensnpcs.api.ai.speech.Talkable"
  },
  {
    "method": "getNavigator",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent#getNavigator()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationReplaceEvent",
    "return": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRightClickEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRightClickEvent",
    "return": "boolean"
  },
  {
    "descr": "Creates the tag.",
    "param-names": [
      "Name",
      "Value"
    ],
    "param-types": [
      "java.lang.String",
      "byte[]"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.ByteArrayTag#ByteArrayTag(java.lang.String,byte[])",
    "class": "net.citizensnpcs.api.jnbt.ByteArrayTag"
  },
  {
    "method": "getNewTarget",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent#getNewTarget()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLookCloseChangeTargetEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "param-names": [
      "Text",
      "Sender",
      "Npc"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "org.bukkit.command.CommandSender",
      "net.citizensnpcs.api.npc.NPC"
    ],
    "method": "replace",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Placeholders#replace(java.lang.String,org.bukkit.command.CommandSender,net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.util.Placeholders",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.EntityTargetNPCEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.EntityTargetNPCEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "method": "getDuration",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustEvent#getDuration()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustEvent",
    "return": "int"
  },
  {
    "param-names": [
      "Message",
      "Recipient"
    ],
    "param-types": [
      "java.lang.String",
      "org.bukkit.entity.LivingEntity"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#SpeechContext(java.lang.String,org.bukkit.entity.LivingEntity)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.NPCSpeechEvent",
    "return": "boolean"
  },
  {
    "param-names": ["HPACluster"],
    "param-types": ["net.citizensnpcs.api.hpastar.HPACluster"],
    "method": "connectIntra",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPACluster#connectIntra()",
    "class": "net.citizensnpcs.api.hpastar.HPACluster"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent"
  },
  {
    "param-names": [
      "DataKey",
      "Key"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String"
    ],
    "method": "removeKey",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#removeKey(java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "descr": "Stores data at the given key. Data will persist and must be a primitive type or String.",
    "param-names": [
      "MetadataStore",
      "Key",
      "Data"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.MetadataStore",
      "java.lang.String",
      "java.lang.Object"
    ],
    "method": "setPersistent",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#setPersistent(java.lang.String,java.lang.Object)",
    "class": "net.citizensnpcs.api.npc.MetadataStore"
  },
  {
    "param-names": [
      "Sender",
      "Msg"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.command.CommandSender",
      "java.lang.Object[]"
    ],
    "method": "sendError",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#sendError(org.bukkit.command.CommandSender,java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTeleportEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTeleportEvent",
    "return": "boolean"
  },
  {
    "param-names": ["ForwardingBehaviorGoalAdapter"],
    "param-types": ["net.citizensnpcs.api.ai.tree.ForwardingBehaviorGoalAdapter"],
    "method": "getWrapped",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.ForwardingBehaviorGoalAdapter#getWrapped()",
    "class": "net.citizensnpcs.api.ai.tree.ForwardingBehaviorGoalAdapter",
    "return": "net.citizensnpcs.api.ai.tree.Behavior"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCreateEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCreateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "If using global/static persistence, must be non-empty.",
    "param-names": ["Persist"],
    "param-types": ["net.citizensnpcs.api.persistence.Persist"],
    "method": "namespace",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.persistence.Persist#namespace()",
    "class": "net.citizensnpcs.api.persistence.Persist",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "OFF_HAND",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot#OFF_HAND",
    "class": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot",
    "return": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "useNewPathfinder",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#useNewPathfinder()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "boolean"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCloneEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCloneEvent",
    "return": "boolean"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustEvent",
    "return": "boolean"
  },
  {
    "method": "getDamager",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByBlockEvent#getDamager()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByBlockEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Registers a Goal with a given priority. Priority must be greater than 0.",
    "param-names": [
      "GoalController",
      "Goal",
      "Priority"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.GoalController",
      "net.citizensnpcs.api.ai.Goal",
      "int"
    ],
    "method": "addGoal",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.GoalController#addGoal(net.citizensnpcs.api.ai.Goal,int)",
    "class": "net.citizensnpcs.api.ai.GoalController"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustEvent"
  },
  {
    "descr": "Whether player is actively using offhand item. Boolean defaults to false.",
    "static": true,
    "field": "USING_OFFHAND_ITEM",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#USING_OFFHAND_ITEM",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["PrioritisableGoal"],
    "param-types": ["net.citizensnpcs.api.ai.PrioritisableGoal"],
    "method": "getPriority",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.PrioritisableGoal#getPriority()",
    "class": "net.citizensnpcs.api.ai.PrioritisableGoal",
    "return": "int"
  },
  {
    "static": true,
    "field": "RELOAD",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#RELOAD",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "net.citizensnpcs.api.event.DespawnReason"
  },
  {
    "param-names": [
      "Decorator.Builder",
      "Callback"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.tree.Decorator.Builder",
      "java.lang.Runnable"
    ],
    "method": "withResetCallback",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Decorator.Builder#withResetCallback(java.lang.Runnable)",
    "class": "net.citizensnpcs.api.ai.tree.Decorator.Builder",
    "return": "net.citizensnpcs.api.ai.tree.Decorator.Builder"
  },
  {
    "param-names": ["Bukkit"],
    "static": true,
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "convert",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.BoundingBox#convert(org.bukkit.util.BoundingBox)",
    "class": "net.citizensnpcs.api.util.BoundingBox",
    "return": "net.citizensnpcs.api.util.BoundingBox"
  },
  {
    "descr": "If the NPC is not spawned, then this method will return the last known location, or null if it has never been\\nspawned. Otherwise, it is equivalent to calling npc.getBukkitEntity().getLocation().",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "getStoredLocation",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getStoredLocation()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "SOUTH",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.Direction#SOUTH",
    "class": "net.citizensnpcs.api.hpastar.Direction",
    "return": "net.citizensnpcs.api.hpastar.Direction"
  },
  {
    "param-names": [
      "From",
      "To",
      "Type",
      "Weight"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPAGraphNode",
      "net.citizensnpcs.api.hpastar.HPAGraphNode",
      "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType",
      "float"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraphEdge#HPAGraphEdge(net.citizensnpcs.api.hpastar.HPAGraphNode,net.citizensnpcs.api.hpastar.HPAGraphNode,net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType,float)",
    "class": "net.citizensnpcs.api.hpastar.HPAGraphEdge"
  },
  {
    "param-names": [
      "Arg0",
      "Arg1"
    ],
    "static": true,
    "param-types": [
      "java.lang.Class",
      "java.lang.String"
    ],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#<T>valueOf(java.lang.Class<T>,java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "java.lang.Enum"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the name of the default VocalChord for this NPC.",
    "param-names": ["Speech"],
    "param-types": ["net.citizensnpcs.api.trait.trait.Speech"],
    "method": "getDefaultVocalChord",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Speech#getDefaultVocalChord()",
    "class": "net.citizensnpcs.api.trait.trait.Speech",
    "return": "java.lang.String"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCollisionEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCloneEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCloneEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "isDebugging",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#isDebugging()",
    "class": "net.citizensnpcs.api.util.Messaging",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot#valueOf(java.lang.String)",
    "class": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot",
    "return": "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot"
  },
  {
    "param-names": [
      "Player",
      "Menu",
      "Input"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.entity.Player",
      "net.citizensnpcs.api.gui.InventoryMenu",
      "java.util.function.Consumer"
    ],
    "method": "captureInput",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.ModalMenuInput#captureInput(org.bukkit.entity.Player,net.citizensnpcs.api.gui.InventoryMenu,java.util.function.Consumer<java.lang.String>)",
    "class": "net.citizensnpcs.api.gui.ModalMenuInput"
  },
  {
    "param-names": ["Name"],
    "param-types": ["java.lang.String"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.CompoundTag#CompoundTag(java.lang.String)",
    "class": "net.citizensnpcs.api.jnbt.CompoundTag"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment#Equipment()",
    "class": "net.citizensnpcs.api.trait.trait.Equipment"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCreateNPCEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets whether an NPC should spawn during server starts or reloads.",
    "param-names": ["Spawned"],
    "param-types": ["net.citizensnpcs.api.trait.trait.Spawned"],
    "method": "shouldSpawn",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Spawned#shouldSpawn()",
    "class": "net.citizensnpcs.api.trait.trait.Spawned",
    "return": "boolean"
  },
  {
    "param-names": [
      "Name",
      "Clazz"
    ],
    "param-types": [
      "java.lang.String",
      "java.lang.Class"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.ResourceTranslationProvider#ResourceTranslationProvider(java.lang.String,java.lang.Class<?>)",
    "class": "net.citizensnpcs.api.util.ResourceTranslationProvider"
  },
  {
    "descr": "The Integer delay to respawn in ticks after death. Only works if non-zero.",
    "static": true,
    "field": "RESPAWN_DELAY_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#RESPAWN_DELAY_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns a new PathPoint at a given Vector.",
    "param-names": [
      "PathPoint",
      "Vector"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.PathPoint",
      "org.bukkit.util.Vector"
    ],
    "method": "createAtOffset",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.PathPoint#createAtOffset(org.bukkit.util.Vector)",
    "class": "net.citizensnpcs.api.astar.pathfinder.PathPoint",
    "return": "net.citizensnpcs.api.astar.pathfinder.PathPoint"
  },
  {
    "descr": "Gets the name of the registry. Not null.",
    "param-names": ["NPCRegistry"],
    "param-types": ["net.citizensnpcs.api.npc.NPCRegistry"],
    "method": "getName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCRegistry#getName()",
    "class": "net.citizensnpcs.api.npc.NPCRegistry",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns the currently attached Traits",
    "param-names": ["NPC"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "method": "getTraits",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#getTraits()",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.Iterable"
  },
  {
    "descr": "Stores the given NPC into memory or to a disk representation.",
    "param-names": [
      "NPCDataStore",
      "Npc"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCDataStore",
      "net.citizensnpcs.api.npc.NPC"
    ],
    "method": "store",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCDataStore#store(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.npc.NPCDataStore"
  },
  {
    "static": true,
    "field": "INTER",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType#INTER",
    "class": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType",
    "return": "net.citizensnpcs.api.hpastar.HPAGraphEdge.EdgeType"
  },
  {
    "descr": "Called when an NPC despawns.",
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDespawnEvent"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDeserialiseMetaEvent"
  },
  {
    "param-names": [
      "Owner",
      "Other"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Owner",
      "java.util.UUID"
    ],
    "method": "isOwnedBy",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Owner#isOwnedBy(java.util.UUID)",
    "class": "net.citizensnpcs.api.trait.trait.Owner",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "NONE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.TargetType#NONE",
    "class": "net.citizensnpcs.api.ai.TargetType",
    "return": "net.citizensnpcs.api.ai.TargetType"
  },
  {
    "param-names": ["Root"],
    "param-types": ["java.lang.String"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.YamlStorage.YamlKey#YamlKey(java.lang.String)",
    "class": "net.citizensnpcs.api.util.YamlStorage.YamlKey"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEntityEvent"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationStuckEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationStuckEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the name of the VocalChord that called this event.",
    "method": "getVocalChordName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechEvent#getVocalChordName()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechEvent",
    "return": "java.lang.String"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensEnableEvent"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCEnderTeleportEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCEnderTeleportEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "HPACluster",
      "Other",
      "Direction"
    ],
    "param-types": [
      "net.citizensnpcs.api.hpastar.HPACluster",
      "net.citizensnpcs.api.hpastar.HPACluster",
      "net.citizensnpcs.api.hpastar.Direction"
    ],
    "method": "connect",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.hpastar.HPACluster#connect(net.citizensnpcs.api.hpastar.HPACluster,net.citizensnpcs.api.hpastar.Direction)",
    "class": "net.citizensnpcs.api.hpastar.HPACluster"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.FlyingBlockExaminer#FlyingBlockExaminer()",
    "class": "net.citizensnpcs.api.astar.pathfinder.FlyingBlockExaminer"
  },
  {
    "param-names": ["Description"],
    "param-types": ["java.lang.String"],
    "method": "setCurrentItemDescription",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#setCurrentItemDescription(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent"
  },
  {
    "descr": "Adds a direct Talkable recipient. The VocalChord should use this information to correctly direct\\nthe message. Note: depending on the VocalChord, this list may not be inclusive as to who gets the message.",
    "param-names": [
      "SpeechContext",
      "Entity"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.speech.SpeechContext",
      "org.bukkit.entity.Entity"
    ],
    "method": "addRecipient",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#addRecipient(org.bukkit.entity.Entity)",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext",
    "return": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "param-names": ["Decorator.Builder"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Decorator.Builder"],
    "method": "build",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Decorator.Builder#build()",
    "class": "net.citizensnpcs.api.ai.tree.Decorator.Builder",
    "return": "net.citizensnpcs.api.ai.tree.Decorator"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Transition to another page. Adds the previous page to a stack which will be returned to when the current page is\\nclosed.",
    "param-names": [
      "InventoryMenu",
      "Instance"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenu",
      "net.citizensnpcs.api.gui.InventoryMenuPage"
    ],
    "method": "transition",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenu#transition(net.citizensnpcs.api.gui.InventoryMenuPage)",
    "class": "net.citizensnpcs.api.gui.InventoryMenu"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByEntityEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent",
    "return": "java.lang.String"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the NPCs to be considered part of a flock.",
    "param-names": [
      "NPCFlock",
      "Npc"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.flocking.NPCFlock",
      "net.citizensnpcs.api.npc.NPC"
    ],
    "method": "getNearby",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.NPCFlock#getNearby(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.ai.flocking.NPCFlock",
    "return": "java.util.Collection"
  },
  {
    "param-names": [
      "Inventory",
      "Event"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Inventory",
      "org.bukkit.event.inventory.InventoryCloseEvent"
    ],
    "method": "inventoryCloseEvent",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Inventory#inventoryCloseEvent(org.bukkit.event.inventory.InventoryCloseEvent)",
    "class": "net.citizensnpcs.api.trait.trait.Inventory"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "WanderGoal",
      "Region"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.goals.WanderGoal",
      "java.lang.Object"
    ],
    "method": "setWorldGuardRegion",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.WanderGoal#setWorldGuardRegion(java.lang.Object)",
    "class": "net.citizensnpcs.api.ai.goals.WanderGoal"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSpawnEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSpawnEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the parent PathPoint",
    "param-names": ["PathPoint"],
    "param-types": ["net.citizensnpcs.api.astar.pathfinder.PathPoint"],
    "method": "getParentPoint",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.PathPoint#getParentPoint()",
    "class": "net.citizensnpcs.api.astar.pathfinder.PathPoint",
    "return": "net.citizensnpcs.api.astar.pathfinder.PathPoint"
  },
  {
    "param-names": ["MenuPattern"],
    "param-types": ["net.citizensnpcs.api.gui.MenuPattern"],
    "method": "slots",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.MenuPattern#slots()",
    "class": "net.citizensnpcs.api.gui.MenuPattern",
    "return": "net.citizensnpcs.api.gui.MenuSlot[]"
  },
  {
    "descr": "Gets the value of this tag.",
    "param-names": ["Tag"],
    "param-types": ["net.citizensnpcs.api.jnbt.Tag"],
    "method": "getValue",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.Tag#getValue()",
    "class": "net.citizensnpcs.api.jnbt.Tag",
    "return": "java.lang.Object"
  },
  {
    "descr": "Stores all NPCs in the given NPCRegistry to disk.",
    "param-names": [
      "NPCDataStore",
      "Registry"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCDataStore",
      "net.citizensnpcs.api.npc.NPCRegistry"
    ],
    "method": "storeAll",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCDataStore#storeAll(net.citizensnpcs.api.npc.NPCRegistry)",
    "class": "net.citizensnpcs.api.npc.NPCDataStore"
  },
  {
    "param-names": [
      "DataKey",
      "Relative"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String"
    ],
    "method": "getRelative",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getRelative(java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "static": true,
    "field": "DEATH",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#DEATH",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "net.citizensnpcs.api.event.DespawnReason"
  },
  {
    "param-names": [
      "Name",
      "Provider"
    ],
    "param-types": [
      "java.lang.String",
      "java.util.concurrent.Callable"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ObjectProvider#ObjectProvider(java.lang.String,java.util.concurrent.Callable<java.lang.Object>)",
    "class": "net.citizensnpcs.api.scripting.ObjectProvider"
  },
  {
    "param-names": [
      "Equipment",
      "Slot"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Equipment",
      "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot"
    ],
    "method": "get",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment#get(net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot)",
    "class": "net.citizensnpcs.api.trait.trait.Equipment",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "param-names": ["WanderGoal"],
    "param-types": ["net.citizensnpcs.api.ai.goals.WanderGoal"],
    "method": "unpause",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.goals.WanderGoal#unpause()",
    "class": "net.citizensnpcs.api.ai.goals.WanderGoal"
  },
  {
    "descr": "Whether the NPC is currently glowing. Boolean.",
    "static": true,
    "field": "GLOWING",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#GLOWING",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensSerialiseMetaEvent"
  },
  {
    "descr": "The fake NPC scoreboard team name because Minecraft requires a team name. Usually will be a random UUID in String\\nform.",
    "static": true,
    "field": "SCOREBOARD_FAKE_TEAM_NAME_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#SCOREBOARD_FAKE_TEAM_NAME_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "param-names": ["BoundingBox"],
    "param-types": ["net.citizensnpcs.api.util.BoundingBox"],
    "field": "minX",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.BoundingBox#minX",
    "class": "net.citizensnpcs.api.util.BoundingBox",
    "return": "double"
  },
  {
    "method": "describeConstable",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.CancelReason#describeConstable()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.CancelReason",
    "return": "java.util.Optional"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCreateEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCreateEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCloneNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCloneNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "name",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#name()",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "java.lang.String"
  },
  {
    "param-names": [
      "Sender",
      "Key",
      "Msg"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.command.CommandSender",
      "java.lang.String",
      "java.lang.Object[]"
    ],
    "method": "sendTr",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.Messaging#sendTr(org.bukkit.command.CommandSender,java.lang.String,java.lang.Object...)",
    "class": "net.citizensnpcs.api.util.Messaging"
  },
  {
    "descr": "Sets whether to retry child Behaviors when they return BehaviorStatus#FAILURE.",
    "param-names": ["Selector.Builder"],
    "param-types": ["net.citizensnpcs.api.ai.tree.Selector.Builder"],
    "method": "retryChildren",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.tree.Selector.Builder#retryChildren()",
    "class": "net.citizensnpcs.api.ai.tree.Selector.Builder",
    "return": "net.citizensnpcs.api.ai.tree.Selector.Builder"
  },
  {
    "param-names": [
      "Inventory",
      "Sender"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Inventory",
      "org.bukkit.entity.Player"
    ],
    "method": "openInventory",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Inventory#openInventory(org.bukkit.entity.Player)",
    "class": "net.citizensnpcs.api.trait.trait.Inventory"
  },
  {
    "descr": "Creates the tag.",
    "param-names": [
      "Name",
      "Value"
    ],
    "param-types": [
      "java.lang.String",
      "float"
    ],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.FloatTag#FloatTag(java.lang.String,float)",
    "class": "net.citizensnpcs.api.jnbt.FloatTag"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustEvent"
  },
  {
    "method": "isLeftClick",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#isLeftClick()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Weight"],
    "param-types": ["double"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.flocking.SeparationBehavior#SeparationBehavior(double)",
    "class": "net.citizensnpcs.api.ai.flocking.SeparationBehavior"
  },
  {
    "param-names": [
      "BlockSource",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "net.citizensnpcs.api.astar.pathfinder.BlockSource",
      "int",
      "int",
      "int"
    ],
    "method": "getCollisionBox",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.BlockSource#getCollisionBox(int,int,int)",
    "class": "net.citizensnpcs.api.astar.pathfinder.BlockSource",
    "return": "net.citizensnpcs.api.util.BoundingBox"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setCurrentItem",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#setCurrentItem(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_DOUBLE",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_DOUBLE",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "descr": "Sets the type of mob that an NPC is.",
    "param-names": [
      "MobType",
      "Type"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.MobType",
      "org.bukkit.entity.EntityType"
    ],
    "method": "setType",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.MobType#setType(org.bukkit.entity.EntityType)",
    "class": "net.citizensnpcs.api.trait.trait.MobType"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRightClickEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRightClickEvent",
    "return": "boolean"
  },
  {
    "param-names": ["ClickHandlers"],
    "param-types": ["net.citizensnpcs.api.gui.ClickHandlers"],
    "method": "value",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.ClickHandlers#value()",
    "class": "net.citizensnpcs.api.gui.ClickHandlers",
    "return": "net.citizensnpcs.api.gui.ClickHandler[]"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRightClickEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRightClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the npc involved in the event.",
    "method": "getNPC",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent#getNPC()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCTraitCommandAttachEvent",
    "return": "net.citizensnpcs.api.npc.NPC"
  },
  {
    "static": true,
    "field": "RESPAWN",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#RESPAWN",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "net.citizensnpcs.api.event.SpawnReason"
  },
  {
    "descr": "Gets the text message sent.",
    "param-names": ["SpeechContext"],
    "param-types": ["net.citizensnpcs.api.ai.speech.SpeechContext"],
    "method": "getMessage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.SpeechContext#getMessage()",
    "class": "net.citizensnpcs.api.ai.speech.SpeechContext",
    "return": "java.lang.String"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCreateEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCreateEvent",
    "return": "boolean"
  },
  {
    "param-names": [
      "Equipment",
      "Slot",
      "Item"
    ],
    "param-types": [
      "net.citizensnpcs.api.trait.trait.Equipment",
      "net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "set",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.trait.Equipment#set(net.citizensnpcs.api.trait.trait.Equipment.EquipmentSlot,org.bukkit.inventory.ItemStack)",
    "class": "net.citizensnpcs.api.trait.trait.Equipment"
  },
  {
    "param-names": ["AStarNode"],
    "param-types": ["net.citizensnpcs.api.astar.AStarNode"],
    "method": "getNeighbours",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.AStarNode#getNeighbours()",
    "class": "net.citizensnpcs.api.astar.AStarNode",
    "return": "java.lang.Iterable"
  },
  {
    "descr": "Whether the NPC is 'protected' i.e. invulnerable to damage. Boolean.",
    "static": true,
    "field": "DEFAULT_PROTECTED_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#DEFAULT_PROTECTED_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "descr": "Loads NPCs from disk into the given NPCRegistry. The registry should be cleared before this is called.",
    "param-names": [
      "NPCDataStore",
      "Registry"
    ],
    "param-types": [
      "net.citizensnpcs.api.npc.NPCDataStore",
      "net.citizensnpcs.api.npc.NPCRegistry"
    ],
    "method": "loadInto",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCDataStore#loadInto(net.citizensnpcs.api.npc.NPCRegistry)",
    "class": "net.citizensnpcs.api.npc.NPCDataStore"
  },
  {
    "param-names": ["Damage"],
    "param-types": ["int"],
    "method": "setDamage",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageByEntityEvent#setDamage(int)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageByEntityEvent"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CitizensDisableEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CitizensDisableEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the current navigation to a Location destination.",
    "param-names": [
      "Navigator",
      "Path",
      "Strategy"
    ],
    "param-types": [
      "net.citizensnpcs.api.ai.Navigator",
      "java.lang.Iterable",
      "java.util.function.Function"
    ],
    "method": "setTarget",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.Navigator#setTarget(java.lang.Iterable<org.bukkit.util.Vector>,java.util.function.Function<net.citizensnpcs.api.ai.NavigatorParameters,net.citizensnpcs.api.ai.PathStrategy>)",
    "class": "net.citizensnpcs.api.ai.Navigator"
  },
  {
    "descr": "Sets the reason for cancelling the event. This will be sent to the CommandSender creator to explain why\\nthe NPC cannot be created.",
    "param-names": ["Reason"],
    "param-types": ["java.lang.String"],
    "method": "setCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#setCancelReason(java.lang.String)",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent"
  },
  {
    "method": "name",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.DespawnReason#name()",
    "event": true,
    "class": "net.citizensnpcs.api.event.DespawnReason",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Type"],
    "static": true,
    "param-types": ["org.bukkit.entity.EntityType"],
    "method": "getMaxNameLength",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.SpigotUtil#getMaxNameLength(org.bukkit.entity.EntityType)",
    "class": "net.citizensnpcs.api.util.SpigotUtil",
    "return": "int"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCompleteEvent"
  },
  {
    "method": "getEventName",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCSpawnEvent#getEventName()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCSpawnEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the SpeechContext associated with the SpeechEvent.",
    "method": "getContext",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent#getContext()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechTargetedEvent",
    "return": "net.citizensnpcs.api.ai.speech.SpeechContext"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.speech.event.SpeechBystanderEvent",
    "return": "boolean"
  },
  {
    "method": "isCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCVehicleDamageEvent#isCancelled()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCVehicleDamageEvent",
    "return": "boolean"
  },
  {
    "descr": "Tag type constants.",
    "static": true,
    "field": "TYPE_FLOAT",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.jnbt.NBTConstants#TYPE_FLOAT",
    "class": "net.citizensnpcs.api.jnbt.NBTConstants",
    "return": "int"
  },
  {
    "descr": "Copies the metadata store.",
    "param-names": ["MetadataStore"],
    "param-types": ["net.citizensnpcs.api.npc.MetadataStore"],
    "method": "clone",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.MetadataStore#clone()",
    "class": "net.citizensnpcs.api.npc.MetadataStore",
    "return": "net.citizensnpcs.api.npc.MetadataStore"
  },
  {
    "descr": "Sets the collision Vector to be applied to the NPC.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "setCollisionVector",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCPushEvent#setCollisionVector(org.bukkit.util.Vector)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCPushEvent"
  },
  {
    "param-names": [
      "DataKey",
      "Key",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String",
      "boolean"
    ],
    "method": "setBoolean",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#setBoolean(java.lang.String,boolean)",
    "class": "net.citizensnpcs.api.util.DataKey"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCRightClickEvent#setCancelled(boolean)",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCRightClickEvent"
  },
  {
    "method": "isAsynchronous",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCombustByEntityEvent#isAsynchronous()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Create a builder to compile the given files.",
    "param-names": [
      "ScriptCompiler",
      "File"
    ],
    "param-types": [
      "net.citizensnpcs.api.scripting.ScriptCompiler",
      "java.io.File"
    ],
    "method": "compile",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.scripting.ScriptCompiler#compile(java.io.File)",
    "class": "net.citizensnpcs.api.scripting.ScriptCompiler",
    "return": "net.citizensnpcs.api.scripting.ScriptCompiler.CompileTaskBuilder"
  },
  {
    "descr": "The Minecart item name.",
    "static": true,
    "field": "MINECART_ITEM",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC.Metadata#MINECART_ITEM",
    "class": "net.citizensnpcs.api.npc.NPC.Metadata",
    "return": "net.citizensnpcs.api.npc.NPC.Metadata"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.event.NavigationCancelEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.ai.event.NavigationCancelEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["java.lang.Object"],
    "method": "compareTo",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.SpawnReason#compareTo(T)",
    "event": true,
    "class": "net.citizensnpcs.api.event.SpawnReason",
    "return": "int"
  },
  {
    "static": true,
    "field": "ALWAYS_USE_NAME_HOLOGRAM_METADATA",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPC#ALWAYS_USE_NAME_HOLOGRAM_METADATA",
    "class": "net.citizensnpcs.api.npc.NPC",
    "return": "java.lang.String"
  },
  {
    "method": "getPlayer",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCCommandDispatchEvent#getPlayer()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCommandDispatchEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the current implementation's TraitFactory.",
    "static": true,
    "method": "getTraitFactory",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.CitizensAPI#getTraitFactory()",
    "class": "net.citizensnpcs.api.CitizensAPI",
    "return": "net.citizensnpcs.api.trait.TraitFactory"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.ItemStorage#ItemStorage()",
    "class": "net.citizensnpcs.api.util.ItemStorage"
  },
  {
    "method": "getCancelReason",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.PlayerCreateNPCEvent#getCancelReason()",
    "event": true,
    "class": "net.citizensnpcs.api.event.PlayerCreateNPCEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getCause",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCDamageEvent#getCause()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCDamageEvent",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.gui.CitizensInventoryClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.MemoryDataKey#MemoryDataKey()",
    "class": "net.citizensnpcs.api.util.MemoryDataKey"
  },
  {
    "static": true,
    "method": "values",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.TargetType#values()",
    "class": "net.citizensnpcs.api.ai.TargetType",
    "return": "net.citizensnpcs.api.ai.TargetType[]"
  },
  {
    "descr": "Gets the player that clicked the NPC.",
    "method": "getClicker",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCLeftClickEvent#getClicker()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCLeftClickEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "method": "getHandlers",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.NPCOpenGateEvent#getHandlers()",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCOpenGateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["NavigatorParameters"],
    "param-types": ["net.citizensnpcs.api.ai.NavigatorParameters"],
    "method": "attackRange",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.ai.NavigatorParameters#attackRange()",
    "class": "net.citizensnpcs.api.ai.NavigatorParameters",
    "return": "double"
  },
  {
    "param-names": [
      "DataKey",
      "Key",
      "Value"
    ],
    "param-types": [
      "net.citizensnpcs.api.util.DataKey",
      "java.lang.String",
      "java.lang.String"
    ],
    "method": "getString",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.util.DataKey#getString(java.lang.String,java.lang.String)",
    "class": "net.citizensnpcs.api.util.DataKey",
    "return": "java.lang.String"
  },
  {
    "module": "sCitizensAPI",
    "event": true,
    "class": "net.citizensnpcs.api.event.NPCCombustByEntityEvent"
  },
  {
    "param-names": ["Npc"],
    "param-types": ["net.citizensnpcs.api.npc.NPC"],
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer#SwimmingExaminer(net.citizensnpcs.api.npc.NPC)",
    "class": "net.citizensnpcs.api.astar.pathfinder.SwimmingExaminer"
  },
  {
    "descr": "Notifies the data store to save all stored data to disk. May be asynchronous.",
    "param-names": ["NPCDataStore"],
    "param-types": ["net.citizensnpcs.api.npc.NPCDataStore"],
    "method": "saveToDisk",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.npc.NPCDataStore#saveToDisk()",
    "class": "net.citizensnpcs.api.npc.NPCDataStore"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent#getHandlerList()",
    "event": true,
    "class": "net.citizensnpcs.api.event.CommandSenderCloneNPCEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Manually set the ItemStack for this slot",
    "param-names": [
      "InventoryMenuSlot",
      "Stack"
    ],
    "param-types": [
      "net.citizensnpcs.api.gui.InventoryMenuSlot",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemStack",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.gui.InventoryMenuSlot#setItemStack(org.bukkit.inventory.ItemStack)",
    "class": "net.citizensnpcs.api.gui.InventoryMenuSlot"
  },
  {
    "param-names": ["TraitInfo"],
    "param-types": ["net.citizensnpcs.api.trait.TraitInfo"],
    "method": "asDefaultTrait",
    "module": "sCitizensAPI",
    "id": "net.citizensnpcs.api.trait.TraitInfo#asDefaultTrait()",
    "class": "net.citizensnpcs.api.trait.TraitInfo",
    "return": "net.citizensnpcs.api.trait.TraitInfo"
  }
]